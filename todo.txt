

Refactor
--------
Join Multiply/SHL/DIV units and Array interface. The assign part and memory calls 
should have the same 'module\resource' interface. 

Wires
-----
Right now we have to wait a clock cycle after a memory or assign part
finished it's job. We don't want to wait until it saves it to a register. 
The solution would be to create a wire. On the finishing cycle the wire will
 take the result from the finishing assign part. On all next cycles it will take it 
from a register we saved for this purpose.

wire wire_x; assign wire_x = (EIP = state ? out_mul : reg_x);


Unroll
------
Implement a specialized unroll. Add a post-body.
Example:

for i in xrange(n):
    z = i*7 + i*2

BECOMES  -> 

m = n-(n % unroll)
for i in xrange(0, m-1, unroll):
    z = i*7 + i*2
    z = (i+1)*7 + (i+1)*2
for i in xrange(m,n, 1):
    z = i*7 + i*2








