#modify from clang cmakelist.txt

set(VBE_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(VBE_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})

if(MSVC) # Work around for the fucking msvc bug on rtti.
  set(LLVM_REQUIRES_RTTI 1)
endif (MSVC)
# Add appropriate flags for GCC
# if (CMAKE_COMPILER_IS_GNUCXX)
  # FIXME: Turn off exceptions, RTTI:
  # -fno-exceptions -fno-rtti
  # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-common -Woverloaded-virtual -Wno-long-long -Wall -W -Wno-unused-parameter -Wwrite-strings")
# endif ()

#Add path for custom modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${VBE_SOURCE_DIR}/cmake")

FIND_PACKAGE(BOOST REQUIRED)
FIND_PACKAGE(Lua REQUIRED)
FIND_PACKAGE(LuaBind REQUIRED)
FIND_PACKAGE(LpSolve REQUIRED)

option(VBE_ENABLE_ABC
       "Enable the Pre-schedule bitlevel optimization by ABC" OFF)
if (VBE_ENABLE_ABC)
FIND_PACKAGE(ABC REQUIRED)
endif(VBE_ENABLE_ABC)

macro(add_vbe_library name)
  set(srcs ${ARGN})
  if(MSVC_IDE OR XCODE)
    file( GLOB_RECURSE headers *.h *.td *.def)
    set(srcs ${srcs} ${headers})
    string( REGEX MATCHALL "/[^/]+" split_path ${CMAKE_CURRENT_SOURCE_DIR})
    list( GET split_path -1 dir)
    file( GLOB_RECURSE headers
      ../../include/vbe${dir}/*.h)
    set(srcs ${srcs} ${headers})
  endif(MSVC_IDE OR XCODE)
  if (SHARED_LIBRARY)
    set(libkind SHARED)
  else()
    set(libkind)
  endif()
  add_library( ${name} ${libkind} ${srcs} )
  if( LLVM_COMMON_DEPENDS )
    add_dependencies( ${name} ${LLVM_COMMON_DEPENDS} )
  endif( LLVM_COMMON_DEPENDS )
  if( LLVM_USED_LIBS )
    foreach(lib ${LLVM_USED_LIBS})
      target_link_libraries( ${name} ${lib} )
    endforeach(lib)
  endif( LLVM_USED_LIBS )

  if( LLVM_LINK_COMPONENTS )
    llvm_config(${name} ${LLVM_LINK_COMPONENTS})
  endif( LLVM_LINK_COMPONENTS )
  get_system_libs(llvm_system_libs)
  if( llvm_system_libs )
    target_link_libraries(${name} ${llvm_system_libs})
  endif( llvm_system_libs )

  if(MSVC)
    get_target_property(cflag ${name} COMPILE_FLAGS)
    if(NOT cflag)
      set(cflag "")
    endif(NOT cflag)
    set(cflag "${cflag} /Za")
    set_target_properties(${name} PROPERTIES COMPILE_FLAGS ${cflag})
  endif(MSVC)
  install(TARGETS ${name}
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX})
endmacro(add_vbe_library)

macro(add_vbe_executable name)
  set(srcs ${ARGN})
  if(MSVC_IDE)
    file( GLOB_RECURSE headers *.h *.td *.def)
    set(srcs ${srcs} ${headers})
  endif(MSVC_IDE)
  add_llvm_executable( ${name} ${srcs} )
endmacro(add_vbe_executable)

include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  ${CMAKE_CURRENT_BINARY_DIR}/include
  ${CMAKE_CURRENT_BINARY_DIR} #include the inc files generated by tablegen
  )

install(DIRECTORY include
  DESTINATION .
  PATTERN ".svn" EXCLUDE
  )

add_definitions( -D_GNU_SOURCE )

set(LLVM_TARGET_DEFINITIONS VTM.td)
tablegen(LLVM VerilogBackendGenRegisterInfo.inc -gen-register-info)
tablegen(LLVM VerilogBackendGenInstrInfo.inc -gen-instr-info)
tablegen(LLVM VerilogBackendGenAsmWriter.inc -gen-asm-writer)
tablegen(LLVM VerilogBackendGenDAGISel.inc -gen-dag-isel)
tablegen(LLVM VerilogBackendGenCallingConv.inc -gen-callingconv)
tablegen(LLVM VerilogBackendGenSubtargetInfo.inc -gen-subtarget)
tablegen(LLVM VerilogBackendGenIntrinsics.inc -gen-tgt-intrinsic)
add_public_tablegen_target(VerilogBackendTableGen)

add_llvm_target(VerilogBackend
  VBackend.cpp
  VFrameLowering.cpp
  VFInfo.cpp
  VISelDAGToDAG.cpp
  VISelLowering.cpp
  VInstrInfo.cpp
  VIntrinsicsInfo.cpp
  VMCAsmInfo.cpp
  VRegisterInfo.cpp
  VSelectionDAGInfo.cpp
  VSubtarget.cpp
  FixMachineCode.cpp
  FixTerminators.cpp
  ForwardWireUsers.cpp
  MergeFallThroughBlocks.cpp
  ScriptingPass.cpp
)

target_link_libraries (LLVMVerilogBackend
  LLVMVerilogBackendDesc
  VTMBitLevelOpt
  VTMHighLevelOpt
  VTMSchedule
  VTMRTLCodegen 
  VTMScripting)

add_subdirectory(include)
add_subdirectory(lib)
add_subdirectory(MCTargetDesc)
add_subdirectory(test)
add_subdirectory(tools)

# TODO: docs.
