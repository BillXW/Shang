{"name":"Shang","body":"[The Shang High-level Synthesis Framework](http://etherzhhb.github.com/Shang/)\r\n========================================\r\n\r\nOverview\r\n--------\r\n\r\nThe Shang [high-level synthesis](http://en.wikipedia.org/wiki/High-level_synthesis) framework, which is implemented as an [LLVM backend](http://llvm.org/docs/WritingAnLLVMBackend.html), generates [Verilog RTL hardware desciption](http://en.wikipedia.org/wiki/Verilog) from LLVM IR.\r\nUnlike most other LLVM-based high-level synthesis frameworks,\r\ne.g. [C-to-Verilog](http://www.c-to-verilog.com/) or [Legup](http://legup.eecg.utoronto.ca/),\r\nwhich work on the LLVM-IR layer, Shang works on the LLVM target-independent code generator,\r\nthis allow Shang to easily represent and optimize some high-level synthesis specific operation(instruction), e.g. reduction OR, concatenation, etc.\r\n\r\nAt the moment, Shang has several high-level synthesis specific (optimization) passes including:\r\n\r\n*  (pre-schedule) Arithmetic/bitwise operation strength reduction\r\n*  BasicBlock frequency based hyper-block formation\r\n*  Pre-schedule logic synthesis with [ABC](http://www.eecs.berkeley.edu/~alanmi/abc/) (optional, maps all bitwise logic operations to look-up tables)\r\n*  Scheduling pass that support Multi-cycles chaining\r\n*  Unified register/functional-unit allocation and binding\r\n*  [Register-transfer level](http://en.wikipedia.org/wiki/Register-transfer_level) optimizations, e.g. common subexpression elimination by and-invert graph (AIG) based structural hashing.\r\n*  Verilog RTL code generation pass\r\n\r\nUsers can also schedule some \"scripting passes\" which apply [Lua](http://www.lua.org/about.html) scripts to the design to accomplish tasks inluding:\r\n*  Generate vendor specific timing constraints for the design, this is necessary because Shang will always generates multi-cycles pathes (by the so-called Multi-cycles Chaining).\r\n*  Generate platform specific bus interface to allow the design generated by Shang cooperates with others components in the same system.\r\n*  ...\r\n\r\nGetting Start\r\n-------------\r\nThis guide should quickly get you started using Shang to synthesize C into Verilog. We divided this guide into 2 parts. Installation will guide you to install required packages and complie the source code on Ubuntu. Main or Hybrid Flow will teach you how to use Shang in different synthesis flow. This method has been tested on the ubuntu-10.04.3, we assume that you are using a Linux 32/64-bit environment, we have not tested Shang on Windows or Mac OS.\r\n###  1.Installation ###\r\n####   Required Packages or Softwares on Ubuntu ####\r\n<dl>\r\n<dt>To install the required packages on Ubuntu run:</dt>\r\n  <pre>\r\n  sudo apt-get install update tcl8.5-dev dejagnu expect gxemul texinfo \\\r\n  build-essential liblpsolve55-dev libgmp3-dev automake libtool python-all-dev \\\r\n  lua5.1 git-core gitk git-gui cmake cmake-gui timeout\r\n  </pre>\r\n<dt>To install systemc</dt>\r\nDownload the source code from http://www.accellera.org/downloads/standards/systemc, when you do this you need an account to access Workspace, you can register as member employee to get an account. Among all the file provided by Accellera Systems Initiative there is a file called INSTALL which will guide you to install systemc on your computer whether for windows or unix.\r\n<dt>To install verilator</dt>\r\nYou can download the verilator-3.833.tgz from the website provided as follow (http://www.veripool.org/wiki/verilator/Installing).On the webpage it alse told you the way to install verilator on your computer, you just do as it said.\r\n<dt>To install clang</dt>\r\nManually download the latest version of clang from http://llvm.org and add it to your path. For 32-bit machines:\r\n<pre>\r\nwget http://llvm.org/releases/2.9/clang+llvm-2.9-i686-linux.tgz\r\ntar xvzf clang+llvm-2.9-i686-linux.tgz\r\nexport PATH=$PWD/clang+llvm-2.9-i686-linux/bin:$PATH\r\n</pre>\r\n<dt>To install the Quartus and Modelsim on Ubuntu</dt>\r\nYou will need Modelsim to simulate the Verilog and Quartus to synthesize the Verilog for an FPGA. You can download Quartus Web Edition and Modelsim for free from Altera \r\n(https://www.altera.com/download/software/quartus-ii-we).\r\n<pre>\r\nbash ~/soft/10.1sp1_quartus_free_linux.sh\r\nbash ~/soft/10.1_modelsim_ase_linux.sh\r\n</pre>\r\nAfter installing Quartus update your environment to add quartus and modelsim to your path:\r\n<pre>export PATH=~/altera/10.1/modelsim_ase/bin/:~/altera/10.1sp1/quartus/bin/$PATH</pre>\r\n<dt>Note</dt>\r\n<dd>You must edit the path above to point to your particular Quartus installation location. Shang has been tested with Quartus 10.1sp1.</dd>\r\n</dl>\r\n\r\n####   Compile Shang Source and run the testsuite ####\r\n<dl>  \r\n<dt>Download (https://github.com/etherzhhb/Shang) and compile the Shang source:</dt>\r\nFirst you should download the source code of llvm to the local computer, you’ll get a folder named llvm, cd into the ~\\llvm\\lib\\Target folder and rename the verilogbackend of Shang which was called VBE to VerilogBackend. Now you have got all the source code of Shang.\r\nTo get both llvm and VBE you can run those:\r\n<pre>\r\ngit clone git@192.168.1.3:llvm.git\r\ngit clone git@192.168.1.3:vbe.git\r\n</pre>\r\nThen we use CMake ,a cross-platform, open-source build system to control the compilation process of Shang. On command line you can type the cmake command shows as follew to configure path for the environment variable used by Shang.\r\n<pre>\r\ncmake ../llvm/ \r\n-DLUA_INCLUDE_DIR=/usr/include/lua5.1/ \r\n-DLUA_LIBRARY=/usr/lib/liblua5.1.a \r\n-DLUA_LUAC=/usr/bin/luac5.1           \r\n-DLUA_BIN2C=/home/kun/local/bin2c5.1 \r\n-DLUABIND_INCLUDE_DIR=/usr/include \r\n-DLUABIND_LIBRARY=/usr/lib/libluabind.so \r\n-DLPSOLVE_INCLUDE_DIR=/home/kun/local/include/ \r\n-DLPSOLVE_LIBRARY=/home/kun/local/lib/liblpsolve55.so \r\n-DENABLE_LOGIC_SYNTHESIS=ON \r\n-DABC_INCLUDE_DIR=/home/kun/alanmi-abc-5dead10b1fe1 \r\n-DABC_LIBRARY=/home/kun/alanmi-abc-5dead10b1fe1/libabc.a \r\n-DSYSTEMC_ROOT_DIR=/home/kun/local/systemc-2.2.0/ \r\n-DFRONTEND=/home/kun/local/llvm_offical_build/bin/clang \r\n-DQUARTUS_BIN_DIR=/opt/altera/10.1/quartus/bin \r\n-DVERILATOR_ROOT_DIR=/home/kun/local/verilator/\r\n</pre>\r\n<dt>Note</dt>\r\n<dd>In the command you should specified the relative path after “cmake” to point to the folder named llvm we have got from the remote repository. The environment variable alse should be specified absolute path on where the package installed or lib placed.</dd>\r\n</dl>\r\n<dl>\r\n<dt>Run the testsuite</dt>\r\nBy running the testsuite you can verify your installation and checking the correction of verilog file converted by Shang. \r\nYou can synthesis or simulate not only all the c file in CHStone but alse the specific c file at once.\r\n</dl>\r\n<dl>\r\nIn order to simulate all benchmark file,you can run:\r\n<pre>\r\ncd shang-build\r\nmake benchmark_test\r\n</pre>\r\nIn order to simulate and synthesis all benchmark file,you can run:\r\n<pre>\r\ncd shang-build\r\nmake benchmark_report\r\n</pre>\r\nUsing float64_add.c as example,you can alse simulate the specific c file like this:\r\n<pre>\r\ncd shang-build\r\nmake float64_add_IMS_ASAP_diff_output\r\n</pre>\r\n</dl>\r\n###  2.Main or Hybrid Flow ###\r\nAs main flow, Shang can compile an entire C program to hardware. It can alse compile user designated functions to hardware while remaining program segments are executed in software on the Altera Nios II Soft Processor. This is referred to as the hybrid flow.\r\n<dl>\r\n<dt>Main flow</dt>\r\nFor example, let’s synthesis the float64_add.c of the dfadd CHStone benchmark, you can run as this:\r\n<pre>\r\ncd shang-build\r\nmake float64_add_IMS_ASAP_main_hls\r\n</pre>\r\nyou will get the Verilog file float64_add_IMS_ASAP_main_DUT_RTL.v in shang-build/lib/Target/VerilogBackend/testsuite/benchmark/ChStone/dfadd/float64_add_IMS_ASAP_main/\r\n<dt>Hybrid flow</dt>\r\nFor example, let’s synthesis the float64_add.c of the dfadd CHStone benchmark, you can run as this:\r\n<pre>\r\ncd shang-build\r\nmake float64_add_IMS_ASAP_hls\r\n</pre>\r\nyou will get the Verilog file float64_add_IMS_ASAP_DUT_RTL.v in shang-build/lib/Target/VerilogBackend/testsuite/benchmark/ChStone/dfadd/float64_add_IMS_ASAP/\r\n</dl>\r\n\r\nWriting Lua script\r\n------------------\r\nShang uses the popular scripting language Lua (version 5.1) as the configure input.   \r\n\r\n[Lua](http://www.lua.org/about.html) is a powerful, fast, lightweight, embeddable scripting language. \r\nIf you are not familiar with the syntax of Lua, you should spend a little time and go over the [Lua 5.1 reference book](http://www.lua.org/manual/5.1/).\r\n\r\nWe will demonstrate how to write a Lua script to configure Shang as follows. Now we assume that you want to convert\r\na C code float64_add.c which is available at testsuite\\benchmark\\ChStone\\dfadd into the corresponding RTL code.  \r\n1.  Setup the input and output path   \r\n    Now we supposed that we wirte a Lua script named \"configure.lua\" for Shang. To begin with, You should assign the\r\n    input path of .bc or .ll file (float64_add.bc). Here we assume that the path is (D:/float64_add/). \r\n    We also presume that the output path is the same as the input path. We output the RLT code (float64_add.v)\r\n    and timing constraint code(float64_add.sdc). a simple example:   \r\n        <pre><code>InDir = [[D:/float64_add/]]\r\n        OutDir = Indir\r\n        InputFile = InDir .. 'float64_add.bc'\r\n        RTLOutput = OutDir .. 'float64_add.v'\r\n        SDCOutput = OutDir .. 'float64_add.sdc'</pre></code>   \r\n2.  Setup the convert function  \r\n    If we want to convert certain function (float64_add in this case) into hardware, we should have the following statement in the Lua script.  \r\n\r\n        Functions.float64_add = { ModName = float64_add,\r\n                                  Scheduling = SynSettings.ASAP,\r\n                                  Pipeline = SynSettings.DontPipeline }  \r\nIn this table, we create a table in which the \"ModName\" is the name of the converted verilog module, the \"Scheduling\" is the\r\nschedule mode of Shang(ASAP or ILP etc.), the \"Pipeline\" is the option whether we use pipeline in Shang.  \r\n3.  Setup the platform information script.  \r\n    Supposed that we use the EP2C35F672C6 FPGA of altera, we could create another lua script named \"EP2C35F672C6.lua\" to\r\n    hold the platform information of EP2C35F672C6. The \"EP2C35F672C6.lua\" could be like this:   \r\n\r\n        local FMAX = 100\r\n        PERIOD = 1000.0 / FMAX\r\n        FUs.ClkEnSelLatency = 1.535 / PERIOD --1.535\r\n        FUs.MaxAllowedMuxSize = 8\r\n        FUs.RegCost = 64\r\n        FUs.LUTCost = 64\r\n        FUs.MaxLutSize = 4\r\n        FUs.MaxMuxPerLUT = 2\r\n        FUs.LutLatency = 0.635 / PERIOD\r\n        -- Latency table for EP2C35F672C6\r\n        FUs.AddSub = { Latencies = { 1.994 / PERIOD, 2.752 / PERIOD, 4.055 / PERIOD, 6.648 / PERIOD },\r\n                       Costs = {128, 576, 1088, 2112, 4160}, StartInterval=1,\r\n            \t\t         ChainingThreshold = ADDSUB_ChainingThreshold}\r\n        FUs.Shift  = { Latencies = { 3.073 / PERIOD, 3.711 / PERIOD, 5.209 / PERIOD, 6.403 / PERIOD },\r\n                       Costs = {64, 1792, 4352, 10176, 26240}, StartInterval=1,\r\n        \t\t\t         ChainingThreshold = SHIFT_ChainingThreshold}\r\n        FUs.Mult   = { Latencies = { 2.181 / PERIOD, 2.504 / PERIOD, 6.503 / PERIOD, 9.229 / PERIOD },\r\n                       Costs = {64, 4160, 8256, 39040, 160256}, StartInterval=1,\r\n        \t\t\t         ChainingThreshold = MULT_ChainingThreshold}\r\n        FUs.ICmp   = { Latencies = { 1.909 / PERIOD, 2.752 / PERIOD, 4.669 / PERIOD, 7.342 / PERIOD },\r\n                       Costs = {64, 512, 1024, 2048, 4096}, StartInterval=1,\r\n        \t\t\t         ChainingThreshold = ICMP_ChainingThreshold}\r\n        \r\n        FUs.MemoryBus = { Latency= 0.5, StartInterval=1, AddressWidth=POINTER_SIZE_IN_BITS, DataWidth=64 }\r\n        \r\n        FUs.BRam = {  Latency=1, StartInterval=1, DataWidth = 64, InitFileDir = TEST_BINARY_ROOT, Template=[=[\r\n        \r\n        // Block Ram $(num)\r\n        reg                      bram$(num)we;\r\n        reg   [$(addrwidth - 1):0]   bram$(num)addr;\r\n        reg   [$(datawidth - 1):0]   bram$(num)in;\r\n        reg   [$(datawidth - 1):0]   bram$(num)out;\r\n        \r\n        reg   [$(datawidth - 1):0]  mem$(num)[0:$(2^addrwidth-1)];\r\n        \r\n        #if filename ~= [[empty]] then \r\n        initial\r\n          begin\r\n            $readmemh(\"$(filepath)$(filename)\", mem$(num));\r\n          end\r\n        #end\r\n        \r\n        always @ (posedge $(clk)) begin\r\n          if (bram$(num)en) begin\r\n            if (bram$(num)we)\r\n              mem$(num)[bram$(num)addr] <= bram$(num)out;\r\n        \r\n            bram$(num)in <= mem$(num)[bram$(num)addr];\r\n          end\r\n        end\r\n        ]=]}  \r\nIn this script, we configure the period of corresponding paltform and parameter of function units. We make the latency\r\ntable for the combinational logic.(to be continued...)   \r\nIn configure.lua, we have to include the EP2C35F672C6.lua with the following statement:   \r\n    <pre><code>-- load platform information script\r\n    dofile(InDir .. 'EP2C35F672C6.lua')</pre></code>   \r\n4.  Setup the other configuration which is not to be concerned by client  \r\n    User will find the other configuration in the example configure.lua at the XXXX.    \r\nAs a whole the example configure.lua should look like this(without the configuration information mentioned in setp 4):  \r\n\r\n    -- Setup the input and output path.\r\n    InDir = [[D:/float64_add/]]\r\n    OutDir = Indir\r\n    InputFile = InDir .. 'float64_add.bc'\r\n    RTLOutput = OutDir .. 'float64_add.v'\r\n    SDCOutput = OutDir .. 'float64_add.sdc''\r\n    \r\n    -- Setup the function to convert and synthesis mode.\r\n    Functions.float64_add = { ModName = float64_add,\r\n                              Scheduling = SynSettings.ASAP,\r\n                              Pipeline = SynSettings.DontPipeline }\r\n                                  \r\n    -- Load platform information script\r\n    dofile(InDir .. 'EP2C35F672C6.lua')  \r\n        \r\nInternal Representations\r\n------------------------\r\nTo be written, includes the untimed-CDFG, the timed-CDFG and the RTL netlist with hehavior-level timing information.\r\n\r\nTodo\r\n----\r\n*  Transcational-level optimization\r\n*  Wire delay prediction (statistical approach)\r\n\r\n\r\n","tagline":"The Shang high-level synthesis framework","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}