# to run:
# quartus_sh -t setup_proj.tcl <family> <verilog_name>

# Load necessary package.
load_package flow
load_package report
#load_package ::quartus::sta

project_new @MAIN_RTL_ENTITY@ -overwrite

#set_global_assignment -name FAMILY [lindex $quartus(args) 0]
#set_global_assignment -name DEVICE AUTO

# Target: DE2 Board
set_global_assignment -name FAMILY CycloneII
set_global_assignment -name DEVICE EP2C70F896C6

# Target: StratixII
#set_global_assignment -name FAMILY StratixII
# fix Stratix II no fit on gsm
#set_global_assignment -name DEVICE EP2S60F484C3

set_global_assignment -name TOP_LEVEL_ENTITY @MAIN_RTL_ENTITY@
set_global_assignment -name SOURCE_FILE @MAIN_RTL_SRC@
set_global_assignment -name SDC_FILE @MAIN_SDC_SRC@

set_global_assignment -name VERILOG_MACRO "quartus_synthesis"

# Create timing assignments
#create_base_clock -fmax "100 MHz" -target clk clk

# turn small rams into logic
#set_global_assignment -name AUTO_RAM_TO_LCELL_CONVERSION ON

# prevent DSP blocks from being used
#set_global_assignment -name DSP_BLOCK_BALANCING "LOGIC ELEMENTS"

# minimize circuit area when packing
#set_global_assignment -name INI_VARS "fit_pack_for_density_light=on; fit_report_lab_usage_stats=on"

# extra synthesis options
#set_global_assignment -name SMART_RECOMPILE ON
#set_global_assignment -name OPTIMIZE_MULTI_CORNER_TIMING ON
#set_global_assignment -name PHYSICAL_SYNTHESIS_COMBO_LOGIC ON
#set_global_assignment -name PHYSICAL_SYNTHESIS_REGISTER_RETIMING ON
#set_global_assignment -name PHYSICAL_SYNTHESIS_REGISTER_DUPLICATION ON
#set_global_assignment -name PHYSICAL_SYNTHESIS_ASYNCHRONOUS_SIGNAL_PIPELINING ON
#set_global_assignment -name PHYSICAL_SYNTHESIS_COMBO_LOGIC_FOR_AREA OFF
#set_global_assignment -name PHYSICAL_SYNTHESIS_MAP_LOGIC_TO_MEMORY_FOR_AREA OFF
#set_global_assignment -name PHYSICAL_SYNTHESIS_EFFORT EXTRA
#set_global_assignment -name NUM_PARALLEL_PROCESSORS ALL
#set_global_assignment -name FLOW_ENABLE_IO_ASSIGNMENT_ANALYSIS ON
#set_global_assignment -name CYCLONEII_OPTIMIZATION_TECHNIQUE SPEED
#set_global_assignment -name SYNTH_TIMING_DRIVEN_SYNTHESIS ON
#set_global_assignment -name ADV_NETLIST_OPT_SYNTH_WYSIWYG_REMAP ON
#set_global_assignment -name OPTIMIZE_POWER_DURING_FITTING "NORMAL COMPILATION"
#set_global_assignment -name ROUTER_TIMING_OPTIMIZATION_LEVEL MAXIMUM
#set_global_assignment -name PLACEMENT_EFFORT_MULTIPLIER 4
#set_global_assignment -name ROUTER_EFFORT_MULTIPLIER 4
#set_global_assignment -name FINAL_PLACEMENT_OPTIMIZATION ALWAYS
#set_global_assignment -name FITTER_AGGRESSIVE_ROUTABILITY_OPTIMIZATION AUTOMATICALLY
#set_global_assignment -name ENABLE_DRC_SETTINGS ON
#set_global_assignment -name SAVE_DISK_SPACE OFF
#set_global_assignment -name MUX_RESTRUCTURE OFF
#set_global_assignment -name OPTIMIZE_POWER_DURING_SYNTHESIS "NORMAL COMPILATION"
#set_global_assignment -name STATE_MACHINE_PROCESSING AUTO
#set_global_assignment -name PARALLEL_SYNTHESIS ON
#set_global_assignment -name AUTO_PACKED_REGISTERS_STRATIXII NORMAL
#set_global_assignment -name AUTO_PACKED_REGISTERS_MAXII NORMAL
#set_global_assignment -name AUTO_PACKED_REGISTERS_CYCLONE NORMAL
#set_global_assignment -name AUTO_PACKED_REGISTERS NORMAL
#set_global_assignment -name AUTO_PACKED_REGISTERS_STRATIX NORMAL
#set_global_assignment -name PRE_MAPPING_RESYNTHESIS ON
#set_global_assignment -name SYNTH_PROTECT_SDC_CONSTRAINT ON

#Don't produce too much messages
set_global_assignment -name HDL_MESSAGE_LEVEL LEVEL1
set_global_assignment -name SYNTH_MESSAGE_LEVEL LOW

# Timing report.
#Enable Worst-Case Timing Report
#set_global_assignment -name TIMEQUEST_DO_REPORT_TIMING ON
#set_global_assignment -name TIMEQUEST_REPORT_WORST_CASE_TIMING_PATHS ON
#Report 10 paths per clock domain
#set_global_assignment -name TIMEQUEST_REPORT_NUM_WORST_CASE_TIMING_PATHS 10

# Commit assignments
#export_assignments

# Compile project.
execute_module -tool map
execute_module -tool fit
execute_module -tool asm

execute_module -tool sta -args {--report_script @VTS_SOURCE_ROOT@/extract_timing.tcl}


proc panel_to_csv {panel_name DataJSON} {
  puts $DataJSON ","
  puts $DataJSON "\"[string map {{ } _} $panel_name]\": \["

  set num_rows [get_number_of_rows -name "*$panel_name"]

  # Go through all the rows in the report file, including the
  # row with headings, and write out the comma-separated data
  for { set i 0 } { $i < $num_rows } { incr i } {
    set row_data [get_report_panel_row -name "*$panel_name" -row $i]
    if {$i != $num_rows - 1} {
      set endChar ","
    } else {
      set endChar "\]"
    }
    # Store the data in form of array of string
    set rowStr "  \[\"[join $row_data {", "}]\"\]$endChar"
    # Remove the new lines.
    puts $DataJSON [string map {"\n" { }} $rowStr]
  }
}

load_report
#Report failing paths.
#qsta_utility::generate_top_failures_per_clock 10 

################################################################################
# Summary
set DataJSON [open "@VTS_BINARY_ROOT@/benchmark.summary.json.tmp" a+]

puts $DataJSON ",\n\{\"name\":\"@MAIN_RTL_ENTITY@\","
puts $DataJSON "\"restricted_fmax\":\"[get_report_panel_data -name {*Fmax*} -col 1 -row 1]\","
#Read the execution cycles
set cycleFile [open "@MAIN_RTL_ENTITY@.txt" r]
#while { [gets $cycleFile line] >= 0 } {  
gets $cycleFile line
regexp {@MAIN_RTL_ENTITY@ hardware run cycles ([0-9]+) wait cycles ([0-9]+)} $line match total wait
set total
set wait
puts $DataJSON "\"cycles\":\"$total\",\"wait\":\"$wait\","
#}
close $cycleFile

puts $DataJSON "\"les\":\"[get_fitter_resource_usage -resource {Total logic elements}]\","
puts $DataJSON "\"les_wo_reg\":\"[get_fitter_resource_usage -resource {*Combinational with no register}]\","
puts $DataJSON "\"les_w_reg_only\":\"[get_fitter_resource_usage -resource {*Register only}]\","
puts $DataJSON "\"les_and_reg\":\"[get_fitter_resource_usage -resource {*Combinational with a register}]\","

puts $DataJSON "\"lut4\":\"[get_fitter_resource_usage -resource {*4 input functions}]\","
puts $DataJSON "\"lut3\":\"[get_fitter_resource_usage -resource {*3 input functions}]\","
puts $DataJSON "\"lut2\":\"[get_fitter_resource_usage -resource {*2 input functions}]\","

#puts $DataJSON "\"les_normal\":\"[get_fitter_resource_usage -resource {*normal mode}]\","
#puts $DataJSON "\"les_arit\":\"[get_fitter_resource_usage -resource {*arithmetic mode}]\","

puts $DataJSON "\"regs\":\"[get_fitter_resource_usage -resource {*Dedicated logic registers}]\","

puts $DataJSON "\"mult9\":\"[get_fitter_resource_usage -resource {*Embedded Multiplier 9-bit elements}]\","
puts $DataJSON "\"ave_ic\":\"[get_fitter_resource_usage -resource {*Average interconnect usage (total/H/V)}]\","
puts $DataJSON "\"peak_ic\":\"[get_fitter_resource_usage -resource {*Peak interconnect usage (total/H/V)}]\","

#puts $DataJSON "\"max_fanout_node\":\"[get_fitter_resource_usage -resource {*Maximum fan-out node}]\","
#puts $DataJSON "\"max_fanout\":\"[get_fitter_resource_usage -resource {*Maximum fan-out}]\","
puts $DataJSON "\"max_fanout_non-global_node\":\"[get_fitter_resource_usage -resource {*Highest non-global fan-out signal}]\","
puts $DataJSON "\"max_fanout_non-global\":\"[get_fitter_resource_usage -resource {*Highest non-global fan-out}]\","
puts $DataJSON "\"total_fanout\":\"[get_fitter_resource_usage -resource {*Total fan-out}]\","
puts $DataJSON "\"ave_fanout\":\"[get_fitter_resource_usage -resource {*Average fan-out}]\""
puts $DataJSON "\}"
close $DataJSON

################################################################################
# Detail report
set DataJSON [open "@VTS_BINARY_ROOT@/benchmark.report.json.tmp" a+]
puts $DataJSON ",\n\{\"name\":\"@MAIN_RTL_ENTITY@\""

# Detail report
set PanelsToReport [list \
{Multiplexer Restructuring Statistics (Restructuring Performed)} \
{Slack Histogram} \
{Timging Path}]

foreach panel $PanelsToReport {
  panel_to_csv $panel $DataJSON
}
puts $DataJSON "\}"

close $DataJSON
unload_report
project_close

