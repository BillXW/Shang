;**************************************************************************
;
;   ADPCM.HLP
;
;   Help file for ADPCM.ASM - Version 1.1 - 17 Dec 1993.
;  
;   Full-Duplex 32-kbit/s CCITT ADPCM Algorithm
;
;**************************************************************************

This help file is preliminary documentation for the DSP56100 implementation

Version 1.1 of the CCITT 32 kbit/s ADPCM speech coding algorithm.

GENERAL INFORMATION :
---------------------

The program ADPCM.ASM implements the algorithm defined in CCITT Recommendation

G.721: "32 kbit/s Adaptive Differential Pulse Code Modulation" dated August

1986. For complete understanding of the DSP56100 code it is essential to refer

to Recommendation G.721. It passes all of the Mu-law and A-law test sequences

as defined in Appendix II of the above document. In addition, programs

ADPCME.ASM and ADPCMD.ASM implement only the encoder and decoder respectively.



TERMINOLOGY USED IN THE DSP56100 CODE :
---------------------------------------

The following symbols correspond to the variable types defined in the G.721

specification:

    SM = signed magnitude value

    TC = two's complement value

    FL = floating point value


A number preceding one of these symbols shows the number of total bits in a

particular variable. The full binary representation of a variable, including

the location of the radix point, is given in the module description of each

module. To make coding easier on the chip, almost all variables were taken to

be left justified (i.e. available in the most significant bits).

For additional information to aid in understanding the code, a module

description and pseudo-code has been provided with each module. A section

on inputs & outputs of the module with the formats has also been provided.

The terminology used is shown below.


    . = location of implied radix point

    i = integer bit

    f = fraction bit

    s = sign bit

    m = mantissa bit

    e = exponent bit

    1 = bit is always 1

    0 = bit is always 0

    X = bit value is unknown but is not significant



    An exception is the PCM word where

        p = sign bit

        s = segment bit

        q = quantization level bit


Example:

 Y = | 0iii i.fff | ffff ff00 | (13SM)

    This shows the representation of the scale factor Y. It is

    defined as a 13-bit signed magnitude number with 4 integer bits

    and 9 fractional bits. The value stored in memory is always

    stored in the 16-bit format shown above with the implied radix

    point between bits 10 and 11.

Example:

   A1 = | 01mm mmm0 | 0000 0000 | (A2=A0=0)

   B1 = | 0000 0000 | 0000 eeee | (B2=B0=0)



    At the point where these comments appear in the code the register

    A1 always contains a 1 in bit 14, 5 other mantissa bits, and all

    other bits set to 0. Register B1 always contains 4 exponent bits

    in bits 0 through 3 with all other bits set to 0. Registers A2, A0,

    B2 & B0 are always zero here.


Please note that the mu-law or A-law initialization files should be run before

the actual test files in order to get the correct output (see Appendix II of

Recommendation G.721 for details). However, in the INIT routine of the code,

the end results of the mu-law or A-law initializations have been incorporated

so that the initializations are not really needed. A switch between A & Mu laws

has been incorporated into the INIT so that the correct initialization is

chosen for each law.

All 8 bit PCM format variables (SS_T, SP_R and SD_R) and 4 bit ADPCM format

variables are left justified.

PERFORMANCE DETAILS :
---------------------

The program uses only internal X memory so no external data memory is required.

Approximatly 1450 words of total program memory are required so there is no

need for external PM either. The code is designed to implement one full-Duplex

channel, both encode (transmit) and decode (receive), on one DSP56100.


I/O at a sampling rate of 8 kHz gives 125 microseconds to do both an

encode and a decode. This translates into 7,500 clock cycles on a DSP56100

running at 60 MHz. This allows for 3750 instruction cycles to do both the

encode and the decode algorithms. The encode algorithm takes 797 instruction

cycles (1 instruction cycle = 2 clock cycles) for the worst case delay while

the decode algorithm takes 879 cycles. The typical execution time for

simulation data is less than the worst case maximums given in the table below.

Even if worst case performance is taken, it means that given enough memory

TWO full Duplex ADPCM channels can be accomodated on a 56100 running at 60 MHz.


The following shows the order of execution of the routines and the worst

case processing time (in instruction cycles) for each module :


      Encoder                            Decoder

FMULT (x8)     320                 FMULT (x8)     320
ACCUM           19                 ACCUM           21
LIMA             6                 LIMA             6
MIX             17                 MIX             17
EXPAND          25                 RECONST         17
SUBTA            3                 ADDA             3
LOG             24                 ANTILOG         20
SUBTB            7                 ADDB             9
QUAN            39                 XOR/UPB (x8)    58
RECONST          5                 FLOATA          19
ADDA             3                 TRANS           32
ANTILOG         20                 ADDC            19
ADDB             9                 UPA2            21
XOR/UPB (x8)    58                 LIMC             5
FLOATA          19                 UPA1            13
TRANS           32                 LIMD             6
ADDC            19                 FLOATB          22
UPA2            21                 TONE             6
LIMC             5                 TRIGB           23
UPA1            13                 FUNCTF           2
LIMD             6                 FILTA            8
FLOATB          22                 FILTB            5
TONE             6                 SUBTC           15
TRIGB           23                 FILTC            6
FUNCTF           2                 TRIGA            6
FILTA            8                 FUNCTW           1
FILTB            5                 FILTD            8
SUBTC           15                 LIMB             7
FILTC            6                 FILTE           10
TRIGA            6                 COMPRESS        35
FUNCTW           1                 EXPAND          24
FILTD            8                 SUBTA            5
LIMB             7                 LOG             20
FILTE           10                 SUBTB            7
misc.            8                 QUAN            37
                                   COMP            44
                                   misc.           12
-------------------                -------------------
TOTAL          797  Icycles        TOTAL          879  Icycles 


Note: In the decoder the routines EXPAND, SUBTA, LOG, SUBTB, QUAN and COMP

      (after COMPRESS) are not necessary for a non-standard ADPCM

      implementation. They are included for synchronization of multiple

      PCM/ADPCM/PCM conversions on a single channel. If only one PCM/ADPCM/PCM

      conversion is used the deletion of these routines should not affect the

      output speech quality. The worst-case decoder execution time will be 742

      instruction cycles without these routines. Please note that these

      routines ARE neccesary to pass the CCITT test files.


IMPLEMENTATION NOTES :
----------------------

  This code is designed to be used as a stand-alone module. For users that

wish to run the standard CCITT ADPCM algorithm there should be no need to

modify the DSP56100 code that implements the standard (only the file I/O

section needs to be modified). The comments in the code are provided for

those who may wish to modify the algorithm itself for various reasons.

As noted above it is essential to refer to Recommendation G.721 to under-

stand the DSP56100 code. For those that may wish to modify the DSP56100

code the following may make the code somewhat easier to understand :

  The code for this algorithm is written to obtain optimal speed (due to real-

time constraints). It is optimal in time with inter-module interactions

also being considered (constants and variables required for a module are

read in previous modules in parallel where possible).

  In almost all cases an attempt is made to implement a given function in the

most efficient manner possible on the DSP56100. The primary goal is to make

the worst case execution time as short as possible. The secondary goal is to

conserve program/data memory. This goal of overall efficiency is the reason

that most variables are NOT right justified as implied in the G.721

specification. Since the DSP56100 uses fractional-based arithmetic (i.e. left

justified) keeping data as close to left justified as possible results in a

more efficient implementation. It does however make the code more difficult to

understand. Extra comments showing the contents of registers at various points

in the code have been added to help clarify especially complex operations.

The primary goal of execution speed is why code that is the same for both

the encoder and the decoder is not made into subroutines. It was found that

there was too much overhead involved in calling these subroutines. Not having

subroutines results in the code requiring more program memory, but allows the

code to run much faster.

  Also in an effort to improve efficiency, the parallel nature of the DSP56100

is taken advantage of whenever possible. In many cases data for the next

segment of code is fetched before the current segment has been completed.

Also, a constant table was made in the order in which constants were needed.

An address register was set aside just for getting constants (in parallel as

far as possible). This saved 2 cycles per constant in almost every case as an

immediate constant fetch was avoided. This applies to both coder and decoder

as the code in both was the same for most modules.

