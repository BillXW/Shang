


Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 1



1                                        ;
2                                        ;       annotate version 1.03
3                                        ;
4                                        ; **************************************************
5                                        ; **************************************************
6                                                  section opt_adpcm_v1_c
7                                                  opt     so,nomd
8                                                  page    132,66,3,3
9                                        ;*** DSP56000/1 Motorola 1.03 GNU 1.37.1
10        P:0000                                   org     p:
11                                                 global  FE_DQ
12        X:0000                                   org     x:
13                                       FE_DQ
14        X:0000                                   dc      0
15                                                 global  FE_T
16                                       FE_T
17        X:0001                                   dc      0
18                                                 global  FE_Y
19                                       FE_Y
20        X:0002                                   dc      0
21                                                 global  FE_YL
22                                       FE_YL
23        X:0003                                   dc      0
24                                                 global  FE_DQ2
25                                       FE_DQ2
26        X:0004                                   dc      0
27                                                 global  FE_DQ3
28                                       FE_DQ3
29        X:0005                                   dc      0
30                                                 global  FE_DQ4
31                                       FE_DQ4
32        X:0006                                   dc      0
33                                                 global  FE_DQ5
34                                       FE_DQ5
35        X:0007                                   dc      0
36                                                 global  FE_DQ6
37                                       FE_DQ6
38        X:0008                                   dc      0
39                                                 global  FE_DQ7
40                                       FE_DQ7
41        X:0009                                   dc      0
42                                                 global  FE_PK1
43                                       FE_PK1
44        X:000A                                   dc      0
45                                                 global  FE_PK2
46                                       FE_PK2
47        X:000B                                   dc      0
48                                                 global  FE_SR2
49                                       FE_SR2
50        X:000C                                   dc      0
51                                                 global  FE_A1
52                                       FE_A1
53        X:000D                                   dc      0
54                                                 global  FE_A2
55                                       FE_A2
56        X:000E                                   dc      0






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 2



57        P:0000                                   org     p:
58                                                 global  FE_B
59        X:000F                                   org     x:
60                                       FE_B
61        X:000F                                   dc      0
62        X:0010                                   dc      0
63        X:0011                                   dc      0
64        X:0012                                   dc      0
65        X:0013                                   dc      0
66        X:0014                                   dc      0
67                                                 global  FE_SE
68                                       FE_SE
69        X:0015                                   dc      0
70                                                 global  FE_SEZ
71                                       FE_SEZ
72        X:0016                                   dc      0
73                                                 global  FE_t_dr
74                                       FE_t_dr
75        X:0017                                   dc      0
76                                                 global  FE_LAST_TR
77                                       FE_LAST_TR
78        X:0018                                   dc      0
79                                                 global  FE_DMS
80                                       FE_DMS
81        X:0019                                   dc      0
82                                                 global  FE_DML
83                                       FE_DML
84        X:001A                                   dc      0
85                                                 global  FE_AP
86                                       FE_AP
87        X:001B                                   dc      0
88                                                 global  FE_Y_L
89                                       FE_Y_L
90        X:001C                                   dc      0
91                                                 global  FE_LAST_Y
92                                       FE_LAST_Y
93        X:001D                                   dc      0
94                                                 global  FD_DQ
95                                       FD_DQ
96        X:001E                                   dc      0
97                                                 global  FD_T
98                                       FD_T
99        X:001F                                   dc      0
100                                                global  FD_Y
101                                      FD_Y
102       X:0020                                   dc      0
103                                                global  FD_YL
104                                      FD_YL
105       X:0021                                   dc      0
106                                                global  FD_DQ2
107                                      FD_DQ2
108       X:0022                                   dc      0
109                                                global  FD_DQ3
110                                      FD_DQ3
111       X:0023                                   dc      0
112                                                global  FD_DQ4






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 3



113                                      FD_DQ4
114       X:0024                                   dc      0
115                                                global  FD_DQ5
116                                      FD_DQ5
117       X:0025                                   dc      0
118                                                global  FD_DQ6
119                                      FD_DQ6
120       X:0026                                   dc      0
121                                                global  FD_DQ7
122                                      FD_DQ7
123       X:0027                                   dc      0
124                                                global  FD_PK1
125                                      FD_PK1
126       X:0028                                   dc      0
127                                                global  FD_PK2
128                                      FD_PK2
129       X:0029                                   dc      0
130                                                global  FD_SR2
131                                      FD_SR2
132       X:002A                                   dc      0
133                                                global  FD_A1
134                                      FD_A1
135       X:002B                                   dc      0
136                                                global  FD_A2
137                                      FD_A2
138       X:002C                                   dc      0
139       P:0000                                   org     p:
140                                                global  FD_B
141       X:002D                                   org     x:
142                                      FD_B
143       X:002D                                   dc      0
144       X:002E                                   dc      0
145       X:002F                                   dc      0
146       X:0030                                   dc      0
147       X:0031                                   dc      0
148       X:0032                                   dc      0
149                                                global  FD_SE
150                                      FD_SE
151       X:0033                                   dc      0
152                                                global  FD_SEZ
153                                      FD_SEZ
154       X:0034                                   dc      0
155                                                global  FD_t_dr
156                                      FD_t_dr
157       X:0035                                   dc      0
158                                                global  FD_LAST_TR
159                                      FD_LAST_TR
160       X:0036                                   dc      0
161                                                global  FD_DMS
162                                      FD_DMS
163       X:0037                                   dc      0
164                                                global  FD_DML
165                                      FD_DML
166       X:0038                                   dc      0
167                                                global  FD_AP
168                                      FD_AP






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 4



169       X:0039                                   dc      0
170                                                global  FD_Y_L
171                                      FD_Y_L
172       X:003A                                   dc      0
173                                                global  FD_LAST_Y
174                                      FD_LAST_Y
175       X:003B                                   dc      0
176       P:0000                                   org     p:
177                                                global  Ffmult
178                                      Ffmult
179                                      ; **************************************************
180                                      ; /*
181                                      ;  * opt_adpcm.c
182                                      ;  * Handwritten version of an optimized ADPCM transcoder applying the
183                                      ;  * CCITT recommendation G.721
184                                      ;  * 6-10-93 Chris Schlaeger
185                                      ;  * VERSION 1.0
186                                      ;  */
187                                      ; 
188                                      ; #include <stdio.h>
189                                      ; 
190                                      ; #define FALSE 0
191                                      ; #define TRUE (!FALSE)
192                                      ; 
193                                      ; FILE* istrm;
194                                      ; FILE* ostrm;
195                                      ; int   ExitFlag;
196                                      ; 
197                                      ; /* Global signals */
198                                      ; int A_2, AL, D, I, SD, S_E, SL, SP, TDP;
199                                      ; 
200                                      ; /* ENCODER states */
201                                      ; int E_DQ = 0;
202                                      ; int E_T = 0;
203                                      ; int E_Y = 0;
204                                      ; int E_YL = 0;
205                                      ; int E_DQ2 = 0;
206                                      ; int E_DQ3 = 0;
207                                      ; int E_DQ4 = 0;
208                                      ; int E_DQ5 = 0;
209                                      ; int E_DQ6 = 0;
210                                      ; int E_DQ7 = 0;
211                                      ; int E_PK1 = 0;
212                                      ; int E_PK2 = 0;
213                                      ; int E_SR2 = 0;
214                                      ; int E_A1 = 0;
215                                      ; int E_A2 = 0;
216                                      ; int E_B[6] = { 0, 0, 0, 0, 0, 0 };
217                                      ; int E_SE = 0;
218                                      ; int E_SEZ = 0;
219                                      ; int E_t_dr = 0;
220                                      ; int E_LAST_TR = 0;
221                                      ; int E_DMS = 0;
222                                      ; int E_DML = 0;
223                                      ; int E_AP = 0;
224                                      ; int E_Y_L = 0;






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 5



225                                      ; int E_LAST_Y = 0;
226                                      ; 
227                                      ; /* DECODER states */
228                                      ; int D_DQ = 0;
229                                      ; int D_T = 0;
230                                      ; int D_Y = 0;
231                                      ; int D_YL = 0;
232                                      ; int D_DQ2 = 0;
233                                      ; int D_DQ3 = 0;
234                                      ; int D_DQ4 = 0;
235                                      ; int D_DQ5 = 0;
236                                      ; int D_DQ6 = 0;
237                                      ; int D_DQ7 = 0;
238                                      ; int D_PK1 = 0;
239                                      ; int D_PK2 = 0;
240                                      ; int D_SR2 = 0;
241                                      ; int D_A1 = 0;
242                                      ; int D_A2 = 0;
243                                      ; int D_B[6] = { 0, 0, 0, 0, 0, 0 };
244                                      ; int D_SE = 0;
245                                      ; int D_SEZ = 0;
246                                      ; int D_t_dr = 0;
247                                      ; int D_LAST_TR = 0;
248                                      ; int D_DMS = 0;
249                                      ; int D_DML = 0;
250                                      ; int D_AP = 0;
251                                      ; int D_Y_L = 0;
252                                      ; int D_LAST_Y = 0;
253                                      ; 
254                                      ; int fmult(int An, int SRn)
255                                      ; {
256                                      ;   int  AnS, AnMAG, AnEXP, AnMANT;
257                                      ;   int  SRnS, SRnEXP, SRnMANT;
258                                      ;   int  WAnS, WAnEXP, WAnMAG;
259                                      ;   long WAnMANT;
260                                      ; 
261                                      ;   AnS = An >> 15;
262                                      ; **************************************************
263       P:0000 70F400  [4 -        4]            move              #65533,n0
                 00FFFD
264       P:0002 3E0E00  [2 -        6]            move              #14,n6
265       P:0003 605E00  [2 -        8]            move              r0,x:(r6)+
266       P:0004 205E00  [2 -       10]            move              (r6)+
267       P:0005 22D000  [2 -       12]            move              r6,r0
268       P:0006 204E00  [2 -       14]            move              (r6)+n6
269       P:0007 515E00  [2 -       16]            move              b0,x:(r6)+
270       P:0008 555E00  [2 -       18]            move              b1,x:(r6)+
271       P:0009 445E00  [2 -       20]            move              x0,x:(r6)+
272       P:000A 455E00  [2 -       22]            move              x1,x:(r6)+
273       P:000B 465E00  [2 -       24]            move              y0,x:(r6)+
274       P:000C 475E00  [2 -       26]            move              y1,x:(r6)+
275       P:000D 57E800  [4 -       30]            move              x:(r0+n0),b
276       P:000E 21AF00  [2 -       32]            move              b1,b
277       P:000F 060FA0  [4 -       36]            rep     #15
278       P:0010 20002A  [2 -       38]            asr     b
279                                      ; **************************************************






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 6



280                                      ;   AnMAG = AnS == 0 ? An >> 2 : (16384 - (An >> 2)) & 8191;
281                                      ; **************************************************
282       P:0011 21AF00  [2 -       40]            move              b1,b
283       P:0012 55600B  [2 -       42]            tst     b         b1,x:(r0)
284       P:0013 0AF0A2  [6 -       48]            jne     L2
                 00001C
285       P:0015 57E800  [4 -       52]            move              x:(r0+n0),b
286       P:0016 21AF00  [2 -       54]            move              b1,b
287       P:0017 20002A  [2 -       56]            asr     b
288       P:0018 20002A  [2 -       58]            asr     b
289       P:0019 21AF00  [2 -       60]            move              b1,b
290       P:001A 0AF080  [6 -       66]            jmp     L15
                 00002D
291                                      L2
292       P:001C 70F400  [4 -       70]            move              #65533,n0
                 00FFFD
**** 293 [opt_adpcm-v1.asm 293]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
293       P:001E 57E800  [4 -       74]            move              x:(r0+n0),b
294       P:001F 380A00  [2 -       76]            move              #10,n0
295       P:0020 21AF00  [2 -       78]            move              b1,b
296       P:0021 20002A  [2 -       80]            asr     b
297       P:0022 20002A  [2 -       82]            asr     b
298       P:0023 21AF00  [2 -       84]            move              b1,b
299       P:0024 21A500  [2 -       86]            move              b1,x1
300       P:0025 556800  [4 -       90]            move              b1,x:(r0+n0)
301       P:0026 380600  [2 -       92]            move              #6,n0
302       P:0027 57F400  [4 -       96]            move              #>16384,b
                 004000
303       P:0029 45F46C  [4 -      100]            sub     x1,b      #>8191,x1
                 001FFF
304       P:002B 55686E  [4 -      104]            and     x1,b      b1,x:(r0+n0)
305       P:002C 21AF00  [2 -      106]            move              b1,b
306                                      L15
307                                      ; **************************************************
308                                      ;   for (AnEXP = 0; (AnMAG >> AnEXP) != 0; AnEXP++)
309                                      ; **************************************************
310       P:002D 380600  [2 -      108]            move              #6,n0
311       P:002E 250000  [2 -      110]            move              #0,x1
312       P:002F 556800  [4 -      114]            move              b1,x:(r0+n0)
313       P:0030 205800  [2 -      116]            move              (r0)+
314       P:0031 455000  [2 -      118]            move              x1,x:(r0)-
315       P:0032 57E800  [4 -      122]            move              x:(r0+n0),b
316       P:0033 20000B  [2 -      124]            tst     b
317       P:0034 0AF0AA  [6 -      130]            jeq     L14
                 000047
318       P:0036 46F400  [4 -      134]            move              #>1,y0
                 000001
319                                      L6
320       P:0038 380600  [2 -      136]            move              #6,n0
321       P:0039 205800  [2 -      138]            move              (r0)+
322       P:003A 57D000  [2 -      140]            move              x:(r0)-,b
323       P:003B 205858  [2 -      142]            add     y0,b      (r0)+
324       P:003C 555001  [2 -      144]            tfr     b,a       b1,x:(r0)-
325       P:003D 57E803  [4 -      148]            tst     a         x:(r0+n0),b
326       P:003E 0AF0AA  [6 -      154]            jeq     L16
                 000044






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 7



327       P:0040 21AF00  [2 -      156]            move              b1,b
328       P:0041 06CE20  [4 -      160]            rep     a
329       P:0042 20002A  [2 -      162]            asr     b
330       P:0043 21AF00  [2 -      164]            move              b1,b
331                                      L16
332       P:0044 20000B  [2 -      166]            tst     b
333       P:0045 0AF0A2  [6 -      172]            jne     L6
                 000038
334                                      L14
335                                      ; **************************************************
336                                      ;     ;
337                                      ;   AnMANT = AnMAG == 0 ? 1 << 5 : (AnMAG << 6) >> AnEXP;
338                                      ; **************************************************
339       P:0047 380600  [2 -      174]            move              #6,n0
**** 340 [opt_adpcm-v1.asm 340]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
340       P:0048 57E800  [4 -      178]            move              x:(r0+n0),b
341       P:0049 20000B  [2 -      180]            tst     b
342       P:004A 0AF0A2  [6 -      186]            jne     L8
                 000052
343       P:004C 380200  [2 -      188]            move              #2,n0
344       P:004D 45F400  [4 -      192]            move              #>32,x1
                 000020
345       P:004F 456800  [4 -      196]            move              x1,x:(r0+n0)
346       P:0050 0AF080  [6 -      202]            jmp     L9
                 000063
347                                      L8
348       P:0052 380600  [2 -      204]            move              #6,n0
**** 349 [opt_adpcm-v1.asm 349]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
349       P:0053 57E800  [4 -      208]            move              x:(r0+n0),b
350       P:0054 0606A0  [4 -      212]            rep     #6
351       P:0055 20003A  [2 -      214]            asl     b
352       P:0056 380200  [2 -      216]            move              #2,n0
353       P:0057 21AF00  [2 -      218]            move              b1,b
354       P:0058 556800  [4 -      222]            move              b1,x:(r0+n0)
355       P:0059 205800  [2 -      224]            move              (r0)+
356       P:005A 56D000  [2 -      226]            move              x:(r0)-,a
357       P:005B 200003  [2 -      228]            tst     a
358       P:005C 0AF0AA  [6 -      234]            jeq     L17
                 000062
359       P:005E 21AF00  [2 -      236]            move              b1,b
360       P:005F 06CE20  [4 -      240]            rep     a
361       P:0060 20002A  [2 -      242]            asr     b
362       P:0061 21AF00  [2 -      244]            move              b1,b
363                                      L17
364       P:0062 556800  [4 -      248]            move              b1,x:(r0+n0)
365                                      L9
366                                      ; **************************************************
367                                      ; 
368                                      ;   SRnS = SRn >> 10;
369                                      ; **************************************************
370       P:0063 70F400  [4 -      252]            move              #65532,n0
                 00FFFC
**** 371 [opt_adpcm-v1.asm 371]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
371       P:0065 57E800  [4 -      256]            move              x:(r0+n0),b
372       P:0066 21AF00  [2 -      258]            move              b1,b
373       P:0067 060AA0  [4 -      262]            rep     #10






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 8



374       P:0068 20002A  [2 -      264]            asr     b
375                                      ; **************************************************
376                                      ;   SRnEXP = (SRn >> 6) & 15;
377                                      ; **************************************************
378       P:0069 380600  [2 -      266]            move              #6,n0
379       P:006A 21AF00  [2 -      268]            move              b1,b
380       P:006B 556800  [4 -      272]            move              b1,x:(r0+n0)
381       P:006C 70F400  [4 -      276]            move              #65532,n0
                 00FFFC
**** 382 [opt_adpcm-v1.asm 382]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
382       P:006E 57E800  [4 -      280]            move              x:(r0+n0),b
383       P:006F 21AF00  [2 -      282]            move              b1,b
384       P:0070 0606A0  [4 -      286]            rep     #6
385       P:0071 20002A  [2 -      288]            asr     b
386                                      ; **************************************************
387                                      ;   SRnMANT = SRn & 63;
388                                      ; **************************************************
389                                      ; **************************************************
390                                      ; 
391                                      ;   WAnS = SRnS ^ AnS;
392                                      ; **************************************************
393                                      ; **************************************************
394                                      ;   WAnEXP = SRnEXP + AnEXP;
395                                      ; **************************************************
396                                      ; **************************************************
397                                      ;   WAnMANT = (((long) SRnMANT * AnMANT) + 48) >> 4;
398                                      ; **************************************************
399       P:0072 380900  [2 -      290]            move              #9,n0
400       P:0073 45F400  [4 -      294]            move              #>15,x1
                 00000F
401       P:0075 21AF00  [2 -      296]            move              b1,b
402       P:0076 45F46E  [4 -      300]            and     x1,b      #>63,x1
                 00003F
403       P:0078 21AF00  [2 -      302]            move              b1,b
404       P:0079 556800  [4 -      306]            move              b1,x:(r0+n0)
405       P:007A 70F400  [4 -      310]            move              #65532,n0
                 00FFFC
**** 406 [opt_adpcm-v1.asm 406]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
406       P:007C 57E800  [4 -      314]            move              x:(r0+n0),b
407       P:007D 38036E  [2 -      316]            and     x1,b      #3,n0
408       P:007E 21AF00  [2 -      318]            move              b1,b
409       P:007F 556800  [4 -      322]            move              b1,x:(r0+n0)
410       P:0080 380600  [2 -      324]            move              #6,n0
411       P:0081 45E000  [2 -      326]            move              x:(r0),x1
412       P:0082 57E800  [4 -      330]            move              x:(r0+n0),b
413       P:0083 38046B  [2 -      332]            eor     x1,b      #4,n0
414       P:0084 21AF00  [2 -      334]            move              b1,b
415       P:0085 556800  [4 -      338]            move              b1,x:(r0+n0)
416       P:0086 380900  [2 -      340]            move              #9,n0
**** 417 [opt_adpcm-v1.asm 417]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
417       P:0087 57E800  [4 -      344]            move              x:(r0+n0),b
418       P:0088 380500  [2 -      346]            move              #5,n0
419       P:0089 205800  [2 -      348]            move              (r0)+
420       P:008A 45D000  [2 -      350]            move              x:(r0)-,x1
421       P:008B 200068  [2 -      352]            add     x1,b
422       P:008C 556800  [4 -      356]            move              b1,x:(r0+n0)






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 9



423       P:008D 380300  [2 -      358]            move              #3,n0
**** 424 [opt_adpcm-v1.asm 424]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
424       P:008E 57E800  [4 -      362]            move              x:(r0+n0),b
425       P:008F 380200  [2 -      364]            move              #2,n0
426       P:0090 21A400  [2 -      366]            move              b1,x0
427       P:0091 216500  [2 -      368]            move              b2,x1
428       P:0092 57E800  [4 -      372]            move              x:(r0+n0),b
429       P:0093 21A600  [2 -      374]            move              b1,y0
430       P:0094 216769  [2 -      376]            tfr     x1,b      b2,y1
431       P:0095 208971  [2 -      378]            tfr     y1,a      x0,b0
432       P:0096 20C800  [2 -      380]            move              y0,a0
433       P:0097 0BF080  [6 -      386]            jsr     lmpy_ab
                 000000
434       P:0099 380A00  [2 -      388]            move              #10,n0
435       P:009A 44F400  [4 -      392]            move              #>48,x0
                 000030
436       P:009C 45F400  [4 -      396]            move              #>0,x1
                 000000
437       P:009E 205828  [2 -      398]            add     x,b       (r0)+
438       P:009F 204800  [2 -      400]            move              (r0)+n0
439       P:00A0 455000  [2 -      402]            move              x1,x:(r0)-
440       P:00A1 444000  [2 -      404]            move              x0,x:(r0)-n0
441       P:00A2 516600  [2 -      406]            move              b0,x:(r6)
442       P:00A3 21AF00  [2 -      408]            move              b1,b
443       P:00A4 51E600  [2 -      410]            move              x:(r6),b0
444       P:00A5 0604A0  [4 -      414]            rep     #4
445       P:00A6 20002A  [2 -      416]            asr     b
446                                      ; **************************************************
447                                      ;   WAnMAG = (int) (WAnEXP <= 26 ?
448                                      ;                   (WAnMANT << 7) >> (26 - WAnEXP) :
449                                      ;                 ((WAnMANT << 7) << (WAnEXP - 26)) & 32767);
450                                      ; **************************************************
451       P:00A7 380700  [2 -      418]            move              #7,n0
452       P:00A8 45F400  [4 -      422]            move              #>26,x1
                 00001A
453       P:00AA 205800  [2 -      424]            move              (r0)+
454       P:00AB 204800  [2 -      426]            move              (r0)+n0
455       P:00AC 555000  [2 -      428]            move              b1,x:(r0)-
456       P:00AD 514000  [2 -      430]            move              b0,x:(r0)-n0
457       P:00AE 380500  [2 -      432]            move              #5,n0
**** 458 [opt_adpcm-v1.asm 458]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
458       P:00AF 57E800  [4 -      436]            move              x:(r0+n0),b
459       P:00B0 20006D  [2 -      438]            cmp     x1,b
460       P:00B1 0AF0A7  [6 -      444]            jgt     L10
                 0000DB
461       P:00B3 380700  [2 -      446]            move              #7,n0
462       P:00B4 205800  [2 -      448]            move              (r0)+
463       P:00B5 204800  [2 -      450]            move              (r0)+n0
464       P:00B6 57D000  [2 -      452]            move              x:(r0)-,b
465       P:00B7 51C000  [2 -      454]            move              x:(r0)-n0,b0
466       P:00B8 0607A0  [4 -      458]            rep     #7
467       P:00B9 20003A  [2 -      460]            asl     b
468       P:00BA 380A00  [2 -      462]            move              #10,n0
469       P:00BB 205800  [2 -      464]            move              (r0)+
470       P:00BC 204800  [2 -      466]            move              (r0)+n0
471       P:00BD 555000  [2 -      468]            move              b1,x:(r0)-






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 10



472       P:00BE 514000  [2 -      470]            move              b0,x:(r0)-n0
473       P:00BF 380500  [2 -      472]            move              #5,n0
474       P:00C0 57F400  [4 -      476]            move              #>26,b
                 00001A
475       P:00C2 45E800  [4 -      480]            move              x:(r0+n0),x1
476       P:00C3 38076C  [2 -      482]            sub     x1,b      #7,n0
477       P:00C4 200001  [2 -      484]            tfr     b,a
478       P:00C5 556803  [4 -      488]            tst     a         b1,x:(r0+n0)
479       P:00C6 380A00  [2 -      490]            move              #10,n0
480       P:00C7 205800  [2 -      492]            move              (r0)+
481       P:00C8 204800  [2 -      494]            move              (r0)+n0
482       P:00C9 57D000  [2 -      496]            move              x:(r0)-,b
483       P:00CA 51C000  [2 -      498]            move              x:(r0)-n0,b0
484       P:00CB 516600  [2 -      500]            move              b0,x:(r6)
485       P:00CC 21AF00  [2 -      502]            move              b1,b
486       P:00CD 51E600  [2 -      504]            move              x:(r6),b0
487       P:00CE 0AF0AA  [6 -      510]            jeq     L18
                 0000D2
488       P:00D0 06CE20  [4 -      514]            rep     a
489       P:00D1 20002A  [2 -      516]            asr     b
490                                      L18
491       P:00D2 205800  [2 -      518]            move              (r0)+
492       P:00D3 204800  [2 -      520]            move              (r0)+n0
493       P:00D4 555000  [2 -      522]            move              b1,x:(r0)-
494       P:00D5 514000  [2 -      524]            move              b0,x:(r0)-n0
495       P:00D6 45E800  [4 -      528]            move              x:(r0+n0),x1
496       P:00D7 380600  [2 -      530]            move              #6,n0
**** 497 [opt_adpcm-v1.asm 497]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
497       P:00D8 456800  [4 -      534]            move              x1,x:(r0+n0)
498       P:00D9 0AF080  [6 -      540]            jmp     L11
                 000103
499                                      L10
500       P:00DB 380700  [2 -      542]            move              #7,n0
501       P:00DC 205800  [2 -      544]            move              (r0)+
502       P:00DD 204800  [2 -      546]            move              (r0)+n0
503       P:00DE 57D000  [2 -      548]            move              x:(r0)-,b
504       P:00DF 51C000  [2 -      550]            move              x:(r0)-n0,b0
505       P:00E0 0607A0  [4 -      554]            rep     #7
506       P:00E1 20003A  [2 -      556]            asl     b
507       P:00E2 380A00  [2 -      558]            move              #10,n0
508       P:00E3 45F400  [4 -      562]            move              #>16777190,x1
                 FFFFE6
509       P:00E5 205800  [2 -      564]            move              (r0)+
510       P:00E6 204800  [2 -      566]            move              (r0)+n0
511       P:00E7 555000  [2 -      568]            move              b1,x:(r0)-
512       P:00E8 514000  [2 -      570]            move              b0,x:(r0)-n0
513       P:00E9 380500  [2 -      572]            move              #5,n0
**** 514 [opt_adpcm-v1.asm 514]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
514       P:00EA 57E800  [4 -      576]            move              x:(r0+n0),b
515       P:00EB 380768  [2 -      578]            add     x1,b      #7,n0
516       P:00EC 200001  [2 -      580]            tfr     b,a
517       P:00ED 556803  [4 -      584]            tst     a         b1,x:(r0+n0)
518       P:00EE 380A00  [2 -      586]            move              #10,n0
519       P:00EF 205800  [2 -      588]            move              (r0)+
520       P:00F0 204800  [2 -      590]            move              (r0)+n0
521       P:00F1 57D000  [2 -      592]            move              x:(r0)-,b






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 11



522       P:00F2 51C000  [2 -      594]            move              x:(r0)-n0,b0
523       P:00F3 0AF0AA  [6 -      600]            jeq     L19
                 0000F7
524       P:00F5 06CE20  [4 -      604]            rep     a
525       P:00F6 20003A  [2 -      606]            asl     b
526                                      L19
527       P:00F7 205800  [2 -      608]            move              (r0)+
528       P:00F8 204800  [2 -      610]            move              (r0)+n0
529       P:00F9 555000  [2 -      612]            move              b1,x:(r0)-
530       P:00FA 514000  [2 -      614]            move              b0,x:(r0)-n0
531       P:00FB 45E800  [4 -      618]            move              x:(r0+n0),x1
532       P:00FC 380669  [2 -      620]            tfr     x1,b      #6,n0
**** 533 [opt_adpcm-v1.asm 533]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
533       P:00FD 456800  [4 -      624]            move              x1,x:(r0+n0)
534       P:00FE 45F400  [4 -      628]            move              #>32767,x1
                 007FFF
535       P:0100 20006E  [2 -      630]            and     x1,b
536       P:0101 21AF00  [2 -      632]            move              b1,b
537       P:0102 556800  [4 -      636]            move              b1,x:(r0+n0)
538                                      L11
539                                      ; **************************************************
540                                      ;   return (WAnS == 0 ? WAnMAG : (65536 - WAnMAG) & 65535);
541                                      ; **************************************************
542       P:0103 380400  [2 -      638]            move              #4,n0
**** 543 [opt_adpcm-v1.asm 543]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
543       P:0104 57E800  [4 -      642]            move              x:(r0+n0),b
544       P:0105 20000B  [2 -      644]            tst     b
545       P:0106 0AF0A2  [6 -      650]            jne     L12
                 00010E
546       P:0108 380600  [2 -      652]            move              #6,n0
**** 547 [opt_adpcm-v1.asm 547]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
547       P:0109 45E800  [4 -      656]            move              x:(r0+n0),x1
548       P:010A 380A00  [2 -      658]            move              #10,n0
**** 549 [opt_adpcm-v1.asm 549]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
549       P:010B 456800  [4 -      662]            move              x1,x:(r0+n0)
550       P:010C 0AF080  [6 -      668]            jmp     L13
                 000118
551                                      L12
552       P:010E 380600  [2 -      670]            move              #6,n0
553       P:010F 57F400  [4 -      674]            move              #>65536,b
                 010000
554       P:0111 45E800  [4 -      678]            move              x:(r0+n0),x1
555       P:0112 380A6C  [2 -      680]            sub     x1,b      #10,n0
556       P:0113 45F400  [4 -      684]            move              #>65535,x1
                 00FFFF
557       P:0115 55686E  [4 -      688]            and     x1,b      b1,x:(r0+n0)
558       P:0116 21AF00  [2 -      690]            move              b1,b
559       P:0117 556800  [4 -      694]            move              b1,x:(r0+n0)
560                                      L13
561                                      ; **************************************************
562                                      ; }
563                                      ; **************************************************
564       P:0118 380A00  [2 -      696]            move              #10,n0
565       P:0119 205600  [2 -      698]            move              (r6)-
566       P:011A 56E800  [4 -      702]            move              x:(r0+n0),a
567       P:011B 47D603  [2 -      704]            tst     a         x:(r6)-,y1






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 12



568       P:011C 46D600  [2 -      706]            move              x:(r6)-,y0
569       P:011D 45D600  [2 -      708]            move              x:(r6)-,x1
570       P:011E 44D600  [2 -      710]            move              x:(r6)-,x0
571       P:011F 57D600  [2 -      712]            move              x:(r6)-,b
572       P:0120 51E600  [2 -      714]            move              x:(r6),b0
573       P:0121 205000  [2 -      716]            move              (r0)-
574       P:0122 205000  [2 -      718]            move              (r0)-
575       P:0123 221600  [2 -      720]            move              r0,r6
576       P:0124 60E000  [2 -      722]            move              x:(r0),r0
577       P:0125 00000C  [4 -      726]            rts
578    
579                                                global  Fdiff_signal
580                                      Fdiff_signal
581                                      ; **************************************************
582                                      ; **************************************************
583                                      ; **************************************************
584                                      ; 
585                                      ; 
586                                      ; void diff_signal(void)
587                                      ; {
588                                      ;   /*
589                                      ;    * diff_signal
590                                      ;    *
591                                      ;    * Input signals:  SL, S_E
592                                      ;    * Output signals: D
593                                      ;    */
594                                      ;   
595                                      ;   /* SUBTA */
596                                      ;   {
597                                      ;     int SLS, SES, SLI, SEI;
598                                      ;     
599                                      ;     
600                                      ;     /* subta */
601                                      ;     SLS = SL >> 13;
602                                      ; **************************************************
603       P:0126 3E0200  [2 -      728]            move              #2,n6
604       P:0127 605E00  [2 -      730]            move              r0,x:(r6)+
605       P:0128 22D000  [2 -      732]            move              r6,r0
606       P:0129 204E00  [2 -      734]            move              (r6)+n6
607       P:012A 515E00  [2 -      736]            move              b0,x:(r6)+
608       P:012B 555E00  [2 -      738]            move              b1,x:(r6)+
609       P:012C 445E00  [2 -      740]            move              x0,x:(r6)+
610       P:012D 455E00  [2 -      742]            move              x1,x:(r6)+
611       P:012E 45F000  [4 -      746]            move              x:FSL,x1
                 000069
612       P:0130 205861  [2 -      748]            tfr     x1,a      (r0)+
613       P:0131 218E00  [2 -      750]            move              a1,a
614       P:0132 455000  [2 -      752]            move              x1,x:(r0)-
615       P:0133 060DA0  [4 -      756]            rep     #13
616       P:0134 200022  [2 -      758]            asr     a
617                                      ; **************************************************
618                                      ;     SLI = SLS == 0 ? SL : 49152 + SL;
619                                      ; **************************************************
620       P:0135 218E00  [2 -      760]            move              a1,a
621       P:0136 200003  [2 -      762]            tst     a
622       P:0137 0AF0A2  [6 -      768]            jne     L21






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 13



                 00013C
623       P:0139 456000  [2 -      770]            move              x1,x:(r0)
624       P:013A 0AF080  [6 -      776]            jmp     L22
                 000142
625                                      L21
626       P:013C 56F000  [4 -      780]            move              x:FSL,a
                 000069
627       P:013E 57F400  [4 -      784]            move              #>49152,b
                 00C000
628       P:0140 200010  [2 -      786]            add     b,a
629       P:0141 546000  [2 -      788]            move              a1,x:(r0)
630                                      L22
631                                      ; **************************************************
632                                      ;     SES = S_E >> 14;
633                                      ; **************************************************
634       P:0142 45F000  [4 -      792]            move              x:FS_E,x1
                 00006A
635       P:0144 205861  [2 -      794]            tfr     x1,a      (r0)+
636       P:0145 218E00  [2 -      796]            move              a1,a
637       P:0146 455000  [2 -      798]            move              x1,x:(r0)-
638       P:0147 060EA0  [4 -      802]            rep     #14
639       P:0148 200022  [2 -      804]            asr     a
640                                      ; **************************************************
641                                      ;     SEI = SES == 0 ? S_E : 32768 + S_E;
642                                      ; **************************************************
643       P:0149 218E00  [2 -      806]            move              a1,a
644       P:014A 200003  [2 -      808]            tst     a
645       P:014B 0AF0A2  [6 -      814]            jne     L23
                 000151
646       P:014D 205800  [2 -      816]            move              (r0)+
647       P:014E 44D000  [2 -      818]            move              x:(r0)-,x0
648       P:014F 0AF080  [6 -      824]            jmp     L24
                 000157
649                                      L23
650       P:0151 57F400  [4 -      828]            move              #>32768,b
                 008000
651       P:0153 56F000  [4 -      832]            move              x:FS_E,a
                 00006A
652       P:0155 200010  [2 -      834]            add     b,a
653       P:0156 218400  [2 -      836]            move              a1,x0
654                                      L24
655                                      ; **************************************************
656                                      ;     D = (SLI + 65536 - SEI) & 65535;
657                                      ; **************************************************
658                                      ; **************************************************
659                                      ;   }
660                                      ;   
661                                      ; }
662                                      ; **************************************************
663       P:0157 56F449  [4 -      840]            tfr     x0,b      #>16711680,a
                 FF0000
664       P:0159 44F418  [4 -      844]            add     a,b       #>65535,x0
                 00FFFF
665       P:015B 205601  [2 -      846]            tfr     b,a       (r6)-
666       P:015C 57E000  [2 -      848]            move              x:(r0),b
667       P:015D 20501C  [2 -      850]            sub     a,b       (r0)-






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 14



668       P:015E 200001  [2 -      852]            tfr     b,a
669       P:015F 200046  [2 -      854]            and     x0,a
670       P:0160 218E00  [2 -      856]            move              a1,a
671       P:0161 547000  [4 -      860]            move              a1,x:FD
                 00006D
672       P:0163 45D600  [2 -      862]            move              x:(r6)-,x1
673       P:0164 44D600  [2 -      864]            move              x:(r6)-,x0
674       P:0165 57D600  [2 -      866]            move              x:(r6)-,b
675       P:0166 51E600  [2 -      868]            move              x:(r6),b0
676       P:0167 221600  [2 -      870]            move              r0,r6
677       P:0168 60E000  [2 -      872]            move              x:(r0),r0
678       P:0169 00000C  [4 -      876]            rts
679    
680                                                global  Fadpt_predict
681                                      Fadpt_predict
682       P:016A 605E00  [2 -      878]            move              r0,x:(r6)+
683       P:016B 055E3C  [2 -      880]            move              ssh,x:(r6)+
684                                      ; **************************************************
685                                      ; **************************************************
686                                      ; **************************************************
687                                      ; 
688                                      ; void adpt_predict(int* DQ, int* T,
689                                      ;                   int* DQ2, int* DQ3, int* DQ4, int* DQ5, int* DQ6, int* DQ7,
690                                      ;                   int* PK1, int* PK2, int* SR2, int* A1, int* A2, int B[],
691                                      ;                   int* SE, int* SEZ)
692                                      ; {
693                                      ;   /*
694                                      ;    * adaptive predictor
695                                      ;    *
696                                      ;    * Input signals:  DQ, T
697                                      ;    * Output signals: S_E, A_2
698                                      ;    */
699                                      ;   
700                                      ;   
701                                      ;   int n;
702                                      ;   int DQS, DQI, SEZS, SEZI, DQSEZ, PK0, SIGPK; /* for ADDC */
703                                      ;   int SES, SEI, SR;   /* for ADDB */
704                                      ;   int SRS, SR1;       /* for FLOATB */
705                                      ;   int PKS1, PKS2, UGA2A, A1S, FA1, FA, UGA2B, UGA2S,
706                                      ;   UGA2, A2S, ULA2, UA2, A2T;  /* for UPA2 */
707                                      ;   int A2P;    /* for LIMC */
708                                      ;   int A1R, A2R, BR[6];        /* for TRIGB */
709                                      ;   int WA1, WA2;
710                                      ;   int PKS, UGA1, ULA1, UA1, A1T;      /* for UA1 */
711                                      ;   int A1UL, A1LL, A1P;        /* for LIMD */
712                                      ;   int MAG, EXP, MANT, DQ1; /* for FLOATA */
713                                      ;   int U[6];   /* for XOR */
714                                      ;   int DQMAG, UGB, BS, ULB, UB, BP[6]; /* for UPB */
715                                      ;   int WB1, WB2, WB3, WB4, WB5, WB6;
716                                      ;   
717                                      ;   /* ADDC */
718                                      ;   DQS = *DQ >> 14;
719                                      ; **************************************************
720       P:016C 70F400  [4 -      884]            move              #65533,n0
                 00FFFD
721       P:016E 3E2900  [2 -      886]            move              #41,n6






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 15



722       P:016F 22D000  [2 -      888]            move              r6,r0
723       P:0170 204E00  [2 -      890]            move              (r6)+n6
724       P:0171 515E00  [2 -      892]            move              b0,x:(r6)+
725       P:0172 555E00  [2 -      894]            move              b1,x:(r6)+
726       P:0173 445E00  [2 -      896]            move              x0,x:(r6)+
727       P:0174 455E00  [2 -      898]            move              x1,x:(r6)+
728       P:0175 465E00  [2 -      900]            move              y0,x:(r6)+
729       P:0176 475E00  [2 -      902]            move              y1,x:(r6)+
730       P:0177 615E00  [2 -      904]            move              r1,x:(r6)+
731       P:0178 625E00  [2 -      906]            move              r2,x:(r6)+
732       P:0179 635E00  [2 -      908]            move              r3,x:(r6)+
733       P:017A 645E00  [2 -      910]            move              r4,x:(r6)+
734       P:017B 655E00  [2 -      912]            move              r5,x:(r6)+
735       P:017C 675E00  [2 -      914]            move              r7,x:(r6)+
736       P:017D 61E800  [4 -      918]            move              x:(r0+n0),r1
737       P:017E 70F400  [4 -      922]            move              #65522,n0
                 00FFF2
738       P:0180 47E100  [2 -      924]            move              x:(r1),y1
739       P:0181 64E879  [4 -      928]            tfr     y1,b      x:(r0+n0),r4
740       P:0182 70F400  [4 -      932]            move              #65521,n0
                 00FFF1
741       P:0184 21AF00  [2 -      934]            move              b1,b
742       P:0185 65E800  [4 -      938]            move              x:(r0+n0),r5
743       P:0186 70F400  [4 -      942]            move              #65520,n0
                 00FFF0
**** 744 [opt_adpcm-v1.asm 744]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
744       P:0188 63E800  [4 -      946]            move              x:(r0+n0),r3
745       P:0189 382800  [2 -      948]            move              #40,n0
**** 746 [opt_adpcm-v1.asm 746]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
746       P:018A 476800  [4 -      952]            move              y1,x:(r0+n0)
747       P:018B 060EA0  [4 -      956]            rep     #14
748       P:018C 20002A  [2 -      958]            asr     b
749                                      ; **************************************************
750                                      ;   DQI = DQS == 0 ? *DQ : (65536 - (*DQ & 16383)) & 65535;
751                                      ; **************************************************
752       P:018D 381200  [2 -      960]            move              #18,n0
753       P:018E 21AF00  [2 -      962]            move              b1,b
754       P:018F 55680B  [4 -      966]            tst     b         b1,x:(r0+n0)
755       P:0190 0AF0A2  [6 -      972]            jne     L26
                 000196
756       P:0192 381300  [2 -      974]            move              #19,n0
**** 757 [opt_adpcm-v1.asm 757]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
757       P:0193 476800  [4 -      978]            move              y1,x:(r0+n0)
758       P:0194 0AF080  [6 -      984]            jmp     L27
                 0001A6
759                                      L26
760       P:0196 382800  [2 -      986]            move              #40,n0
761       P:0197 47E100  [2 -      988]            move              x:(r1),y1
762       P:0198 44F479  [4 -      992]            tfr     y1,b      #>16383,x0
                 003FFF
763       P:019A 44F44E  [4 -      996]            and     x0,b      #>65535,x0
                 00FFFF
764       P:019C 21AF00  [2 -      998]            move              b1,b
765       P:019D 21A700  [2 -     1000]            move              b1,y1
766       P:019E 556800  [4 -     1004]            move              b1,x:(r0+n0)
767       P:019F 381300  [2 -     1006]            move              #19,n0






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 16



768       P:01A0 57F400  [4 -     1010]            move              #>65536,b
                 010000
769       P:01A2 20007C  [2 -     1012]            sub     y1,b
770       P:01A3 55684E  [4 -     1016]            and     x0,b      b1,x:(r0+n0)
771       P:01A4 21AF00  [2 -     1018]            move              b1,b
772       P:01A5 556800  [4 -     1022]            move              b1,x:(r0+n0)
773                                      L27
774                                      ; **************************************************
775                                      ;   SEZS = *SEZ >> 14;
776                                      ; **************************************************
777       P:01A6 70F400  [4 -     1026]            move              #65518,n0
                 00FFEE
**** 778 [opt_adpcm-v1.asm 778]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
778       P:01A8 67E800  [4 -     1030]            move              x:(r0+n0),r7
779       P:01A9 382600  [2 -     1032]            move              #38,n0
780       P:01AA 47E700  [2 -     1034]            move              x:(r7),y1
781       P:01AB 476879  [4 -     1038]            tfr     y1,b      y1,x:(r0+n0)
782       P:01AC 21AF00  [2 -     1040]            move              b1,b
783       P:01AD 060EA0  [4 -     1044]            rep     #14
784       P:01AE 20002A  [2 -     1046]            asr     b
785                                      ; **************************************************
786                                      ;   SEZI = SEZS == 0 ? *SEZ : (1 << 15) + *SEZ;
787                                      ; **************************************************
788       P:01AF 21AF00  [2 -     1048]            move              b1,b
789       P:01B0 20000B  [2 -     1050]            tst     b
790       P:01B1 0AF0A2  [6 -     1056]            jne     L28
                 0001B6
791       P:01B3 476800  [4 -     1060]            move              y1,x:(r0+n0)
792       P:01B4 0AF080  [6 -     1066]            jmp     L29
                 0001C1
793                                      L28
794       P:01B6 70F400  [4 -     1070]            move              #65518,n0
                 00FFEE
**** 795 [opt_adpcm-v1.asm 795]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
795       P:01B8 67E800  [4 -     1074]            move              x:(r0+n0),r7
796       P:01B9 382800  [2 -     1076]            move              #40,n0
797       P:01BA 47E700  [2 -     1078]            move              x:(r7),y1
798       P:01BB 476879  [4 -     1082]            tfr     y1,b      y1,x:(r0+n0)
799       P:01BC 382600  [2 -     1084]            move              #38,n0
800       P:01BD 47F400  [4 -     1088]            move              #>32768,y1
                 008000
801       P:01BF 200078  [2 -     1090]            add     y1,b
802       P:01C0 556800  [4 -     1094]            move              b1,x:(r0+n0)
803                                      L29
804                                      ; **************************************************
805                                      ;   DQSEZ = (DQI + SEZI) & 65535;
806                                      ; **************************************************
807                                      ; **************************************************
808                                      ;   PK0 = DQSEZ >> 15;
809                                      ; **************************************************
810       P:01C1 381300  [2 -     1096]            move              #19,n0
811       P:01C2 44F400  [4 -     1100]            move              #>65535,x0
                 00FFFF
812       P:01C4 57E800  [4 -     1104]            move              x:(r0+n0),b
813       P:01C5 382600  [2 -     1106]            move              #38,n0
**** 814 [opt_adpcm-v1.asm 814]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 17



814       P:01C6 47E800  [4 -     1110]            move              x:(r0+n0),y1
815       P:01C7 382878  [2 -     1112]            add     y1,b      #40,n0
816       P:01C8 20004E  [2 -     1114]            and     x0,b
817       P:01C9 21AF00  [2 -     1116]            move              b1,b
818       P:01CA 556800  [4 -     1120]            move              b1,x:(r0+n0)
819       P:01CB 21AF00  [2 -     1122]            move              b1,b
820       P:01CC 060FA0  [4 -     1126]            rep     #15
821       P:01CD 20002A  [2 -     1128]            asr     b
822                                      ; **************************************************
823                                      ;   SIGPK = DQSEZ == 0 ? 1 : 0;
824                                      ; **************************************************
825       P:01CE 381400  [2 -     1130]            move              #20,n0
826       P:01CF 21AF00  [2 -     1132]            move              b1,b
827       P:01D0 556800  [4 -     1136]            move              b1,x:(r0+n0)
828       P:01D1 382800  [2 -     1138]            move              #40,n0
**** 829 [opt_adpcm-v1.asm 829]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
829       P:01D2 57E800  [4 -     1142]            move              x:(r0+n0),b
830       P:01D3 20000B  [2 -     1144]            tst     b
831       P:01D4 0AF0A2  [6 -     1150]            jne     L30
                 0001DA
832       P:01D6 47F400  [4 -     1154]            move              #>1,y1
                 000001
833       P:01D8 0AF080  [6 -     1160]            jmp     L112
                 0001DB
834                                      L30
835       P:01DA 270000  [2 -     1162]            move              #0,y1
836                                      L112
837                                      ; **************************************************
838                                      ;   
839                                      ;   /* ADDB */
840                                      ;   DQS = *DQ >> 14;
841                                      ; **************************************************
842       P:01DB 381500  [2 -     1164]            move              #21,n0
**** 843 [opt_adpcm-v1.asm 843]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
843       P:01DC 476800  [4 -     1168]            move              y1,x:(r0+n0)
844       P:01DD 382800  [2 -     1170]            move              #40,n0
845       P:01DE 47E100  [2 -     1172]            move              x:(r1),y1
846       P:01DF 476879  [4 -     1176]            tfr     y1,b      y1,x:(r0+n0)
847       P:01E0 21AF00  [2 -     1178]            move              b1,b
848       P:01E1 060EA0  [4 -     1182]            rep     #14
849       P:01E2 20002A  [2 -     1184]            asr     b
850                                      ; **************************************************
851                                      ;   DQI = DQS == 0 ? *DQ : (65536 - (*DQ & 16383)) & 65535;
852                                      ; **************************************************
853       P:01E3 381200  [2 -     1186]            move              #18,n0
854       P:01E4 21AF00  [2 -     1188]            move              b1,b
855       P:01E5 55680B  [4 -     1192]            tst     b         b1,x:(r0+n0)
856       P:01E6 0AF0A2  [6 -     1198]            jne     L32
                 0001EC
857       P:01E8 381300  [2 -     1200]            move              #19,n0
**** 858 [opt_adpcm-v1.asm 858]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
858       P:01E9 476800  [4 -     1204]            move              y1,x:(r0+n0)
859       P:01EA 0AF080  [6 -     1210]            jmp     L33
                 0001FC
860                                      L32
861       P:01EC 382800  [2 -     1212]            move              #40,n0






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 18



862       P:01ED 47E100  [2 -     1214]            move              x:(r1),y1
863       P:01EE 44F479  [4 -     1218]            tfr     y1,b      #>16383,x0
                 003FFF
864       P:01F0 44F44E  [4 -     1222]            and     x0,b      #>65535,x0
                 00FFFF
865       P:01F2 21AF00  [2 -     1224]            move              b1,b
866       P:01F3 21A700  [2 -     1226]            move              b1,y1
867       P:01F4 556800  [4 -     1230]            move              b1,x:(r0+n0)
868       P:01F5 381300  [2 -     1232]            move              #19,n0
869       P:01F6 57F400  [4 -     1236]            move              #>65536,b
                 010000
870       P:01F8 20007C  [2 -     1238]            sub     y1,b
871       P:01F9 55684E  [4 -     1242]            and     x0,b      b1,x:(r0+n0)
872       P:01FA 21AF00  [2 -     1244]            move              b1,b
873       P:01FB 556800  [4 -     1248]            move              b1,x:(r0+n0)
874                                      L33
875                                      ; **************************************************
876                                      ;   SES = *SE >> 14;
877                                      ; **************************************************
878       P:01FC 70F400  [4 -     1252]            move              #65519,n0
                 00FFEF
**** 879 [opt_adpcm-v1.asm 879]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
879       P:01FE 67E800  [4 -     1256]            move              x:(r0+n0),r7
880       P:01FF 382600  [2 -     1258]            move              #38,n0
881       P:0200 47E700  [2 -     1260]            move              x:(r7),y1
882       P:0201 476879  [4 -     1264]            tfr     y1,b      y1,x:(r0+n0)
883       P:0202 21AF00  [2 -     1266]            move              b1,b
884       P:0203 060EA0  [4 -     1270]            rep     #14
885       P:0204 20002A  [2 -     1272]            asr     b
886                                      ; **************************************************
887                                      ;   SEI = SES == 0 ? *SE : (1 << 15) + *SE;
888                                      ; **************************************************
889       P:0205 21AF00  [2 -     1274]            move              b1,b
890       P:0206 20000B  [2 -     1276]            tst     b
891       P:0207 0AF0A2  [6 -     1282]            jne     L34
                 00020D
892       P:0209 381600  [2 -     1284]            move              #22,n0
**** 893 [opt_adpcm-v1.asm 893]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
893       P:020A 476800  [4 -     1288]            move              y1,x:(r0+n0)
894       P:020B 0AF080  [6 -     1294]            jmp     L35
                 000218
895                                      L34
896       P:020D 70F400  [4 -     1298]            move              #65519,n0
                 00FFEF
**** 897 [opt_adpcm-v1.asm 897]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
897       P:020F 67E800  [4 -     1302]            move              x:(r0+n0),r7
898       P:0210 382800  [2 -     1304]            move              #40,n0
899       P:0211 47E700  [2 -     1306]            move              x:(r7),y1
900       P:0212 476879  [4 -     1310]            tfr     y1,b      y1,x:(r0+n0)
901       P:0213 381600  [2 -     1312]            move              #22,n0
902       P:0214 47F400  [4 -     1316]            move              #>32768,y1
                 008000
903       P:0216 200078  [2 -     1318]            add     y1,b
904       P:0217 556800  [4 -     1322]            move              b1,x:(r0+n0)
905                                      L35
906                                      ; **************************************************






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 19



907                                      ;   SR = (DQI + SEI) & 65535;
908                                      ; **************************************************
909                                      ; **************************************************
910                                      ;   
911                                      ;   /* FLOATB */
912                                      ;   SRS = SR >> 15;
913                                      ; **************************************************
914       P:0218 381300  [2 -     1324]            move              #19,n0
915       P:0219 44F400  [4 -     1328]            move              #>65535,x0
                 00FFFF
916       P:021B 57E800  [4 -     1332]            move              x:(r0+n0),b
917       P:021C 381600  [2 -     1334]            move              #22,n0
**** 918 [opt_adpcm-v1.asm 918]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
918       P:021D 47E800  [4 -     1338]            move              x:(r0+n0),y1
919       P:021E 382678  [2 -     1340]            add     y1,b      #38,n0
920       P:021F 20004E  [2 -     1342]            and     x0,b
921       P:0220 21AF00  [2 -     1344]            move              b1,b
922       P:0221 556800  [4 -     1348]            move              b1,x:(r0+n0)
923       P:0222 21AF00  [2 -     1350]            move              b1,b
924       P:0223 060FA0  [4 -     1354]            rep     #15
925       P:0224 20002A  [2 -     1356]            asr     b
926                                      ; **************************************************
927                                      ;   MAG = SRS == 0 ? SR : (65536 - SR) & 32767;
928                                      ; **************************************************
929       P:0225 381700  [2 -     1358]            move              #23,n0
930       P:0226 21AF00  [2 -     1360]            move              b1,b
931       P:0227 55680B  [4 -     1364]            tst     b         b1,x:(r0+n0)
932       P:0228 0AF0A2  [6 -     1370]            jne     L36
                 000230
933       P:022A 382600  [2 -     1372]            move              #38,n0
**** 934 [opt_adpcm-v1.asm 934]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
934       P:022B 47E800  [4 -     1376]            move              x:(r0+n0),y1
935       P:022C 382200  [2 -     1378]            move              #34,n0
**** 936 [opt_adpcm-v1.asm 936]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
936       P:022D 476800  [4 -     1382]            move              y1,x:(r0+n0)
937       P:022E 0AF080  [6 -     1388]            jmp     L37
                 00023B
938                                      L36
939       P:0230 382600  [2 -     1390]            move              #38,n0
940       P:0231 44F400  [4 -     1394]            move              #>32767,x0
                 007FFF
941       P:0233 47E800  [4 -     1398]            move              x:(r0+n0),y1
942       P:0234 382200  [2 -     1400]            move              #34,n0
943       P:0235 57F400  [4 -     1404]            move              #>65536,b
                 010000
944       P:0237 20007C  [2 -     1406]            sub     y1,b
945       P:0238 55684E  [4 -     1410]            and     x0,b      b1,x:(r0+n0)
946       P:0239 21AF00  [2 -     1412]            move              b1,b
947       P:023A 556800  [4 -     1416]            move              b1,x:(r0+n0)
948                                      L37
949                                      ; **************************************************
950                                      ;   for (EXP = 0; (MAG >> EXP) != 0; EXP++)
951                                      ; **************************************************
952       P:023B 382600  [2 -     1418]            move              #38,n0
953       P:023C 270000  [2 -     1420]            move              #0,y1
954       P:023D 476800  [4 -     1424]            move              y1,x:(r0+n0)






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 20



955       P:023E 382200  [2 -     1426]            move              #34,n0
**** 956 [opt_adpcm-v1.asm 956]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
956       P:023F 57E800  [4 -     1430]            move              x:(r0+n0),b
957       P:0240 20000B  [2 -     1432]            tst     b
958       P:0241 0AF0AA  [6 -     1438]            jeq     L111
                 000254
959       P:0243 44F400  [4 -     1442]            move              #>1,x0
                 000001
960                                      L40
961       P:0245 382600  [2 -     1444]            move              #38,n0
**** 962 [opt_adpcm-v1.asm 962]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
962       P:0246 57E800  [4 -     1448]            move              x:(r0+n0),b
963       P:0247 200048  [2 -     1450]            add     x0,b
964       P:0248 556801  [4 -     1454]            tfr     b,a       b1,x:(r0+n0)
965       P:0249 382203  [2 -     1456]            tst     a         #34,n0
**** 966 [opt_adpcm-v1.asm 966]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
966       P:024A 57E800  [4 -     1460]            move              x:(r0+n0),b
967       P:024B 0AF0AA  [6 -     1466]            jeq     L118
                 000251
968       P:024D 21AF00  [2 -     1468]            move              b1,b
969       P:024E 06CE20  [4 -     1472]            rep     a
970       P:024F 20002A  [2 -     1474]            asr     b
971       P:0250 21AF00  [2 -     1476]            move              b1,b
972                                      L118
973       P:0251 20000B  [2 -     1478]            tst     b
974       P:0252 0AF0A2  [6 -     1484]            jne     L40
                 000245
975                                      L111
976                                      ; **************************************************
977                                      ;     ;
978                                      ;   MANT = MAG == 0 ? 1 << 5 : (MAG << 6) >> EXP;
979                                      ; **************************************************
980       P:0254 382200  [2 -     1486]            move              #34,n0
**** 981 [opt_adpcm-v1.asm 981]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
981       P:0255 57E800  [4 -     1490]            move              x:(r0+n0),b
982       P:0256 20000B  [2 -     1492]            tst     b
983       P:0257 0AF0A2  [6 -     1498]            jne     L42
                 00025F
984       P:0259 382300  [2 -     1500]            move              #35,n0
985       P:025A 47F400  [4 -     1504]            move              #>32,y1
                 000020
986       P:025C 476800  [4 -     1508]            move              y1,x:(r0+n0)
987       P:025D 0AF080  [6 -     1514]            jmp     L43
                 000271
988                                      L42
989       P:025F 382200  [2 -     1516]            move              #34,n0
**** 990 [opt_adpcm-v1.asm 990]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
990       P:0260 57E800  [4 -     1520]            move              x:(r0+n0),b
991       P:0261 0606A0  [4 -     1524]            rep     #6
992       P:0262 20003A  [2 -     1526]            asl     b
993       P:0263 382300  [2 -     1528]            move              #35,n0
994       P:0264 21AF00  [2 -     1530]            move              b1,b
995       P:0265 556800  [4 -     1534]            move              b1,x:(r0+n0)
996       P:0266 382600  [2 -     1536]            move              #38,n0
**** 997 [opt_adpcm-v1.asm 997]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
997       P:0267 56E800  [4 -     1540]            move              x:(r0+n0),a






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 21



998       P:0268 200003  [2 -     1542]            tst     a
999       P:0269 0AF0AA  [6 -     1548]            jeq     L119
                 00026F
1000      P:026B 21AF00  [2 -     1550]            move              b1,b
1001      P:026C 06CE20  [4 -     1554]            rep     a
1002      P:026D 20002A  [2 -     1556]            asr     b
1003      P:026E 21AF00  [2 -     1558]            move              b1,b
1004                                     L119
1005      P:026F 382300  [2 -     1560]            move              #35,n0
**** 1006 [opt_adpcm-v1.asm 1006]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1006      P:0270 556800  [4 -     1564]            move              b1,x:(r0+n0)
1007                                     L43
1008                                     ; **************************************************
1009                                     ;   SR1 = (SRS << 10) + (EXP << 6) + MANT;
1010                                     ; **************************************************
1011      P:0271 381700  [2 -     1566]            move              #23,n0
**** 1012 [opt_adpcm-v1.asm 1012]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1012      P:0272 57E800  [4 -     1570]            move              x:(r0+n0),b
1013      P:0273 060AA0  [4 -     1574]            rep     #10
1014      P:0274 20003A  [2 -     1576]            asl     b
1015      P:0275 382800  [2 -     1578]            move              #40,n0
1016      P:0276 21AF00  [2 -     1580]            move              b1,b
1017      P:0277 556800  [4 -     1584]            move              b1,x:(r0+n0)
1018      P:0278 382600  [2 -     1586]            move              #38,n0
**** 1019 [opt_adpcm-v1.asm 1019]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1019      P:0279 57E800  [4 -     1590]            move              x:(r0+n0),b
1020      P:027A 0606A0  [4 -     1594]            rep     #6
1021      P:027B 20003A  [2 -     1596]            asl     b
1022                                     ; **************************************************
1023                                     ;   
1024                                     ;   /* UPA2 */
1025                                     ;   PKS1 = PK0 ^ *PK1;
1026                                     ; **************************************************
1027                                     ; **************************************************
1028                                     ;   PKS2 = PK0 ^ *PK2;
1029                                     ; **************************************************
1030                                     ; **************************************************
1031                                     ;   UGA2A = PKS2 == 0 ? 16384 : 114688;
1032                                     ; **************************************************
1033      P:027C 21AF00  [2 -     1598]            move              b1,b
1034      P:027D 21A700  [2 -     1600]            move              b1,y1
1035      P:027E 556800  [4 -     1604]            move              b1,x:(r0+n0)
1036      P:027F 382800  [2 -     1606]            move              #40,n0
**** 1037 [opt_adpcm-v1.asm 1037]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1037      P:0280 57E800  [4 -     1610]            move              x:(r0+n0),b
1038      P:0281 382378  [2 -     1612]            add     y1,b      #35,n0
**** 1039 [opt_adpcm-v1.asm 1039]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1039      P:0282 47E800  [4 -     1616]            move              x:(r0+n0),y1
1040      P:0283 381878  [2 -     1618]            add     y1,b      #24,n0
**** 1041 [opt_adpcm-v1.asm 1041]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1041      P:0284 556800  [4 -     1622]            move              b1,x:(r0+n0)
1042      P:0285 70F400  [4 -     1626]            move              #65525,n0
                 00FFF5
**** 1043 [opt_adpcm-v1.asm 1043]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1043      P:0287 67E800  [4 -     1630]            move              x:(r0+n0),r7
1044      P:0288 381400  [2 -     1632]            move              #20,n0






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 22



1045      P:0289 44E700  [2 -     1634]            move              x:(r7),x0
1046      P:028A 57E800  [4 -     1638]            move              x:(r0+n0),b
1047      P:028B 38194B  [2 -     1640]            eor     x0,b      #25,n0
1048      P:028C 21AF00  [2 -     1642]            move              b1,b
1049      P:028D 556800  [4 -     1646]            move              b1,x:(r0+n0)
1050      P:028E 70F400  [4 -     1650]            move              #65524,n0
                 00FFF4
**** 1051 [opt_adpcm-v1.asm 1051]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1051      P:0290 67E800  [4 -     1654]            move              x:(r0+n0),r7
1052      P:0291 381400  [2 -     1656]            move              #20,n0
1053      P:0292 44E700  [2 -     1658]            move              x:(r7),x0
1054      P:0293 57E800  [4 -     1662]            move              x:(r0+n0),b
1055      P:0294 20004B  [2 -     1664]            eor     x0,b
1056      P:0295 21AF00  [2 -     1666]            move              b1,b
1057      P:0296 20000B  [2 -     1668]            tst     b
1058      P:0297 0AF0A2  [6 -     1674]            jne     L44
                 00029D
1059      P:0299 45F400  [4 -     1678]            move              #>16384,x1
                 004000
1060      P:029B 0AF080  [6 -     1684]            jmp     L45
                 00029F
1061                                     L44
1062      P:029D 45F400  [4 -     1688]            move              #>114688,x1
                 01C000
1063                                     L45
1064                                     ; **************************************************
1065                                     ;   A1S = *A1 >> 15;
1066                                     ; **************************************************
1067      P:029F 382600  [2 -     1690]            move              #38,n0
1068      P:02A0 47E400  [2 -     1692]            move              x:(r4),y1
1069      P:02A1 476879  [4 -     1696]            tfr     y1,b      y1,x:(r0+n0)
1070      P:02A2 21AF00  [2 -     1698]            move              b1,b
1071      P:02A3 060FA0  [4 -     1702]            rep     #15
1072      P:02A4 20002A  [2 -     1704]            asr     b
1073                                     ; **************************************************
1074                                     ;   if (A1S == 0)
1075                                     ; **************************************************
1076      P:02A5 382800  [2 -     1706]            move              #40,n0
1077      P:02A6 21AF00  [2 -     1708]            move              b1,b
1078      P:02A7 55680B  [4 -     1712]            tst     b         b1,x:(r0+n0)
1079      P:02A8 0AF0A2  [6 -     1718]            jne     L46
                 0002BB
1080                                     ; **************************************************
1081                                     ;     FA1 = *A1 <= 8191 ? *A1 << 2 : 8191 << 2;
1082                                     ; **************************************************
1083      P:02AA 382600  [2 -     1720]            move              #38,n0
1084      P:02AB 47F400  [4 -     1724]            move              #>8191,y1
                 001FFF
1085      P:02AD 57E800  [4 -     1728]            move              x:(r0+n0),b
1086      P:02AE 20007D  [2 -     1730]            cmp     y1,b
1087      P:02AF 0AF0A7  [6 -     1736]            jgt     L47
                 0002B7
1088      P:02B1 20003A  [2 -     1738]            asl     b
1089      P:02B2 20003A  [2 -     1740]            asl     b
1090      P:02B3 21AF00  [2 -     1742]            move              b1,b
1091      P:02B4 556800  [4 -     1746]            move              b1,x:(r0+n0)






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 23



1092      P:02B5 0AF080  [6 -     1752]            jmp     L49
                 0002D0
1093                                     L47
1094      P:02B7 47F400  [4 -     1756]            move              #>32764,y1
                 007FFC
1095      P:02B9 0AF080  [6 -     1762]            jmp     L113
                 0002CE
1096                                     L46
1097                                     ; **************************************************
1098                                     ;   else
1099                                     ;     FA1 = *A1 >= 57345 ? (*A1 << 2) & 131071 : 24577 << 2;
1100                                     ; **************************************************
1101      P:02BB 382600  [2 -     1764]            move              #38,n0
1102      P:02BC 47E400  [2 -     1766]            move              x:(r4),y1
1103      P:02BD 476879  [4 -     1770]            tfr     y1,b      y1,x:(r0+n0)
1104      P:02BE 47F400  [4 -     1774]            move              #>57344,y1
                 00E000
1105      P:02C0 20007D  [2 -     1776]            cmp     y1,b
1106      P:02C1 0AF0AF  [6 -     1782]            jle     L50
                 0002CC
1107      P:02C3 44F43A  [4 -     1786]            asl     b         #>131071,x0
                 01FFFF
1108      P:02C5 20003A  [2 -     1788]            asl     b
1109      P:02C6 21AF00  [2 -     1790]            move              b1,b
1110      P:02C7 20004E  [2 -     1792]            and     x0,b
1111      P:02C8 21AF00  [2 -     1794]            move              b1,b
1112      P:02C9 556800  [4 -     1798]            move              b1,x:(r0+n0)
1113      P:02CA 0AF080  [6 -     1804]            jmp     L49
                 0002D0
1114                                     L50
1115      P:02CC 47F400  [4 -     1808]            move              #>98308,y1
                 018004
1116                                     L113
1117      P:02CE 382600  [2 -     1810]            move              #38,n0
**** 1118 [opt_adpcm-v1.asm 1118]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1118      P:02CF 476800  [4 -     1814]            move              y1,x:(r0+n0)
1119                                     L49
1120                                     ; **************************************************
1121                                     ;   FA = PKS1 == 1 ? FA1 : (131072 - FA1) & 131071;
1122                                     ; **************************************************
1123      P:02D0 381900  [2 -     1816]            move              #25,n0
1124      P:02D1 47F400  [4 -     1820]            move              #>1,y1
                 000001
1125      P:02D3 57E800  [4 -     1824]            move              x:(r0+n0),b
1126      P:02D4 20007D  [2 -     1826]            cmp     y1,b
1127      P:02D5 0AF0A2  [6 -     1832]            jne     L52
                 0002DD
1128      P:02D7 382600  [2 -     1834]            move              #38,n0
**** 1129 [opt_adpcm-v1.asm 1129]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1129      P:02D8 47E800  [4 -     1838]            move              x:(r0+n0),y1
1130      P:02D9 382800  [2 -     1840]            move              #40,n0
**** 1131 [opt_adpcm-v1.asm 1131]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1131      P:02DA 476800  [4 -     1844]            move              y1,x:(r0+n0)
1132      P:02DB 0AF080  [6 -     1850]            jmp     L53
                 0002E8
1133                                     L52






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 24



1134      P:02DD 382600  [2 -     1852]            move              #38,n0
1135      P:02DE 44F400  [4 -     1856]            move              #>131071,x0
                 01FFFF
1136      P:02E0 47E800  [4 -     1860]            move              x:(r0+n0),y1
1137      P:02E1 382800  [2 -     1862]            move              #40,n0
1138      P:02E2 57F400  [4 -     1866]            move              #>131072,b
                 020000
1139      P:02E4 20007C  [2 -     1868]            sub     y1,b
1140      P:02E5 55684E  [4 -     1872]            and     x0,b      b1,x:(r0+n0)
1141      P:02E6 21AF00  [2 -     1874]            move              b1,b
1142      P:02E7 556800  [4 -     1878]            move              b1,x:(r0+n0)
1143                                     L53
1144                                     ; **************************************************
1145                                     ;   UGA2B = (UGA2A + FA) & 131071;
1146                                     ; **************************************************
1147                                     ; **************************************************
1148                                     ;   UGA2S = UGA2B >> 16;
1149                                     ; **************************************************
1150      P:02E8 382869  [2 -     1880]            tfr     x1,b      #40,n0
1151      P:02E9 44F400  [4 -     1884]            move              #>131071,x0
                 01FFFF
1152      P:02EB 47E800  [4 -     1888]            move              x:(r0+n0),y1
1153      P:02EC 382678  [2 -     1890]            add     y1,b      #38,n0
1154      P:02ED 20004E  [2 -     1892]            and     x0,b
1155      P:02EE 21AF00  [2 -     1894]            move              b1,b
1156      P:02EF 556800  [4 -     1898]            move              b1,x:(r0+n0)
1157      P:02F0 21AF00  [2 -     1900]            move              b1,b
1158      P:02F1 0610A0  [4 -     1904]            rep     #16
1159      P:02F2 20002A  [2 -     1906]            asr     b
1160                                     ; **************************************************
1161                                     ;   UGA2 = SIGPK == 1 ? 0 :
1162                                     ;     UGA2S == 0 ? UGA2B >> 7 : (UGA2B >> 7) + 64512;
1163                                     ; **************************************************
1164      P:02F3 381A00  [2 -     1908]            move              #26,n0
1165      P:02F4 47F400  [4 -     1912]            move              #>1,y1
                 000001
1166      P:02F6 21AF00  [2 -     1914]            move              b1,b
1167      P:02F7 556800  [4 -     1918]            move              b1,x:(r0+n0)
1168      P:02F8 381500  [2 -     1920]            move              #21,n0
**** 1169 [opt_adpcm-v1.asm 1169]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1169      P:02F9 57E800  [4 -     1924]            move              x:(r0+n0),b
1170      P:02FA 20007D  [2 -     1926]            cmp     y1,b
1171      P:02FB 0AF0A2  [6 -     1932]            jne     L54
                 000302
1172      P:02FD 381B00  [2 -     1934]            move              #27,n0
1173      P:02FE 270000  [2 -     1936]            move              #0,y1
1174      P:02FF 476800  [4 -     1940]            move              y1,x:(r0+n0)
1175      P:0300 0AF080  [6 -     1946]            jmp     L55
                 00031B
1176                                     L54
1177      P:0302 381A00  [2 -     1948]            move              #26,n0
**** 1178 [opt_adpcm-v1.asm 1178]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1178      P:0303 57E800  [4 -     1952]            move              x:(r0+n0),b
1179      P:0304 20000B  [2 -     1954]            tst     b
1180      P:0305 0AF0A2  [6 -     1960]            jne     L56
                 00030F






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 25



1181      P:0307 382600  [2 -     1962]            move              #38,n0
**** 1182 [opt_adpcm-v1.asm 1182]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1182      P:0308 57E800  [4 -     1966]            move              x:(r0+n0),b
1183      P:0309 21AF00  [2 -     1968]            move              b1,b
1184      P:030A 0607A0  [4 -     1972]            rep     #7
1185      P:030B 20002A  [2 -     1974]            asr     b
1186      P:030C 21AF00  [2 -     1976]            move              b1,b
1187      P:030D 0AF080  [6 -     1982]            jmp     L114
                 000319
1188                                     L56
1189      P:030F 382600  [2 -     1984]            move              #38,n0
**** 1190 [opt_adpcm-v1.asm 1190]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1190      P:0310 57E800  [4 -     1988]            move              x:(r0+n0),b
1191      P:0311 21AF00  [2 -     1990]            move              b1,b
1192      P:0312 0607A0  [4 -     1994]            rep     #7
1193      P:0313 20002A  [2 -     1996]            asr     b
1194      P:0314 381B00  [2 -     1998]            move              #27,n0
1195      P:0315 47F400  [4 -     2002]            move              #>64512,y1
                 00FC00
1196      P:0317 21AF00  [2 -     2004]            move              b1,b
1197      P:0318 556878  [4 -     2008]            add     y1,b      b1,x:(r0+n0)
1198                                     L114
1199      P:0319 381B00  [2 -     2010]            move              #27,n0
**** 1200 [opt_adpcm-v1.asm 1200]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1200      P:031A 556800  [4 -     2014]            move              b1,x:(r0+n0)
1201                                     L55
1202                                     ; **************************************************
1203                                     ;   A2S = *A2 >> 15;
1204                                     ; **************************************************
1205      P:031B 382600  [2 -     2016]            move              #38,n0
1206      P:031C 47E500  [2 -     2018]            move              x:(r5),y1
1207      P:031D 476879  [4 -     2022]            tfr     y1,b      y1,x:(r0+n0)
1208      P:031E 21AF00  [2 -     2024]            move              b1,b
1209      P:031F 060FA0  [4 -     2028]            rep     #15
1210      P:0320 20002A  [2 -     2030]            asr     b
1211                                     ; **************************************************
1212                                     ;   ULA2 = A2S == 0 ? (65536 - (*A2 >> 7)) & 65535 :
1213                                     ;     (65536 - ((*A2 >> 7) + 65024)) & 65535;
1214                                     ; **************************************************
1215      P:0321 21AF00  [2 -     2032]            move              b1,b
1216      P:0322 20000B  [2 -     2034]            tst     b
1217      P:0323 0AF0A2  [6 -     2040]            jne     L58
                 000330
1218      P:0325 57E800  [4 -     2044]            move              x:(r0+n0),b
1219      P:0326 21AF00  [2 -     2046]            move              b1,b
1220      P:0327 0607A0  [4 -     2050]            rep     #7
1221      P:0328 20002A  [2 -     2052]            asr     b
1222      P:0329 21AF00  [2 -     2054]            move              b1,b
1223      P:032A 21A700  [2 -     2056]            move              b1,y1
1224      P:032B 57F400  [4 -     2060]            move              #>65536,b
                 010000
1225      P:032D 20007C  [2 -     2062]            sub     y1,b
1226      P:032E 0AF080  [6 -     2068]            jmp     L115
                 00033C
1227                                     L58
1228      P:0330 47E500  [2 -     2070]            move              x:(r5),y1






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 26



1229      P:0331 200079  [2 -     2072]            tfr     y1,b
1230      P:0332 21AF00  [2 -     2074]            move              b1,b
1231      P:0333 0607A0  [4 -     2078]            rep     #7
1232      P:0334 20002A  [2 -     2080]            asr     b
1233      P:0335 382800  [2 -     2082]            move              #40,n0
1234      P:0336 21AF00  [2 -     2084]            move              b1,b
1235      P:0337 21A700  [2 -     2086]            move              b1,y1
1236      P:0338 57F400  [4 -     2090]            move              #>512,b
                 000200
1237      P:033A 20007C  [2 -     2092]            sub     y1,b
1238      P:033B 556800  [4 -     2096]            move              b1,x:(r0+n0)
1239                                     L115
1240                                     ; **************************************************
1241                                     ;   UA2 = (UGA2 + ULA2) & 65535;
1242                                     ; **************************************************
1243                                     ; **************************************************
1244                                     ;   A2T = (*A2 + UA2) & 65535;
1245                                     ; **************************************************
1246                                     ; **************************************************
1247                                     ;   
1248                                     ;   /* LIMC */
1249                                     ;   A2P = 32768 <= A2T && A2T <= 53248 ? 53248 :
1250                                     ;     12288 <= A2T && A2T <= 32767 ? 12288 : A2T;
1251                                     ; **************************************************
1252      P:033C 382800  [2 -     2098]            move              #40,n0
1253      P:033D 44F400  [4 -     2102]            move              #>65535,x0
                 00FFFF
1254      P:033F 44F44E  [4 -     2106]            and     x0,b      #>65535,x0
                 00FFFF
1255      P:0341 21AF00  [2 -     2108]            move              b1,b
1256      P:0342 556800  [4 -     2112]            move              b1,x:(r0+n0)
1257      P:0343 381B00  [2 -     2114]            move              #27,n0
**** 1258 [opt_adpcm-v1.asm 1258]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1258      P:0344 57E800  [4 -     2118]            move              x:(r0+n0),b
1259      P:0345 382800  [2 -     2120]            move              #40,n0
**** 1260 [opt_adpcm-v1.asm 1260]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1260      P:0346 47E800  [4 -     2124]            move              x:(r0+n0),y1
1261      P:0347 382678  [2 -     2126]            add     y1,b      #38,n0
1262      P:0348 47E54E  [2 -     2128]            and     x0,b      x:(r5),y1
1263      P:0349 21AF00  [2 -     2130]            move              b1,b
1264      P:034A 47F478  [4 -     2134]            add     y1,b      #>32767,y1
                 007FFF
1265      P:034C 20004E  [2 -     2136]            and     x0,b
1266      P:034D 21AF00  [2 -     2138]            move              b1,b
1267      P:034E 55687D  [4 -     2142]            cmp     y1,b      b1,x:(r0+n0)
1268      P:034F 0AF0AF  [6 -     2148]            jle     L60
                 000359
1269      P:0351 44F400  [4 -     2152]            move              #>53248,x0
                 00D000
1270      P:0353 20004D  [2 -     2154]            cmp     x0,b
1271      P:0354 0AF0A7  [6 -     2160]            jgt     L60
                 000359
1272      P:0356 208600  [2 -     2162]            move              x0,y0
1273      P:0357 0AF080  [6 -     2168]            jmp     L61
                 00036B
1274                                     L60






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 27



1275      P:0359 382600  [2 -     2170]            move              #38,n0
1276      P:035A 47F400  [4 -     2174]            move              #>12287,y1
                 002FFF
1277      P:035C 57E800  [4 -     2178]            move              x:(r0+n0),b
1278      P:035D 20007D  [2 -     2180]            cmp     y1,b
1279      P:035E 0AF0AF  [6 -     2186]            jle     L62
                 000369
1280      P:0360 47F400  [4 -     2190]            move              #>32767,y1
                 007FFF
1281      P:0362 20007D  [2 -     2192]            cmp     y1,b
1282      P:0363 0AF0A7  [6 -     2198]            jgt     L62
                 000369
1283      P:0365 46F400  [4 -     2202]            move              #>12288,y0
                 003000
1284      P:0367 0AF080  [6 -     2208]            jmp     L61
                 00036B
1285                                     L62
1286      P:0369 382600  [2 -     2210]            move              #38,n0
**** 1287 [opt_adpcm-v1.asm 1287]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1287      P:036A 46E800  [4 -     2214]            move              x:(r0+n0),y0
1288                                     L61
1289                                     ; **************************************************
1290                                     ;   
1291                                     ;   /* TRIGB */
1292                                     ;   A2R = *T == 0 ? A2P : 0;
1293                                     ; **************************************************
1294      P:036B 70F400  [4 -     2218]            move              #65532,n0
                 00FFFC
**** 1295 [opt_adpcm-v1.asm 1295]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1295      P:036D 67E800  [4 -     2222]            move              x:(r0+n0),r7
1296      P:036E 382800  [2 -     2224]            move              #40,n0
1297      P:036F 47E700  [2 -     2226]            move              x:(r7),y1
1298      P:0370 476879  [4 -     2230]            tfr     y1,b      y1,x:(r0+n0)
1299      P:0371 20000B  [2 -     2232]            tst     b
1300      P:0372 0AF0A2  [6 -     2238]            jne     L64
                 000378
1301      P:0374 381D00  [2 -     2240]            move              #29,n0
**** 1302 [opt_adpcm-v1.asm 1302]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1302      P:0375 466800  [4 -     2244]            move              y0,x:(r0+n0)
1303      P:0376 0AF080  [6 -     2250]            jmp     L65
                 00037B
1304                                     L64
1305      P:0378 381D00  [2 -     2252]            move              #29,n0
1306      P:0379 270000  [2 -     2254]            move              #0,y1
1307      P:037A 476800  [4 -     2258]            move              y1,x:(r0+n0)
1308                                     L65
1309                                     ; **************************************************
1310                                     ;   
1311                                     ;   /* FMULT */
1312                                     ;   WA2 = fmult(A2R, *SR2);
1313                                     ; **************************************************
1314      P:037B 70F400  [4 -     2262]            move              #65523,n0
                 00FFF3
**** 1315 [opt_adpcm-v1.asm 1315]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1315      P:037D 67E800  [4 -     2266]            move              x:(r0+n0),r7
1316      P:037E 382800  [2 -     2268]            move              #40,n0






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 28



1317      P:037F 47E700  [2 -     2270]            move              x:(r7),y1
1318      P:0380 476800  [4 -     2274]            move              y1,x:(r0+n0)
1319      P:0381 381D00  [2 -     2276]            move              #29,n0
1320      P:0382 475E00  [2 -     2278]            move              y1,x:(r6)+
1321      P:0383 47E800  [4 -     2282]            move              x:(r0+n0),y1
1322      P:0384 475E00  [2 -     2284]            move              y1,x:(r6)+
1323      P:0385 0BF080  [6 -     2290]            jsr     Ffmult
                 000000
1324                                     ; **************************************************
1325                                     ;   
1326                                     ;   /* UPA1 */
1327                                     ;   PKS = PK0 ^ *PK1;
1328                                     ; **************************************************
1329                                     ; **************************************************
1330                                     ;   UGA1 = SIGPK == 1 ? 0 : (PKS == 0 ? 192 : 65344);
1331                                     ; **************************************************
1332      P:0387 381F00  [2 -     2292]            move              #31,n0
1333      P:0388 47F400  [4 -     2296]            move              #>1,y1
                 000001
1334      P:038A 546800  [4 -     2300]            move              a1,x:(r0+n0)
1335      P:038B 70F400  [4 -     2304]            move              #65525,n0
                 00FFF5
1336      P:038D 205600  [2 -     2306]            move              (r6)-
1337      P:038E 67E800  [4 -     2310]            move              x:(r0+n0),r7
1338      P:038F 381400  [2 -     2312]            move              #20,n0
1339      P:0390 44E700  [2 -     2314]            move              x:(r7),x0
1340      P:0391 57E800  [4 -     2318]            move              x:(r0+n0),b
1341      P:0392 38264B  [2 -     2320]            eor     x0,b      #38,n0
1342      P:0393 21AF00  [2 -     2322]            move              b1,b
1343      P:0394 556800  [4 -     2326]            move              b1,x:(r0+n0)
1344      P:0395 381500  [2 -     2328]            move              #21,n0
1345      P:0396 205600  [2 -     2330]            move              (r6)-
1346      P:0397 57E800  [4 -     2334]            move              x:(r0+n0),b
1347      P:0398 20007D  [2 -     2336]            cmp     y1,b
1348      P:0399 0AF0A2  [6 -     2342]            jne     L66
                 00039E
1349      P:039B 250000  [2 -     2344]            move              #0,x1
1350      P:039C 0AF080  [6 -     2350]            jmp     L67
                 0003A9
1351                                     L66
1352      P:039E 382600  [2 -     2352]            move              #38,n0
**** 1353 [opt_adpcm-v1.asm 1353]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1353      P:039F 57E800  [4 -     2356]            move              x:(r0+n0),b
1354      P:03A0 20000B  [2 -     2358]            tst     b
1355      P:03A1 0AF0A2  [6 -     2364]            jne     L68
                 0003A7
1356      P:03A3 45F400  [4 -     2368]            move              #>192,x1
                 0000C0
1357      P:03A5 0AF080  [6 -     2374]            jmp     L67
                 0003A9
1358                                     L68
1359      P:03A7 45F400  [4 -     2378]            move              #>65344,x1
                 00FF40
1360                                     L67
1361                                     ; **************************************************
1362                                     ;   A1S = *A1 >> 15;






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 29



1363                                     ; **************************************************
1364      P:03A9 382600  [2 -     2380]            move              #38,n0
1365      P:03AA 47E400  [2 -     2382]            move              x:(r4),y1
1366      P:03AB 476879  [4 -     2386]            tfr     y1,b      y1,x:(r0+n0)
1367      P:03AC 21AF00  [2 -     2388]            move              b1,b
1368      P:03AD 060FA0  [4 -     2392]            rep     #15
1369      P:03AE 20002A  [2 -     2394]            asr     b
1370                                     ; **************************************************
1371                                     ;   ULA1 = A1S == 0 ? (65536 - (*A1 >> 8)) & 65535 :
1372                                     ;     (65536 - ((*A1 >> 8) + 65280)) & 65535;
1373                                     ; **************************************************
1374      P:03AF 382800  [2 -     2396]            move              #40,n0
1375      P:03B0 21AF00  [2 -     2398]            move              b1,b
1376      P:03B1 55680B  [4 -     2402]            tst     b         b1,x:(r0+n0)
1377      P:03B2 0AF0A2  [6 -     2408]            jne     L70
                 0003C0
1378      P:03B4 382600  [2 -     2410]            move              #38,n0
**** 1379 [opt_adpcm-v1.asm 1379]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1379      P:03B5 57E800  [4 -     2414]            move              x:(r0+n0),b
1380      P:03B6 21AF00  [2 -     2416]            move              b1,b
1381      P:03B7 0608A0  [4 -     2420]            rep     #8
1382      P:03B8 20002A  [2 -     2422]            asr     b
1383      P:03B9 21AF00  [2 -     2424]            move              b1,b
1384      P:03BA 21A700  [2 -     2426]            move              b1,y1
1385      P:03BB 57F400  [4 -     2430]            move              #>65536,b
                 010000
1386      P:03BD 20007C  [2 -     2432]            sub     y1,b
1387      P:03BE 0AF080  [6 -     2438]            jmp     L116
                 0003CC
1388                                     L70
1389      P:03C0 47E400  [2 -     2440]            move              x:(r4),y1
1390      P:03C1 200079  [2 -     2442]            tfr     y1,b
1391      P:03C2 21AF00  [2 -     2444]            move              b1,b
1392      P:03C3 0608A0  [4 -     2448]            rep     #8
1393      P:03C4 20002A  [2 -     2450]            asr     b
1394      P:03C5 382800  [2 -     2452]            move              #40,n0
1395      P:03C6 21AF00  [2 -     2454]            move              b1,b
1396      P:03C7 21A700  [2 -     2456]            move              b1,y1
1397      P:03C8 57F400  [4 -     2460]            move              #>256,b
                 000100
1398      P:03CA 20007C  [2 -     2462]            sub     y1,b
1399      P:03CB 556800  [4 -     2466]            move              b1,x:(r0+n0)
1400                                     L116
1401                                     ; **************************************************
1402                                     ;   UA1 = (UGA1 + ULA1) & 65535;
1403                                     ; **************************************************
1404                                     ; **************************************************
1405                                     ;   A1T = (*A1 + UA1) & 65535;
1406                                     ; **************************************************
1407                                     ; **************************************************
1408                                     ;   
1409                                     ;   /* LIMD */
1410                                     ;   A1UL = (15360 + 65536 - A2P) & 65535;
1411                                     ; **************************************************
1412                                     ; **************************************************
1413                                     ;   A1LL = (A2P + 65536 - 15360) & 65535;






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 30



1414                                     ; **************************************************
1415                                     ; **************************************************
1416                                     ;   A1P = 32768 <= A1T && A1T <= A1LL ? A1LL :
1417                                     ;     A1UL <= A1T && A1T <= 32767 ? A1UL : A1T;
1418                                     ; **************************************************
1419      P:03CC 382800  [2 -     2468]            move              #40,n0
1420      P:03CD 44F400  [4 -     2472]            move              #>65535,x0
                 00FFFF
1421      P:03CF 44F44E  [4 -     2476]            and     x0,b      #>65535,x0
                 00FFFF
1422      P:03D1 21AF00  [2 -     2478]            move              b1,b
1423      P:03D2 556869  [4 -     2482]            tfr     x1,b      b1,x:(r0+n0)
1424      P:03D3 47E800  [4 -     2486]            move              x:(r0+n0),y1
1425      P:03D4 382678  [2 -     2488]            add     y1,b      #38,n0
1426      P:03D5 47E44E  [2 -     2490]            and     x0,b      x:(r4),y1
1427      P:03D6 21AF00  [2 -     2492]            move              b1,b
1428      P:03D7 47F478  [4 -     2496]            add     y1,b      #>50176,y1
                 00C400
1429      P:03D9 20004E  [2 -     2498]            and     x0,b
1430      P:03DA 21AF00  [2 -     2500]            move              b1,b
1431      P:03DB 556800  [4 -     2504]            move              b1,x:(r0+n0)
1432      P:03DC 382000  [2 -     2506]            move              #32,n0
1433      P:03DD 57F400  [4 -     2510]            move              #>80896,b
                 013C00
1434      P:03DF 20005C  [2 -     2512]            sub     y0,b
1435      P:03E0 20004E  [2 -     2514]            and     x0,b
1436      P:03E1 21AF00  [2 -     2516]            move              b1,b
1437      P:03E2 556859  [4 -     2520]            tfr     y0,b      b1,x:(r0+n0)
1438      P:03E3 382178  [2 -     2522]            add     y1,b      #33,n0
1439      P:03E4 47F44E  [4 -     2526]            and     x0,b      #>32767,y1
                 007FFF
1440      P:03E6 21AF00  [2 -     2528]            move              b1,b
1441      P:03E7 556800  [4 -     2532]            move              b1,x:(r0+n0)
1442      P:03E8 382600  [2 -     2534]            move              #38,n0
**** 1443 [opt_adpcm-v1.asm 1443]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1443      P:03E9 57E800  [4 -     2538]            move              x:(r0+n0),b
1444      P:03EA 20007D  [2 -     2540]            cmp     y1,b
1445      P:03EB 0AF0AF  [6 -     2546]            jle     L72
                 0003F5
1446      P:03ED 382100  [2 -     2548]            move              #33,n0
**** 1447 [opt_adpcm-v1.asm 1447]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1447      P:03EE 47E800  [4 -     2552]            move              x:(r0+n0),y1
1448      P:03EF 20007D  [2 -     2554]            cmp     y1,b
1449      P:03F0 0AF0A7  [6 -     2560]            jgt     L72
                 0003F5
1450      P:03F2 44E800  [4 -     2564]            move              x:(r0+n0),x0
1451      P:03F3 0AF080  [6 -     2570]            jmp     L73
                 000408
1452                                     L72
1453      P:03F5 382000  [2 -     2572]            move              #32,n0
**** 1454 [opt_adpcm-v1.asm 1454]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1454      P:03F6 57E800  [4 -     2576]            move              x:(r0+n0),b
1455      P:03F7 382600  [2 -     2578]            move              #38,n0
**** 1456 [opt_adpcm-v1.asm 1456]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1456      P:03F8 47E800  [4 -     2582]            move              x:(r0+n0),y1
1457      P:03F9 20007D  [2 -     2584]            cmp     y1,b






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 31



1458      P:03FA 0AF0A7  [6 -     2590]            jgt     L74
                 000406
1459      P:03FC 47F400  [4 -     2594]            move              #>32767,y1
                 007FFF
1460      P:03FE 57E800  [4 -     2598]            move              x:(r0+n0),b
1461      P:03FF 20007D  [2 -     2600]            cmp     y1,b
1462      P:0400 0AF0A7  [6 -     2606]            jgt     L74
                 000406
1463      P:0402 382000  [2 -     2608]            move              #32,n0
**** 1464 [opt_adpcm-v1.asm 1464]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1464      P:0403 44E800  [4 -     2612]            move              x:(r0+n0),x0
1465      P:0404 0AF080  [6 -     2618]            jmp     L73
                 000408
1466                                     L74
1467      P:0406 382600  [2 -     2620]            move              #38,n0
**** 1468 [opt_adpcm-v1.asm 1468]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1468      P:0407 44E800  [4 -     2624]            move              x:(r0+n0),x0
1469                                     L73
1470                                     ; **************************************************
1471                                     ;   
1472                                     ;   /* TRIGB */
1473                                     ;   A1R = *T == 0 ? A1P : 0;
1474                                     ; **************************************************
1475      P:0408 70F400  [4 -     2628]            move              #65532,n0
                 00FFFC
**** 1476 [opt_adpcm-v1.asm 1476]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1476      P:040A 67E800  [4 -     2632]            move              x:(r0+n0),r7
1477      P:040B 382800  [2 -     2634]            move              #40,n0
1478      P:040C 47E700  [2 -     2636]            move              x:(r7),y1
1479      P:040D 476879  [4 -     2640]            tfr     y1,b      y1,x:(r0+n0)
1480      P:040E 20000B  [2 -     2642]            tst     b
1481      P:040F 0AF0A2  [6 -     2648]            jne     L76
                 000415
1482      P:0411 381C00  [2 -     2650]            move              #28,n0
**** 1483 [opt_adpcm-v1.asm 1483]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1483      P:0412 446800  [4 -     2654]            move              x0,x:(r0+n0)
1484      P:0413 0AF080  [6 -     2660]            jmp     L77
                 000418
1485                                     L76
1486      P:0415 381C00  [2 -     2662]            move              #28,n0
1487      P:0416 270000  [2 -     2664]            move              #0,y1
1488      P:0417 476800  [4 -     2668]            move              y1,x:(r0+n0)
1489                                     L77
1490                                     ; **************************************************
1491                                     ;   
1492                                     ;   /* FMULT */
1493                                     ;   WA1 = fmult(A1R, SR1);
1494                                     ; **************************************************
1495      P:0418 381800  [2 -     2670]            move              #24,n0
**** 1496 [opt_adpcm-v1.asm 1496]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1496      P:0419 47E800  [4 -     2674]            move              x:(r0+n0),y1
1497      P:041A 381C00  [2 -     2676]            move              #28,n0
1498      P:041B 475E00  [2 -     2678]            move              y1,x:(r6)+
1499      P:041C 47E800  [4 -     2682]            move              x:(r0+n0),y1
1500      P:041D 475E00  [2 -     2684]            move              y1,x:(r6)+
1501      P:041E 0BF080  [6 -     2690]            jsr     Ffmult






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 32



                 000000
1502                                     ; **************************************************
1503                                     ;   
1504                                     ;   /* FLOATA */
1505                                     ;   DQS = *DQ >> 14;
1506                                     ; **************************************************
1507      P:0420 381E00  [2 -     2692]            move              #30,n0
1508      P:0421 205600  [2 -     2694]            move              (r6)-
1509      P:0422 546800  [4 -     2698]            move              a1,x:(r0+n0)
1510      P:0423 382800  [2 -     2700]            move              #40,n0
1511      P:0424 47E100  [2 -     2702]            move              x:(r1),y1
1512      P:0425 476879  [4 -     2706]            tfr     y1,b      y1,x:(r0+n0)
1513      P:0426 21AF00  [2 -     2708]            move              b1,b
1514      P:0427 205600  [2 -     2710]            move              (r6)-
1515      P:0428 060EA0  [4 -     2714]            rep     #14
1516      P:0429 20002A  [2 -     2716]            asr     b
1517                                     ; **************************************************
1518                                     ;   MAG = *DQ & 16383;
1519                                     ; **************************************************
1520                                     ; **************************************************
1521                                     ;   for (EXP = 0; (MAG >> EXP) != 0; EXP++)
1522                                     ; **************************************************
1523      P:042A 381200  [2 -     2718]            move              #18,n0
1524      P:042B 44F400  [4 -     2722]            move              #>16383,x0
                 003FFF
1525      P:042D 21AF00  [2 -     2724]            move              b1,b
1526      P:042E 556879  [4 -     2728]            tfr     y1,b      b1,x:(r0+n0)
1527      P:042F 38224E  [2 -     2730]            and     x0,b      #34,n0
1528      P:0430 21AF00  [2 -     2732]            move              b1,b
1529      P:0431 27000B  [2 -     2734]            tst     b         #0,y1
1530      P:0432 556800  [4 -     2738]            move              b1,x:(r0+n0)
1531      P:0433 382600  [2 -     2740]            move              #38,n0
**** 1532 [opt_adpcm-v1.asm 1532]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1532      P:0434 476800  [4 -     2744]            move              y1,x:(r0+n0)
1533      P:0435 0AF0AA  [6 -     2750]            jeq     L110
                 000448
1534      P:0437 44F400  [4 -     2754]            move              #>1,x0
                 000001
1535                                     L80
1536      P:0439 382600  [2 -     2756]            move              #38,n0
**** 1537 [opt_adpcm-v1.asm 1537]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1537      P:043A 57E800  [4 -     2760]            move              x:(r0+n0),b
1538      P:043B 200048  [2 -     2762]            add     x0,b
1539      P:043C 556801  [4 -     2766]            tfr     b,a       b1,x:(r0+n0)
1540      P:043D 382203  [2 -     2768]            tst     a         #34,n0
**** 1541 [opt_adpcm-v1.asm 1541]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1541      P:043E 57E800  [4 -     2772]            move              x:(r0+n0),b
1542      P:043F 0AF0AA  [6 -     2778]            jeq     L120
                 000445
1543      P:0441 21AF00  [2 -     2780]            move              b1,b
1544      P:0442 06CE20  [4 -     2784]            rep     a
1545      P:0443 20002A  [2 -     2786]            asr     b
1546      P:0444 21AF00  [2 -     2788]            move              b1,b
1547                                     L120
1548      P:0445 20000B  [2 -     2790]            tst     b
1549      P:0446 0AF0A2  [6 -     2796]            jne     L80






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 33



                 000439
1550                                     L110
1551                                     ; **************************************************
1552                                     ;     ;
1553                                     ;   MANT = MAG == 0 ? 1 << 5 : (MAG << 6) >> EXP;
1554                                     ; **************************************************
1555      P:0448 382200  [2 -     2798]            move              #34,n0
**** 1556 [opt_adpcm-v1.asm 1556]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1556      P:0449 57E800  [4 -     2802]            move              x:(r0+n0),b
1557      P:044A 20000B  [2 -     2804]            tst     b
1558      P:044B 0AF0A2  [6 -     2810]            jne     L82
                 000453
1559      P:044D 382300  [2 -     2812]            move              #35,n0
1560      P:044E 47F400  [4 -     2816]            move              #>32,y1
                 000020
1561      P:0450 476800  [4 -     2820]            move              y1,x:(r0+n0)
1562      P:0451 0AF080  [6 -     2826]            jmp     L83
                 000465
1563                                     L82
1564      P:0453 382200  [2 -     2828]            move              #34,n0
**** 1565 [opt_adpcm-v1.asm 1565]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1565      P:0454 57E800  [4 -     2832]            move              x:(r0+n0),b
1566      P:0455 0606A0  [4 -     2836]            rep     #6
1567      P:0456 20003A  [2 -     2838]            asl     b
1568      P:0457 382300  [2 -     2840]            move              #35,n0
1569      P:0458 21AF00  [2 -     2842]            move              b1,b
1570      P:0459 556800  [4 -     2846]            move              b1,x:(r0+n0)
1571      P:045A 382600  [2 -     2848]            move              #38,n0
**** 1572 [opt_adpcm-v1.asm 1572]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1572      P:045B 56E800  [4 -     2852]            move              x:(r0+n0),a
1573      P:045C 200003  [2 -     2854]            tst     a
1574      P:045D 0AF0AA  [6 -     2860]            jeq     L121
                 000463
1575      P:045F 21AF00  [2 -     2862]            move              b1,b
1576      P:0460 06CE20  [4 -     2866]            rep     a
1577      P:0461 20002A  [2 -     2868]            asr     b
1578      P:0462 21AF00  [2 -     2870]            move              b1,b
1579                                     L121
1580      P:0463 382300  [2 -     2872]            move              #35,n0
**** 1581 [opt_adpcm-v1.asm 1581]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1581      P:0464 556800  [4 -     2876]            move              b1,x:(r0+n0)
1582                                     L83
1583                                     ; **************************************************
1584                                     ;   DQ1 = (DQS << 10) + (EXP << 6) + MANT;
1585                                     ; **************************************************
1586      P:0465 381200  [2 -     2878]            move              #18,n0
**** 1587 [opt_adpcm-v1.asm 1587]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1587      P:0466 57E800  [4 -     2882]            move              x:(r0+n0),b
1588      P:0467 060AA0  [4 -     2886]            rep     #10
1589      P:0468 20003A  [2 -     2888]            asl     b
1590      P:0469 382800  [2 -     2890]            move              #40,n0
1591      P:046A 21AF00  [2 -     2892]            move              b1,b
1592      P:046B 556800  [4 -     2896]            move              b1,x:(r0+n0)
1593      P:046C 382600  [2 -     2898]            move              #38,n0
**** 1594 [opt_adpcm-v1.asm 1594]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1594      P:046D 57E800  [4 -     2902]            move              x:(r0+n0),b






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 34



1595      P:046E 0606A0  [4 -     2906]            rep     #6
1596      P:046F 20003A  [2 -     2908]            asl     b
1597                                     ; **************************************************
1598                                     ;   
1599                                     ;   /* XOR */
1600                                     ;   DQS = *DQ >> 14;
1601                                     ; **************************************************
1602      P:0470 21AF00  [2 -     2910]            move              b1,b
1603      P:0471 21A700  [2 -     2912]            move              b1,y1
1604      P:0472 556800  [4 -     2916]            move              b1,x:(r0+n0)
1605      P:0473 382800  [2 -     2918]            move              #40,n0
**** 1606 [opt_adpcm-v1.asm 1606]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1606      P:0474 57E800  [4 -     2922]            move              x:(r0+n0),b
1607      P:0475 382378  [2 -     2924]            add     y1,b      #35,n0
**** 1608 [opt_adpcm-v1.asm 1608]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1608      P:0476 47E800  [4 -     2928]            move              x:(r0+n0),y1
1609      P:0477 382478  [2 -     2930]            add     y1,b      #36,n0
**** 1610 [opt_adpcm-v1.asm 1610]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1610      P:0478 556800  [4 -     2934]            move              b1,x:(r0+n0)
1611      P:0479 47E100  [2 -     2936]            move              x:(r1),y1
1612      P:047A 200079  [2 -     2938]            tfr     y1,b
1613      P:047B 21AF00  [2 -     2940]            move              b1,b
1614      P:047C 060EA0  [4 -     2944]            rep     #14
1615      P:047D 20002A  [2 -     2946]            asr     b
1616                                     ; **************************************************
1617                                     ;   U[0] = DQS ^ (*DQ2 >> 10);
1618                                     ; **************************************************
1619      P:047E 381200  [2 -     2948]            move              #18,n0
1620      P:047F 21AF00  [2 -     2950]            move              b1,b
1621      P:0480 556800  [4 -     2954]            move              b1,x:(r0+n0)
1622      P:0481 70F400  [4 -     2958]            move              #65531,n0
                 00FFFB
**** 1623 [opt_adpcm-v1.asm 1623]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1623      P:0483 67E800  [4 -     2962]            move              x:(r0+n0),r7
**** 1624 [opt_adpcm-v1.asm 1624]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1624      P:0484 47E700  [2 -     2964]            move              x:(r7),y1
1625      P:0485 200079  [2 -     2966]            tfr     y1,b
1626      P:0486 21AF00  [2 -     2968]            move              b1,b
1627      P:0487 060AA0  [4 -     2972]            rep     #10
1628      P:0488 20002A  [2 -     2974]            asr     b
1629                                     ; **************************************************
1630                                     ;   U[1] = DQS ^ (*DQ3 >> 10);
1631                                     ; **************************************************
1632      P:0489 381200  [2 -     2976]            move              #18,n0
1633      P:048A 21AF00  [2 -     2978]            move              b1,b
1634      P:048B 21A400  [2 -     2980]            move              b1,x0
1635      P:048C 57E800  [4 -     2984]            move              x:(r0+n0),b
1636      P:048D 38064B  [2 -     2986]            eor     x0,b      #6,n0
1637      P:048E 21AF00  [2 -     2988]            move              b1,b
1638      P:048F 21A700  [2 -     2990]            move              b1,y1
1639      P:0490 476800  [4 -     2994]            move              y1,x:(r0+n0)
1640      P:0491 70F400  [4 -     2998]            move              #65530,n0
                 00FFFA
**** 1641 [opt_adpcm-v1.asm 1641]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1641      P:0493 67E800  [4 -     3002]            move              x:(r0+n0),r7
**** 1642 [opt_adpcm-v1.asm 1642]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 35



1642      P:0494 47E700  [2 -     3004]            move              x:(r7),y1
1643      P:0495 200079  [2 -     3006]            tfr     y1,b
1644      P:0496 21AF00  [2 -     3008]            move              b1,b
1645      P:0497 060AA0  [4 -     3012]            rep     #10
1646      P:0498 20002A  [2 -     3014]            asr     b
1647                                     ; **************************************************
1648                                     ;   U[2] = DQS ^ (*DQ4 >> 10);
1649                                     ; **************************************************
1650      P:0499 381200  [2 -     3016]            move              #18,n0
1651      P:049A 21AF00  [2 -     3018]            move              b1,b
1652      P:049B 21A400  [2 -     3020]            move              b1,x0
1653      P:049C 57E800  [4 -     3024]            move              x:(r0+n0),b
1654      P:049D 38074B  [2 -     3026]            eor     x0,b      #7,n0
1655      P:049E 21AF00  [2 -     3028]            move              b1,b
1656      P:049F 21A700  [2 -     3030]            move              b1,y1
1657      P:04A0 476800  [4 -     3034]            move              y1,x:(r0+n0)
1658      P:04A1 70F400  [4 -     3038]            move              #65529,n0
                 00FFF9
**** 1659 [opt_adpcm-v1.asm 1659]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1659      P:04A3 67E800  [4 -     3042]            move              x:(r0+n0),r7
**** 1660 [opt_adpcm-v1.asm 1660]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1660      P:04A4 47E700  [2 -     3044]            move              x:(r7),y1
1661      P:04A5 200079  [2 -     3046]            tfr     y1,b
1662      P:04A6 21AF00  [2 -     3048]            move              b1,b
1663      P:04A7 060AA0  [4 -     3052]            rep     #10
1664      P:04A8 20002A  [2 -     3054]            asr     b
1665                                     ; **************************************************
1666                                     ;   U[3] = DQS ^ (*DQ5 >> 10);
1667                                     ; **************************************************
1668      P:04A9 381200  [2 -     3056]            move              #18,n0
1669      P:04AA 21AF00  [2 -     3058]            move              b1,b
1670      P:04AB 21A400  [2 -     3060]            move              b1,x0
1671      P:04AC 57E800  [4 -     3064]            move              x:(r0+n0),b
1672      P:04AD 38084B  [2 -     3066]            eor     x0,b      #8,n0
1673      P:04AE 21AF00  [2 -     3068]            move              b1,b
1674      P:04AF 21A700  [2 -     3070]            move              b1,y1
1675      P:04B0 476800  [4 -     3074]            move              y1,x:(r0+n0)
1676      P:04B1 70F400  [4 -     3078]            move              #65528,n0
                 00FFF8
**** 1677 [opt_adpcm-v1.asm 1677]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1677      P:04B3 67E800  [4 -     3082]            move              x:(r0+n0),r7
**** 1678 [opt_adpcm-v1.asm 1678]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1678      P:04B4 47E700  [2 -     3084]            move              x:(r7),y1
1679      P:04B5 200079  [2 -     3086]            tfr     y1,b
1680      P:04B6 21AF00  [2 -     3088]            move              b1,b
1681      P:04B7 060AA0  [4 -     3092]            rep     #10
1682      P:04B8 20002A  [2 -     3094]            asr     b
1683                                     ; **************************************************
1684                                     ;   U[4] = DQS ^ (*DQ6 >> 10);
1685                                     ; **************************************************
1686      P:04B9 381200  [2 -     3096]            move              #18,n0
1687      P:04BA 21AF00  [2 -     3098]            move              b1,b
1688      P:04BB 21A400  [2 -     3100]            move              b1,x0
1689      P:04BC 57E800  [4 -     3104]            move              x:(r0+n0),b
1690      P:04BD 38094B  [2 -     3106]            eor     x0,b      #9,n0
1691      P:04BE 21AF00  [2 -     3108]            move              b1,b






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 36



1692      P:04BF 21A700  [2 -     3110]            move              b1,y1
1693      P:04C0 476800  [4 -     3114]            move              y1,x:(r0+n0)
1694      P:04C1 70F400  [4 -     3118]            move              #65527,n0
                 00FFF7
**** 1695 [opt_adpcm-v1.asm 1695]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1695      P:04C3 67E800  [4 -     3122]            move              x:(r0+n0),r7
**** 1696 [opt_adpcm-v1.asm 1696]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1696      P:04C4 47E700  [2 -     3124]            move              x:(r7),y1
1697      P:04C5 200079  [2 -     3126]            tfr     y1,b
1698      P:04C6 21AF00  [2 -     3128]            move              b1,b
1699      P:04C7 060AA0  [4 -     3132]            rep     #10
1700      P:04C8 20002A  [2 -     3134]            asr     b
1701                                     ; **************************************************
1702                                     ;   U[5] = DQS ^ (*DQ7 >> 10);
1703                                     ; **************************************************
1704      P:04C9 381200  [2 -     3136]            move              #18,n0
1705      P:04CA 21AF00  [2 -     3138]            move              b1,b
1706      P:04CB 21A400  [2 -     3140]            move              b1,x0
1707      P:04CC 57E800  [4 -     3144]            move              x:(r0+n0),b
1708      P:04CD 380A4B  [2 -     3146]            eor     x0,b      #10,n0
1709      P:04CE 21AF00  [2 -     3148]            move              b1,b
1710      P:04CF 21A700  [2 -     3150]            move              b1,y1
1711      P:04D0 476800  [4 -     3154]            move              y1,x:(r0+n0)
1712      P:04D1 70F400  [4 -     3158]            move              #65526,n0
                 00FFF6
**** 1713 [opt_adpcm-v1.asm 1713]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1713      P:04D3 67E800  [4 -     3162]            move              x:(r0+n0),r7
**** 1714 [opt_adpcm-v1.asm 1714]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1714      P:04D4 47E700  [2 -     3164]            move              x:(r7),y1
1715      P:04D5 200079  [2 -     3166]            tfr     y1,b
1716      P:04D6 21AF00  [2 -     3168]            move              b1,b
1717      P:04D7 060AA0  [4 -     3172]            rep     #10
1718      P:04D8 20002A  [2 -     3174]            asr     b
1719                                     ; **************************************************
1720                                     ;   
1721                                     ;   /* UPB */
1722                                     ;   DQMAG = *DQ & 16383;
1723                                     ; **************************************************
1724                                     ; **************************************************
1725                                     ;   for (n = 0; n < 6; n++)
1726                                     ; **************************************************
1727      P:04D9 3A0C00  [2 -     3176]            move              #12,n2
1728      P:04DA 381200  [2 -     3178]            move              #18,n0
1729      P:04DB 221200  [2 -     3180]            move              r0,r2
1730      P:04DC 46F400  [4 -     3184]            move              #>65535,y0
                 00FFFF
1731      P:04DE 21AF00  [2 -     3186]            move              b1,b
1732      P:04DF 21A400  [2 -     3188]            move              b1,x0
1733      P:04E0 57E800  [4 -     3192]            move              x:(r0+n0),b
1734      P:04E1 380B4B  [2 -     3194]            eor     x0,b      #11,n0
1735      P:04E2 21AF00  [2 -     3196]            move              b1,b
1736      P:04E3 21A700  [2 -     3198]            move              b1,y1
1737      P:04E4 44F400  [4 -     3202]            move              #>16383,x0
                 003FFF
1738      P:04E6 476800  [4 -     3206]            move              y1,x:(r0+n0)
1739      P:04E7 382800  [2 -     3208]            move              #40,n0






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 37



1740      P:04E8 47E100  [2 -     3210]            move              x:(r1),y1
1741      P:04E9 476879  [4 -     3214]            tfr     y1,b      y1,x:(r0+n0)
1742      P:04EA 38254E  [2 -     3216]            and     x0,b      #37,n0
1743      P:04EB 21AF00  [2 -     3218]            move              b1,b
1744      P:04EC 240000  [2 -     3220]            move              #0,x0
1745      P:04ED 556800  [4 -     3224]            move              b1,x:(r0+n0)
1746      P:04EE 204A00  [2 -     3226]            move              (r2)+n2
1747      P:04EF 060680  [6 -     3232]            do      #6,L109
                 000546
1748                                     L93
1749                                     ; **************************************************
1750                                     ;     {
1751                                     ;       UGB = DQMAG == 0 ? 0 : (U[n] == 0 ? 128 : 65408);
1752                                     ; **************************************************
1753      P:04F1 382500  [2 -     3234]            move              #37,n0
**** 1754 [opt_adpcm-v1.asm 1754]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1754      P:04F2 57E800  [4 -     3238]            move              x:(r0+n0),b
1755      P:04F3 20000B  [2 -     3240]            tst     b
1756      P:04F4 0AF0A2  [6 -     3246]            jne     L87
                 0004F9
1757      P:04F6 250000  [2 -     3248]            move              #0,x1
1758      P:04F7 0AF080  [6 -     3254]            jmp     L88
                 000509
1759                                     L87
1760      P:04F9 382800  [2 -     3256]            move              #40,n0
1761      P:04FA 390600  [2 -     3258]            move              #6,n1
1762      P:04FB 220F00  [2 -     3260]            move              r0,b
1763      P:04FC 200048  [2 -     3262]            add     x0,b
1764      P:04FD 21B100  [2 -     3264]            move              b1,r1
**** 1765 [opt_adpcm-v1.asm 1765]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1765      P:04FE 47E900  [4 -     3268]            move              x:(r1+n1),y1
1766      P:04FF 476879  [4 -     3272]            tfr     y1,b      y1,x:(r0+n0)
1767      P:0500 20000B  [2 -     3274]            tst     b
1768      P:0501 0AF0A2  [6 -     3280]            jne     L89
                 000507
1769      P:0503 45F400  [4 -     3284]            move              #>128,x1
                 000080
1770      P:0505 0AF080  [6 -     3290]            jmp     L90
                 000509
1771                                     L89
1772      P:0507 45F400  [4 -     3294]            move              #>65408,x1
                 00FF80
1773                                     L90
1774                                     L88
1775                                     ; **************************************************
1776                                     ;       BS = B[n] >> 15;
1777                                     ; **************************************************
1778      P:0509 382600  [2 -     3296]            move              #38,n0
1779      P:050A 226F00  [2 -     3298]            move              r3,b
1780      P:050B 200048  [2 -     3300]            add     x0,b
1781      P:050C 21B100  [2 -     3302]            move              b1,r1
**** 1782 [opt_adpcm-v1.asm 1782]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1782      P:050D 47E100  [2 -     3304]            move              x:(r1),y1
1783      P:050E 476879  [4 -     3308]            tfr     y1,b      y1,x:(r0+n0)
1784      P:050F 21AF00  [2 -     3310]            move              b1,b
1785      P:0510 060FA0  [4 -     3314]            rep     #15






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 38



1786      P:0511 20002A  [2 -     3316]            asr     b
1787                                     ; **************************************************
1788                                     ;       ULB = BS == 0 ? (65536 - (B[n] >> 8)) & 65535 :
1789                                     ;       (65536 - ((B[n] >> 8) + 65280)) & 65535;
1790                                     ; **************************************************
1791      P:0512 21AF00  [2 -     3318]            move              b1,b
1792      P:0513 20000B  [2 -     3320]            tst     b
1793      P:0514 0AF0A2  [6 -     3326]            jne     L91
                 000520
1794      P:0516 57E800  [4 -     3330]            move              x:(r0+n0),b
1795      P:0517 21AF00  [2 -     3332]            move              b1,b
1796      P:0518 0608A0  [4 -     3336]            rep     #8
1797      P:0519 20002A  [2 -     3338]            asr     b
1798      P:051A 21AF00  [2 -     3340]            move              b1,b
1799      P:051B 21A700  [2 -     3342]            move              b1,y1
1800      P:051C 57F400  [4 -     3346]            move              #>65536,b
                 010000
1801      P:051E 0AF080  [6 -     3352]            jmp     L117
                 00052C
1802                                     L91
1803      P:0520 226F00  [2 -     3354]            move              r3,b
1804      P:0521 200048  [2 -     3356]            add     x0,b
1805      P:0522 21B100  [2 -     3358]            move              b1,r1
**** 1806 [opt_adpcm-v1.asm 1806]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1806      P:0523 47E100  [2 -     3360]            move              x:(r1),y1
1807      P:0524 200079  [2 -     3362]            tfr     y1,b
1808      P:0525 21AF00  [2 -     3364]            move              b1,b
1809      P:0526 0608A0  [4 -     3368]            rep     #8
1810      P:0527 20002A  [2 -     3370]            asr     b
1811      P:0528 21AF00  [2 -     3372]            move              b1,b
1812      P:0529 21A700  [2 -     3374]            move              b1,y1
1813      P:052A 57F400  [4 -     3378]            move              #>256,b
                 000100
1814                                     L117
1815                                     ; **************************************************
1816                                     ;       UB = (UGB + ULB) & 65535;
1817                                     ; **************************************************
1818                                     ; **************************************************
1819                                     ;       BP[n] = (B[n] + UB) & 65535;
1820                                     ; **************************************************
1821                                     ; **************************************************
1822                                     ; **************************************************
1823      P:052C 38287C  [2 -     3380]            sub     y1,b      #40,n0
1824      P:052D 20005E  [2 -     3382]            and     y0,b
1825      P:052E 21AF00  [2 -     3384]            move              b1,b
1826      P:052F 556869  [4 -     3388]            tfr     x1,b      b1,x:(r0+n0)
1827      P:0530 47E800  [4 -     3392]            move              x:(r0+n0),y1
1828      P:0531 200078  [2 -     3394]            add     y1,b
1829      P:0532 20005E  [2 -     3396]            and     y0,b
1830      P:0533 21AF00  [2 -     3398]            move              b1,b
1831      P:0534 556800  [4 -     3402]            move              b1,x:(r0+n0)
1832      P:0535 382600  [2 -     3404]            move              #38,n0
1833      P:0536 226F00  [2 -     3406]            move              r3,b
1834      P:0537 200048  [2 -     3408]            add     x0,b
1835      P:0538 21B100  [2 -     3410]            move              b1,r1
**** 1836 [opt_adpcm-v1.asm 1836]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 39



1836      P:0539 47E100  [2 -     3412]            move              x:(r1),y1
1837      P:053A 476800  [4 -     3416]            move              y1,x:(r0+n0)
1838      P:053B 382800  [2 -     3418]            move              #40,n0
**** 1839 [opt_adpcm-v1.asm 1839]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
1839      P:053C 57E800  [4 -     3422]            move              x:(r0+n0),b
1840      P:053D 200078  [2 -     3424]            add     y1,b
1841      P:053E 20005E  [2 -     3426]            and     y0,b
1842      P:053F 21AF00  [2 -     3428]            move              b1,b
1843      P:0540 21A700  [2 -     3430]            move              b1,y1
1844      P:0541 556849  [4 -     3434]            tfr     x0,b      b1,x:(r0+n0)
1845      P:0542 476200  [2 -     3436]            move              y1,x:(r2)
1846      P:0543 47F400  [4 -     3440]            move              #>1,y1
                 000001
1847      P:0545 205A78  [2 -     3442]            add     y1,b      (r2)+
1848      P:0546 21A400  [2 -     3444]            move              b1,x0
1849                                     L109
1850                                     ; **************************************************
1851                                     ;     }
1852                                     ;   
1853                                     ;   /* TRIGB */
1854                                     ;   for (n = 0; n < 6; n++)
1855                                     ; **************************************************
1856      P:0547 3A0C00  [2 -     3446]            move              #12,n2
1857      P:0548 221200  [2 -     3448]            move              r0,r2
1858      P:0549 45F400  [4 -     3452]            move              #>1,x1
                 000001
1859      P:054B 240000  [2 -     3454]            move              #0,x0
1860      P:054C 204A00  [2 -     3456]            move              (r2)+n2
1861      P:054D 060680  [6 -     3462]            do      #6,L107
                 000562
1862                                     L99
1863                                     ; **************************************************
1864                                     ;     BR[n] = *T == 0 ? BP[n] : 0;
1865                                     ; **************************************************
1866      P:054F 70F400  [4 -     3466]            move              #65532,n0
                 00FFFC
1867      P:0551 220F00  [2 -     3468]            move              r0,b
1868      P:0552 67E848  [4 -     3472]            add     x0,b      x:(r0+n0),r7
1869      P:0553 382800  [2 -     3474]            move              #40,n0
1870      P:0554 21B100  [2 -     3476]            move              b1,r1
1871      P:0555 47E700  [2 -     3478]            move              x:(r7),y1
1872      P:0556 476879  [4 -     3482]            tfr     y1,b      y1,x:(r0+n0)
1873      P:0557 20000B  [2 -     3484]            tst     b
1874      P:0558 0AF0A2  [6 -     3490]            jne     L97
                 00055D
1875      P:055A 46E200  [2 -     3492]            move              x:(r2),y0
1876      P:055B 0AF080  [6 -     3498]            jmp     L98
                 00055E
1877                                     L97
1878      P:055D 260000  [2 -     3500]            move              #0,y0
1879                                     L98
1880                                     ; **************************************************
1881                                     ; **************************************************
1882      P:055E 224F00  [2 -     3502]            move              r2,b
1883      P:055F 466168  [2 -     3504]            add     x1,b      y0,x:(r1)
1884      P:0560 21B249  [2 -     3506]            tfr     x0,b      b1,r2






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 40



1885      P:0561 200068  [2 -     3508]            add     x1,b
1886      P:0562 21A400  [2 -     3510]            move              b1,x0
1887                                     L107
1888                                     ; **************************************************
1889                                     ;   
1890                                     ;   /* FMULT */
1891                                     ;   WB1 = fmult(BR[0], DQ1);
1892                                     ; **************************************************
1893      P:0563 382400  [2 -     3512]            move              #36,n0
1894      P:0564 61F400  [4 -     3516]            move              #Ffmult,r1
                 000000
1895      P:0566 47E800  [4 -     3520]            move              x:(r0+n0),y1
1896      P:0567 475E00  [2 -     3522]            move              y1,x:(r6)+
1897      P:0568 47E000  [2 -     3524]            move              x:(r0),y1
1898      P:0569 475E00  [2 -     3526]            move              y1,x:(r6)+
1899      P:056A 0BE180  [4 -     3530]            jsr     (r1)
1900                                     ; **************************************************
1901                                     ;   WB2 = fmult(BR[1], *DQ2);
1902                                     ; **************************************************
1903      P:056B 382600  [2 -     3532]            move              #38,n0
1904      P:056C 205600  [2 -     3534]            move              (r6)-
1905      P:056D 546800  [4 -     3538]            move              a1,x:(r0+n0)
1906      P:056E 57E800  [4 -     3542]            move              x:(r0+n0),b
1907      P:056F 70F400  [4 -     3546]            move              #65531,n0
                 00FFFB
1908      P:0571 205600  [2 -     3548]            move              (r6)-
1909      P:0572 67E800  [4 -     3552]            move              x:(r0+n0),r7
1910      P:0573 205800  [2 -     3554]            move              (r0)+
1911      P:0574 47E700  [2 -     3556]            move              x:(r7),y1
1912      P:0575 475E00  [2 -     3558]            move              y1,x:(r6)+
1913      P:0576 47D000  [2 -     3560]            move              x:(r0)-,y1
1914      P:0577 475E00  [2 -     3562]            move              y1,x:(r6)+
1915      P:0578 0BE180  [4 -     3566]            jsr     (r1)
1916                                     ; **************************************************
1917                                     ;   WB3 = fmult(BR[2], *DQ3);
1918                                     ; **************************************************
1919      P:0579 70F400  [4 -     3570]            move              #65530,n0
                 00FFFA
1920      P:057B 218400  [2 -     3572]            move              a1,x0
1921      P:057C 67E800  [4 -     3576]            move              x:(r0+n0),r7
1922      P:057D 380200  [2 -     3578]            move              #2,n0
1923      P:057E 47E700  [2 -     3580]            move              x:(r7),y1
1924      P:057F 205600  [2 -     3582]            move              (r6)-
1925      P:0580 205600  [2 -     3584]            move              (r6)-
1926      P:0581 475E00  [2 -     3586]            move              y1,x:(r6)+
1927      P:0582 47E800  [4 -     3590]            move              x:(r0+n0),y1
1928      P:0583 475E00  [2 -     3592]            move              y1,x:(r6)+
1929      P:0584 0BE180  [4 -     3596]            jsr     (r1)
1930                                     ; **************************************************
1931                                     ;   WB4 = fmult(BR[3], *DQ4);
1932                                     ; **************************************************
1933      P:0585 70F400  [4 -     3600]            move              #65529,n0
                 00FFF9
1934      P:0587 218500  [2 -     3602]            move              a1,x1
1935      P:0588 67E800  [4 -     3606]            move              x:(r0+n0),r7
1936      P:0589 380300  [2 -     3608]            move              #3,n0






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 41



1937      P:058A 47E700  [2 -     3610]            move              x:(r7),y1
1938      P:058B 205600  [2 -     3612]            move              (r6)-
1939      P:058C 205600  [2 -     3614]            move              (r6)-
1940      P:058D 475E00  [2 -     3616]            move              y1,x:(r6)+
1941      P:058E 47E800  [4 -     3620]            move              x:(r0+n0),y1
1942      P:058F 475E00  [2 -     3622]            move              y1,x:(r6)+
1943      P:0590 0BE180  [4 -     3626]            jsr     (r1)
1944                                     ; **************************************************
1945                                     ;   WB5 = fmult(BR[4], *DQ5);
1946                                     ; **************************************************
1947      P:0591 70F400  [4 -     3630]            move              #65528,n0
                 00FFF8
1948      P:0593 218600  [2 -     3632]            move              a1,y0
1949      P:0594 67E800  [4 -     3636]            move              x:(r0+n0),r7
1950      P:0595 380400  [2 -     3638]            move              #4,n0
1951      P:0596 47E700  [2 -     3640]            move              x:(r7),y1
1952      P:0597 205600  [2 -     3642]            move              (r6)-
1953      P:0598 205600  [2 -     3644]            move              (r6)-
1954      P:0599 475E00  [2 -     3646]            move              y1,x:(r6)+
1955      P:059A 47E800  [4 -     3650]            move              x:(r0+n0),y1
1956      P:059B 475E00  [2 -     3652]            move              y1,x:(r6)+
1957      P:059C 0BE180  [4 -     3656]            jsr     (r1)
1958                                     ; **************************************************
1959                                     ;   WB6 = fmult(BR[5], *DQ6);
1960                                     ; **************************************************
1961      P:059D 382700  [2 -     3658]            move              #39,n0
1962      P:059E 205600  [2 -     3660]            move              (r6)-
1963      P:059F 546800  [4 -     3664]            move              a1,x:(r0+n0)
1964      P:05A0 70F400  [4 -     3668]            move              #65527,n0
                 00FFF7
1965      P:05A2 205600  [2 -     3670]            move              (r6)-
1966      P:05A3 67E800  [4 -     3674]            move              x:(r0+n0),r7
1967      P:05A4 380500  [2 -     3676]            move              #5,n0
1968      P:05A5 47E700  [2 -     3678]            move              x:(r7),y1
1969      P:05A6 475E00  [2 -     3680]            move              y1,x:(r6)+
1970      P:05A7 47E800  [4 -     3684]            move              x:(r0+n0),y1
1971      P:05A8 475E00  [2 -     3686]            move              y1,x:(r6)+
1972      P:05A9 0BE180  [4 -     3690]            jsr     (r1)
1973                                     ; **************************************************
1974                                     ;   
1975                                     ;   /* ACCUM */
1976                                     ;   SEZI = (((((((((WB1 + WB2) & 65535) + WB3) & 65535)
1977                                     ;             + WB4) & 65535) + WB5) & 65535) + WB6) & 65535;
1978                                     ; **************************************************
1979                                     ; **************************************************
1980                                     ;   SEI = (((SEZI + WA2) & 65535) + WA1) & 65535;
1981                                     ; **************************************************
1982                                     ; **************************************************
1983                                     ;   *SEZ = SEZI >> 1;
1984                                     ; **************************************************
1985                                     ; **************************************************
1986                                     ;   *SE = SEI >> 1;
1987                                     ; **************************************************
1988      P:05AA 382848  [2 -     3692]            add     x0,b      #40,n0
1989      P:05AB 44F400  [4 -     3696]            move              #>65535,x0
                 00FFFF






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 42



1990      P:05AD 54684E  [4 -     3700]            and     x0,b      a1,x:(r0+n0)
1991      P:05AE 382700  [2 -     3702]            move              #39,n0
1992      P:05AF 21AF00  [2 -     3704]            move              b1,b
1993      P:05B0 47E868  [4 -     3708]            add     x1,b      x:(r0+n0),y1
1994      P:05B1 38284E  [2 -     3710]            and     x0,b      #40,n0
1995      P:05B2 21AF00  [2 -     3712]            move              b1,b
1996      P:05B3 205658  [2 -     3714]            add     y0,b      (r6)-
1997      P:05B4 20564E  [2 -     3716]            and     x0,b      (r6)-
1998      P:05B5 21AF00  [2 -     3718]            move              b1,b
1999      P:05B6 47E878  [4 -     3722]            add     y1,b      x:(r0+n0),y1
2000      P:05B7 38264E  [2 -     3724]            and     x0,b      #38,n0
2001      P:05B8 21AF00  [2 -     3726]            move              b1,b
2002      P:05B9 200078  [2 -     3728]            add     y1,b
2003      P:05BA 20004E  [2 -     3730]            and     x0,b
2004      P:05BB 21AF00  [2 -     3732]            move              b1,b
2005      P:05BC 556800  [4 -     3736]            move              b1,x:(r0+n0)
2006      P:05BD 381F00  [2 -     3738]            move              #31,n0
**** 2007 [opt_adpcm-v1.asm 2007]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2007      P:05BE 47E800  [4 -     3742]            move              x:(r0+n0),y1
2008      P:05BF 381E78  [2 -     3744]            add     y1,b      #30,n0
2009      P:05C0 20004E  [2 -     3746]            and     x0,b
2010      P:05C1 47E800  [4 -     3750]            move              x:(r0+n0),y1
2011      P:05C2 381600  [2 -     3752]            move              #22,n0
2012      P:05C3 21AF00  [2 -     3754]            move              b1,b
2013      P:05C4 200078  [2 -     3756]            add     y1,b
2014      P:05C5 20004E  [2 -     3758]            and     x0,b
2015      P:05C6 21AF00  [2 -     3760]            move              b1,b
2016      P:05C7 556800  [4 -     3764]            move              b1,x:(r0+n0)
2017      P:05C8 382600  [2 -     3766]            move              #38,n0
**** 2018 [opt_adpcm-v1.asm 2018]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2018      P:05C9 57E800  [4 -     3770]            move              x:(r0+n0),b
2019      P:05CA 70F400  [4 -     3774]            move              #65518,n0
                 00FFEE
2020      P:05CC 21AF00  [2 -     3776]            move              b1,b
2021      P:05CD 67E82A  [4 -     3780]            asr     b         x:(r0+n0),r7
2022      P:05CE 381600  [2 -     3782]            move              #22,n0
2023      P:05CF 21AF00  [2 -     3784]            move              b1,b
2024      P:05D0 21A700  [2 -     3786]            move              b1,y1
2025      P:05D1 476700  [2 -     3788]            move              y1,x:(r7)
2026      P:05D2 57E800  [4 -     3792]            move              x:(r0+n0),b
2027      P:05D3 21AF00  [2 -     3794]            move              b1,b
2028                                     ; **************************************************
2029                                     ;   
2030                                     ;   /* STATE update */
2031                                     ;   *PK2 = *PK1;
2032                                     ; **************************************************
2033                                     ; **************************************************
2034                                     ;   *PK1 = PK0;
2035                                     ; **************************************************
2036                                     ; **************************************************
2037                                     ;   *SR2 = SR1;
2038                                     ; **************************************************
2039                                     ; **************************************************
2040                                     ;   *A1 = A1R;
2041                                     ; **************************************************
2042                                     ; **************************************************






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 43



2043                                     ;   *A2 = A2R;
2044                                     ; **************************************************
2045                                     ; **************************************************
2046                                     ;   for (n = 0; n < 6; n++)
2047                                     ; **************************************************
2048      P:05D4 70F42A  [4 -     3798]            asr     b         #65519,n0
                 00FFEF
2049      P:05D6 221100  [2 -     3800]            move              r0,r1
2050      P:05D7 67E800  [4 -     3804]            move              x:(r0+n0),r7
2051      P:05D8 70F400  [4 -     3808]            move              #65525,n0
                 00FFF5
2052      P:05DA 227200  [2 -     3810]            move              r3,r2
2053      P:05DB 21AF00  [2 -     3812]            move              b1,b
2054      P:05DC 21A700  [2 -     3814]            move              b1,y1
2055      P:05DD 476700  [2 -     3816]            move              y1,x:(r7)
2056      P:05DE 67E800  [4 -     3820]            move              x:(r0+n0),r7
2057      P:05DF 382800  [2 -     3822]            move              #40,n0
2058      P:05E0 47E700  [2 -     3824]            move              x:(r7),y1
2059      P:05E1 476800  [4 -     3828]            move              y1,x:(r0+n0)
2060      P:05E2 70F400  [4 -     3832]            move              #65524,n0
                 00FFF4
**** 2061 [opt_adpcm-v1.asm 2061]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2061      P:05E4 67E800  [4 -     3836]            move              x:(r0+n0),r7
2062      P:05E5 70F400  [4 -     3840]            move              #65525,n0
                 00FFF5
2063      P:05E7 476700  [2 -     3842]            move              y1,x:(r7)
2064      P:05E8 67E800  [4 -     3846]            move              x:(r0+n0),r7
2065      P:05E9 381400  [2 -     3848]            move              #20,n0
**** 2066 [opt_adpcm-v1.asm 2066]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2066      P:05EA 47E800  [4 -     3852]            move              x:(r0+n0),y1
2067      P:05EB 70F400  [4 -     3856]            move              #65523,n0
                 00FFF3
2068      P:05ED 476700  [2 -     3858]            move              y1,x:(r7)
2069      P:05EE 67E800  [4 -     3862]            move              x:(r0+n0),r7
2070      P:05EF 381800  [2 -     3864]            move              #24,n0
**** 2071 [opt_adpcm-v1.asm 2071]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2071      P:05F0 47E800  [4 -     3868]            move              x:(r0+n0),y1
2072      P:05F1 381C00  [2 -     3870]            move              #28,n0
2073      P:05F2 476700  [2 -     3872]            move              y1,x:(r7)
2074      P:05F3 47E800  [4 -     3876]            move              x:(r0+n0),y1
2075      P:05F4 381D00  [2 -     3878]            move              #29,n0
2076      P:05F5 476400  [2 -     3880]            move              y1,x:(r4)
2077      P:05F6 47E800  [4 -     3884]            move              x:(r0+n0),y1
2078      P:05F7 476500  [2 -     3886]            move              y1,x:(r5)
2079      P:05F8 060680  [6 -     3892]            do      #6,L105
                 0005FB
2080                                     L103
2081                                     ; **************************************************
2082                                     ;     B[n] = BR[n];
2083                                     ; **************************************************
2084                                     ; **************************************************
2085                                     ; **************************************************
2086      P:05FA 56D900  [2 -     3894]            move              x:(r1)+,a
2087      P:05FB 545A00  [2 -     3896]            move              a1,x:(r2)+
2088                                     L105
2089                                     ; **************************************************






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 44



2090                                     ;   *DQ7 = *DQ6;
2091                                     ; **************************************************
2092                                     ; **************************************************
2093                                     ;   *DQ6 = *DQ5;
2094                                     ; **************************************************
2095                                     ; **************************************************
2096                                     ;   *DQ5 = *DQ4;
2097                                     ; **************************************************
2098                                     ; **************************************************
2099                                     ;   *DQ4 = *DQ3;
2100                                     ; **************************************************
2101                                     ; **************************************************
2102                                     ;   *DQ3 = *DQ2;
2103                                     ; **************************************************
2104                                     ; **************************************************
2105                                     ;   *DQ2 = DQ1;
2106                                     ; **************************************************
2107                                     ; **************************************************
2108                                     ;   
2109                                     ;   S_E = *SE;
2110                                     ; **************************************************
2111                                     ; **************************************************
2112                                     ;   A_2 = *A2;
2113                                     ; **************************************************
2114                                     ; **************************************************
2115                                     ;   
2116                                     ; 
2117                                     ; }
2118                                     ; **************************************************
2119      P:05FC 70F400  [4 -     3900]            move              #65527,n0
                 00FFF7
2120      P:05FE 205600  [2 -     3902]            move              (r6)-
2121      P:05FF 67E800  [4 -     3906]            move              x:(r0+n0),r7
2122      P:0600 70F400  [4 -     3910]            move              #65526,n0
                 00FFF6
2123      P:0602 47E700  [2 -     3912]            move              x:(r7),y1
2124      P:0603 67E800  [4 -     3916]            move              x:(r0+n0),r7
2125      P:0604 70F400  [4 -     3920]            move              #65528,n0
                 00FFF8
2126      P:0606 476700  [2 -     3922]            move              y1,x:(r7)
2127      P:0607 67E800  [4 -     3926]            move              x:(r0+n0),r7
2128      P:0608 70F400  [4 -     3930]            move              #65527,n0
                 00FFF7
2129      P:060A 47E700  [2 -     3932]            move              x:(r7),y1
2130      P:060B 67E800  [4 -     3936]            move              x:(r0+n0),r7
2131      P:060C 70F400  [4 -     3940]            move              #65529,n0
                 00FFF9
2132      P:060E 476700  [2 -     3942]            move              y1,x:(r7)
2133      P:060F 67E800  [4 -     3946]            move              x:(r0+n0),r7
2134      P:0610 70F400  [4 -     3950]            move              #65528,n0
                 00FFF8
2135      P:0612 47E700  [2 -     3952]            move              x:(r7),y1
2136      P:0613 67E800  [4 -     3956]            move              x:(r0+n0),r7
2137      P:0614 70F400  [4 -     3960]            move              #65530,n0
                 00FFFA
2138      P:0616 476700  [2 -     3962]            move              y1,x:(r7)






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 45



2139      P:0617 67E800  [4 -     3966]            move              x:(r0+n0),r7
2140      P:0618 70F400  [4 -     3970]            move              #65529,n0
                 00FFF9
2141      P:061A 47E700  [2 -     3972]            move              x:(r7),y1
2142      P:061B 67E800  [4 -     3976]            move              x:(r0+n0),r7
2143      P:061C 70F400  [4 -     3980]            move              #65531,n0
                 00FFFB
2144      P:061E 476700  [2 -     3982]            move              y1,x:(r7)
2145      P:061F 67E800  [4 -     3986]            move              x:(r0+n0),r7
2146      P:0620 70F400  [4 -     3990]            move              #65530,n0
                 00FFFA
2147      P:0622 47E700  [2 -     3992]            move              x:(r7),y1
2148      P:0623 67E800  [4 -     3996]            move              x:(r0+n0),r7
2149      P:0624 70F400  [4 -     4000]            move              #65531,n0
                 00FFFB
2150      P:0626 476700  [2 -     4002]            move              y1,x:(r7)
2151      P:0627 67E800  [4 -     4006]            move              x:(r0+n0),r7
2152      P:0628 382400  [2 -     4008]            move              #36,n0
**** 2153 [opt_adpcm-v1.asm 2153]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2153      P:0629 47E800  [4 -     4012]            move              x:(r0+n0),y1
2154      P:062A 70F400  [4 -     4016]            move              #65519,n0
                 00FFEF
2155      P:062C 476700  [2 -     4018]            move              y1,x:(r7)
2156      P:062D 67E800  [4 -     4022]            move              x:(r0+n0),r7
2157      P:062E 382800  [2 -     4024]            move              #40,n0
2158      P:062F 47E700  [2 -     4026]            move              x:(r7),y1
2159      P:0630 477000  [4 -     4030]            move              y1,x:FS_E
                 00006A
2160      P:0632 47E500  [2 -     4032]            move              x:(r5),y1
2161      P:0633 476800  [4 -     4036]            move              y1,x:(r0+n0)
2162      P:0634 477000  [4 -     4040]            move              y1,x:FA_2
                 00006F
2163      P:0636 67D600  [2 -     4042]            move              x:(r6)-,r7
2164      P:0637 65D600  [2 -     4044]            move              x:(r6)-,r5
2165      P:0638 64D600  [2 -     4046]            move              x:(r6)-,r4
2166      P:0639 63D600  [2 -     4048]            move              x:(r6)-,r3
2167      P:063A 62D600  [2 -     4050]            move              x:(r6)-,r2
2168      P:063B 61D600  [2 -     4052]            move              x:(r6)-,r1
2169      P:063C 47D600  [2 -     4054]            move              x:(r6)-,y1
2170      P:063D 46D600  [2 -     4056]            move              x:(r6)-,y0
2171      P:063E 45D600  [2 -     4058]            move              x:(r6)-,x1
2172      P:063F 44D600  [2 -     4060]            move              x:(r6)-,x0
2173      P:0640 57D600  [2 -     4062]            move              x:(r6)-,b
2174      P:0641 51E600  [2 -     4064]            move              x:(r6),b0
2175      P:0642 205000  [2 -     4066]            move              (r0)-
2176      P:0643 05D03C  [2 -     4068]            move              x:(r0)-,ssh
2177      P:0644 221600  [2 -     4070]            move              r0,r6
2178      P:0645 60E000  [2 -     4072]            move              x:(r0),r0
2179      P:0646 00000C  [4 -     4076]            rts
2180   
2181                                               global  Fcoding_adj
2182                                     Fcoding_adj
2183                                     ; **************************************************
2184                                     ; **************************************************
2185                                     ; **************************************************
2186                                     ; 






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 46



2187                                     ; void coding_adj(void)
2188                                     ; {
2189                                     ;   /*
2190                                     ;    * coding_adjustment
2191                                     ;    *
2192                                     ;    * Input signals:  I, SP, S_E, Y
2193                                     ;    * Output signals: SD
2194                                     ;    */
2195                                     ; 
2196                                     ;   /* Just passing a SP (16TC) through */
2197                                     ;   /* rest of the signals is ignored */
2198                                     ;   SD = SP;
2199                                     ; **************************************************
2200                                     ; **************************************************
2201                                     ; }
2202                                     ; **************************************************
2203      P:0647 56F000  [4 -     4080]            move              x:FSP,a
                 000068
2204      P:0649 547000  [4 -     4084]            move              a1,x:FSD
                 00006B
2205      P:064B 00000C  [4 -     4088]            rts
2206   
2207      X:003C                                   org     x:
2208                                     F___qtab0
2209      X:003C                                   dc      2048
2210      X:003D                                   dc      4
2211      X:003E                                   dc      135
2212      X:003F                                   dc      213
2213      X:0040                                   dc      273
2214      X:0041                                   dc      323
2215      X:0042                                   dc      373
2216      X:0043                                   dc      425
2217      X:0044                                   dc      425
2218      X:0045                                   dc      373
2219      X:0046                                   dc      323
2220      X:0047                                   dc      273
2221      X:0048                                   dc      213
2222      X:0049                                   dc      135
2223      X:004A                                   dc      4
2224      X:004B                                   dc      2048
2225      P:064C                                   org     p:
2226                                               global  Fiadpt_quant
2227                                     Fiadpt_quant
2228                                     ; **************************************************
2229                                     ; **************************************************
2230                                     ; **************************************************
2231                                     ; 
2232                                     ; void iadpt_quant(int* DQ, int* Y)
2233                                     ; {
2234                                     ;   /*
2235                                     ;    * inverse adaptive quantizer
2236                                     ;    * 
2237                                     ;    * Input signals:  I, Y
2238                                     ;    * Output signals: DQ
2239                                     ;    */
2240                                     ;   






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 47



2241                                     ;   static int qtab[] =
2242                                     ;     {
2243                                     ;       2048, 4, 135, 213, 273, 323, 373, 425,
2244                                     ;       425, 373, 323, 273, 213, 135, 4, 2048,
2245                                     ;     } ;
2246                                     ;   int DQS, DQLN, DQL, DS, DEX, DMN, DQT, DQMAG;
2247                                     ;   
2248                                     ;   /* RECONST */
2249                                     ;   DQS = I >> 3;
2250                                     ; **************************************************
2251      P:064C 3E0300  [2 -     4090]            move              #3,n6
2252      P:064D 605E00  [2 -     4092]            move              r0,x:(r6)+
2253      P:064E 205E00  [2 -     4094]            move              (r6)+
2254      P:064F 22D000  [2 -     4096]            move              r6,r0
2255      P:0650 204E00  [2 -     4098]            move              (r6)+n6
2256      P:0651 515E00  [2 -     4100]            move              b0,x:(r6)+
2257      P:0652 555E00  [2 -     4102]            move              b1,x:(r6)+
2258      P:0653 445E00  [2 -     4104]            move              x0,x:(r6)+
2259      P:0654 455E00  [2 -     4106]            move              x1,x:(r6)+
2260      P:0655 615E00  [2 -     4108]            move              r1,x:(r6)+
2261      P:0656 625E00  [2 -     4110]            move              r2,x:(r6)+
2262      P:0657 56F000  [4 -     4114]            move              x:FI,a
                 00006C
2263      P:0659 200009  [2 -     4116]            tfr     a,b
2264      P:065A 21AF00  [2 -     4118]            move              b1,b
2265      P:065B 0603A0  [4 -     4122]            rep     #3
2266      P:065C 20002A  [2 -     4124]            asr     b
2267                                     ; **************************************************
2268                                     ;   DQLN = qtab[I];
2269                                     ; **************************************************
2270                                     ; **************************************************
2271                                     ;   
2272                                     ;   /* ADDA */
2273                                     ;   DQL = (DQLN + (*Y >> 2)) & 4095;
2274                                     ; **************************************************
2275                                     ; **************************************************
2276                                     ;   
2277                                     ;   /* ANTILOG */
2278                                     ;   DS = DQL >> 11;
2279                                     ; **************************************************
2280      P:065D 70F400  [4 -     4128]            move              #65532,n0
                 00FFFC
2281      P:065F 61F400  [4 -     4132]            move              #F___qtab0,r1
                 00003C
2282      P:0661 44F400  [4 -     4136]            move              #>4095,x0
                 000FFF
2283      P:0663 21AF00  [2 -     4138]            move              b1,b
2284      P:0664 556000  [2 -     4140]            move              b1,x:(r0)
2285      P:0665 62E800  [4 -     4144]            move              x:(r0+n0),r2
2286      P:0666 222F00  [2 -     4146]            move              r1,b
2287      P:0667 45E218  [2 -     4148]            add     a,b       x:(r2),x1
2288      P:0668 21B169  [2 -     4150]            tfr     x1,b      b1,r1
2289      P:0669 21AF00  [2 -     4152]            move              b1,b
2290      P:066A 56E12A  [2 -     4154]            asr     b         x:(r1),a
2291      P:066B 20002A  [2 -     4156]            asr     b
2292      P:066C 21AF00  [2 -     4158]            move              b1,b






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 48



2293      P:066D 21A500  [2 -     4160]            move              b1,x1
2294      P:066E 200060  [2 -     4162]            add     x1,a
2295      P:066F 200046  [2 -     4164]            and     x0,a
2296      P:0670 218E00  [2 -     4166]            move              a1,a
2297      P:0671 200009  [2 -     4168]            tfr     a,b
2298      P:0672 21AF00  [2 -     4170]            move              b1,b
2299      P:0673 060BA0  [4 -     4174]            rep     #11
2300      P:0674 20002A  [2 -     4176]            asr     b
2301                                     ; **************************************************
2302                                     ;   DEX = (DQL >> 7) & 15;
2303                                     ; **************************************************
2304      P:0675 380200  [2 -     4178]            move              #2,n0
2305      P:0676 21AF00  [2 -     4180]            move              b1,b
2306      P:0677 556809  [4 -     4184]            tfr     a,b       b1,x:(r0+n0)
2307      P:0678 21AF00  [2 -     4186]            move              b1,b
2308      P:0679 0607A0  [4 -     4190]            rep     #7
2309      P:067A 20002A  [2 -     4192]            asr     b
2310                                     ; **************************************************
2311                                     ;   DMN = DQL & 127;
2312                                     ; **************************************************
2313                                     ; **************************************************
2314                                     ;   DQT = (1  << 7) + DMN;
2315                                     ; **************************************************
2316                                     ; **************************************************
2317                                     ;   DQMAG = DS == 0 ? (DQT << 7) >> (14 - DEX) : 0;
2318                                     ; **************************************************
2319      P:067B 44F400  [4 -     4196]            move              #>15,x0
                 00000F
2320      P:067D 21AF00  [2 -     4198]            move              b1,b
2321      P:067E 44F44E  [4 -     4202]            and     x0,b      #>127,x0
                 00007F
2322      P:0680 21AF46  [2 -     4204]            and     x0,a      b1,b
2323      P:0681 218E00  [2 -     4206]            move              a1,a
2324      P:0682 44F400  [4 -     4210]            move              #>128,x0
                 000080
2325      P:0684 205840  [2 -     4212]            add     x0,a      (r0)+
2326      P:0685 555000  [2 -     4214]            move              b1,x:(r0)-
2327      P:0686 57E800  [4 -     4218]            move              x:(r0+n0),b
2328      P:0687 20000B  [2 -     4220]            tst     b
2329      P:0688 0AF0A2  [6 -     4226]            jne     L124
                 00069C
2330      P:068A 0607A0  [4 -     4230]            rep     #7
2331      P:068B 200032  [2 -     4232]            asl     a
2332      P:068C 218E00  [2 -     4234]            move              a1,a
2333      P:068D 205809  [2 -     4236]            tfr     a,b       (r0)+
2334      P:068E 45D000  [2 -     4238]            move              x:(r0)-,x1
2335      P:068F 56F400  [4 -     4242]            move              #>14,a
                 00000E
2336      P:0691 200064  [2 -     4244]            sub     x1,a
2337      P:0692 200003  [2 -     4246]            tst     a
2338      P:0693 0AF0AA  [6 -     4252]            jeq     L126
                 000699
2339      P:0695 21AF00  [2 -     4254]            move              b1,b
2340      P:0696 06CE20  [4 -     4258]            rep     a
2341      P:0697 20002A  [2 -     4260]            asr     b
2342      P:0698 21AF00  [2 -     4262]            move              b1,b






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 49



2343                                     L126
2344      P:0699 556800  [4 -     4266]            move              b1,x:(r0+n0)
2345      P:069A 0AF080  [6 -     4272]            jmp     L125
                 00069F
2346                                     L124
2347      P:069C 380200  [2 -     4274]            move              #2,n0
2348      P:069D 250000  [2 -     4276]            move              #0,x1
2349      P:069E 456800  [4 -     4280]            move              x1,x:(r0+n0)
2350                                     L125
2351                                     ; **************************************************
2352                                     ;   *DQ = (DQS << 14) + DQMAG;
2353                                     ; **************************************************
2354      P:069F 56E000  [2 -     4282]            move              x:(r0),a
2355      P:06A0 060EA0  [4 -     4286]            rep     #14
2356      P:06A1 200032  [2 -     4288]            asl     a
2357                                     ; **************************************************
2358                                     ; }
2359                                     ; **************************************************
2360      P:06A2 380200  [2 -     4290]            move              #2,n0
2361      P:06A3 218E00  [2 -     4292]            move              a1,a
2362      P:06A4 45E800  [4 -     4296]            move              x:(r0+n0),x1
2363      P:06A5 70F460  [4 -     4300]            add     x1,a      #65533,n0
                 00FFFD
2364      P:06A7 205600  [2 -     4302]            move              (r6)-
2365      P:06A8 62E800  [4 -     4306]            move              x:(r0+n0),r2
2366      P:06A9 205000  [2 -     4308]            move              (r0)-
2367      P:06AA 546200  [2 -     4310]            move              a1,x:(r2)
2368      P:06AB 62D600  [2 -     4312]            move              x:(r6)-,r2
2369      P:06AC 61D600  [2 -     4314]            move              x:(r6)-,r1
2370      P:06AD 45D600  [2 -     4316]            move              x:(r6)-,x1
2371      P:06AE 44D600  [2 -     4318]            move              x:(r6)-,x0
2372      P:06AF 57D600  [2 -     4320]            move              x:(r6)-,b
2373      P:06B0 51E600  [2 -     4322]            move              x:(r6),b0
2374      P:06B1 205000  [2 -     4324]            move              (r0)-
2375      P:06B2 221600  [2 -     4326]            move              r0,r6
2376      P:06B3 60E000  [2 -     4328]            move              x:(r0),r0
2377      P:06B4 00000C  [4 -     4332]            rts
2378   
2379                                               global  Fadpt_quant
2380                                     Fadpt_quant
2381                                     ; **************************************************
2382                                     ; **************************************************
2383                                     ; **************************************************
2384                                     ; 
2385                                     ; void adpt_quant(int* Y)
2386                                     ; {
2387                                     ;   /*
2388                                     ;    * adaptive quantizer
2389                                     ;    *
2390                                     ;    * Input signals:  D, Y
2391                                     ;    * Output signals: I
2392                                     ;    */
2393                                     ; 
2394                                     ;   int DS, DQM, DL, DLN, EXP, MANT;
2395                                     ;   
2396                                     ;   /* LOG */






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 50



2397                                     ;   DS = D >> 15;
2398                                     ; **************************************************
2399      P:06B5 3E0300  [2 -     4334]            move              #3,n6
2400      P:06B6 605E00  [2 -     4336]            move              r0,x:(r6)+
2401      P:06B7 205E00  [2 -     4338]            move              (r6)+
2402      P:06B8 22D000  [2 -     4340]            move              r6,r0
2403      P:06B9 204E00  [2 -     4342]            move              (r6)+n6
2404      P:06BA 515E00  [2 -     4344]            move              b0,x:(r6)+
2405      P:06BB 555E00  [2 -     4346]            move              b1,x:(r6)+
2406      P:06BC 445E00  [2 -     4348]            move              x0,x:(r6)+
2407      P:06BD 455E00  [2 -     4350]            move              x1,x:(r6)+
2408      P:06BE 615E00  [2 -     4352]            move              r1,x:(r6)+
2409      P:06BF 56F000  [4 -     4356]            move              x:FD,a
                 00006D
2410      P:06C1 200009  [2 -     4358]            tfr     a,b
2411      P:06C2 21AF00  [2 -     4360]            move              b1,b
2412      P:06C3 060FA0  [4 -     4364]            rep     #15
2413      P:06C4 20002A  [2 -     4366]            asr     b
2414                                     ; **************************************************
2415                                     ;   DQM = DS == 0 ? D : (65536 - D) & 32767;
2416                                     ; **************************************************
2417      P:06C5 21AF00  [2 -     4368]            move              b1,b
2418      P:06C6 55600B  [2 -     4370]            tst     b         b1,x:(r0)
2419      P:06C7 0AF0A2  [6 -     4376]            jne     L128
                 0006CD
2420      P:06C9 205800  [2 -     4378]            move              (r0)+
2421      P:06CA 545000  [2 -     4380]            move              a1,x:(r0)-
2422      P:06CB 0AF080  [6 -     4386]            jmp     L129
                 0006DA
2423                                     L128
2424      P:06CD 380200  [2 -     4388]            move              #2,n0
2425      P:06CE 45F000  [4 -     4392]            move              x:FD,x1
                 00006D
2426      P:06D0 44F400  [4 -     4396]            move              #>32767,x0
                 007FFF
2427      P:06D2 56F400  [4 -     4400]            move              #>65536,a
                 010000
2428      P:06D4 456864  [4 -     4404]            sub     x1,a      x1,x:(r0+n0)
2429      P:06D5 205809  [2 -     4406]            tfr     a,b       (r0)+
2430      P:06D6 54504E  [2 -     4408]            and     x0,b      a1,x:(r0)-
2431      P:06D7 21AF00  [2 -     4410]            move              b1,b
2432      P:06D8 205800  [2 -     4412]            move              (r0)+
2433      P:06D9 555000  [2 -     4414]            move              b1,x:(r0)-
2434                                     L129
2435                                     ; **************************************************
2436                                     ;   for (EXP = 1; (DQM >> EXP) != 0; EXP++)
2437                                     ; **************************************************
2438      P:06DA 380200  [2 -     4416]            move              #2,n0
2439      P:06DB 45F400  [4 -     4420]            move              #>1,x1
                 000001
2440      P:06DD 456869  [4 -     4424]            tfr     x1,b      x1,x:(r0+n0)
2441      P:06DE 20580B  [2 -     4426]            tst     b         (r0)+
2442      P:06DF 56D000  [2 -     4428]            move              x:(r0)-,a
2443      P:06E0 0AF0AA  [6 -     4434]            jeq     L168
                 0006E6
2444      P:06E2 218E00  [2 -     4436]            move              a1,a






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 51



2445      P:06E3 06CF20  [4 -     4440]            rep     b
2446      P:06E4 200022  [2 -     4442]            asr     a
2447      P:06E5 218E00  [2 -     4444]            move              a1,a
2448                                     L168
2449      P:06E6 200003  [2 -     4446]            tst     a
2450      P:06E7 0AF0AA  [6 -     4452]            jeq     L166
                 0006F9
2451      P:06E9 44E800  [4 -     4456]            move              x:(r0+n0),x0
2452                                     L132
2453      P:06EA 380200  [2 -     4458]            move              #2,n0
**** 2454 [opt_adpcm-v1.asm 2454]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2454      P:06EB 57E800  [4 -     4462]            move              x:(r0+n0),b
2455      P:06EC 200048  [2 -     4464]            add     x0,b
2456      P:06ED 55680B  [4 -     4468]            tst     b         b1,x:(r0+n0)
2457      P:06EE 205800  [2 -     4470]            move              (r0)+
2458      P:06EF 56D000  [2 -     4472]            move              x:(r0)-,a
2459      P:06F0 0AF0AA  [6 -     4478]            jeq     L169
                 0006F6
2460      P:06F2 218E00  [2 -     4480]            move              a1,a
2461      P:06F3 06CF20  [4 -     4484]            rep     b
2462      P:06F4 200022  [2 -     4486]            asr     a
2463      P:06F5 218E00  [2 -     4488]            move              a1,a
2464                                     L169
2465      P:06F6 200003  [2 -     4490]            tst     a
2466      P:06F7 0AF0A2  [6 -     4496]            jne     L132
                 0006EA
2467                                     L166
2468                                     ; **************************************************
2469                                     ;     ;
2470                                     ;   EXP--;
2471                                     ; **************************************************
2472                                     ; **************************************************
2473                                     ;   MANT = ((DQM << 7) >> EXP) & 127;
2474                                     ; **************************************************
2475      P:06F9 380200  [2 -     4498]            move              #2,n0
2476      P:06FA 56F400  [4 -     4502]            move              #>16777215,a
                 FFFFFF
2477      P:06FC 57E800  [4 -     4506]            move              x:(r0+n0),b
2478      P:06FD 205818  [2 -     4508]            add     a,b       (r0)+
2479      P:06FE 56D000  [2 -     4510]            move              x:(r0)-,a
2480      P:06FF 0607A0  [4 -     4514]            rep     #7
2481      P:0700 200032  [2 -     4516]            asl     a
2482      P:0701 218E0B  [2 -     4518]            tst     b         a1,a
2483      P:0702 0AF0AA  [6 -     4524]            jeq     L170
                 000708
2484      P:0704 218E00  [2 -     4526]            move              a1,a
2485      P:0705 06CF20  [4 -     4530]            rep     b
2486      P:0706 200022  [2 -     4532]            asr     a
2487      P:0707 218E00  [2 -     4534]            move              a1,a
2488                                     L170
2489                                     ; **************************************************
2490                                     ;   DL = (EXP << 7) + MANT;
2491                                     ; **************************************************
2492      P:0708 44F400  [4 -     4538]            move              #>127,x0
                 00007F
2493      P:070A 200046  [2 -     4540]            and     x0,a






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 52



2494      P:070B 218E00  [2 -     4542]            move              a1,a
2495      P:070C 0607A0  [4 -     4546]            rep     #7
2496      P:070D 20003A  [2 -     4548]            asl     b
2497                                     ; **************************************************
2498                                     ;   
2499                                     ;   /* SUBTB */
2500                                     ;   DLN = (DL + 4096 - (*Y >> 2)) & 4095;
2501                                     ; **************************************************
2502                                     ; **************************************************
2503                                     ;   
2504                                     ;   /* QUAN */
2505                                     ;   if (DLN > 3971)
2506                                     ; **************************************************
2507      P:070E 70F400  [4 -     4552]            move              #65533,n0
                 00FFFD
2508      P:0710 44F400  [4 -     4556]            move              #>16773120,x0
                 FFF000
2509      P:0712 61E800  [4 -     4560]            move              x:(r0+n0),r1
2510      P:0713 380200  [2 -     4562]            move              #2,n0
2511      P:0714 21AF00  [2 -     4564]            move              b1,b
2512      P:0715 56E118  [2 -     4566]            add     a,b       x:(r1),a
2513      P:0716 218E00  [2 -     4568]            move              a1,a
2514      P:0717 200022  [2 -     4570]            asr     a
2515      P:0718 200022  [2 -     4572]            asr     a
2516      P:0719 218E00  [2 -     4574]            move              a1,a
2517      P:071A 44F440  [4 -     4578]            add     x0,a      #>4095,x0
                 000FFF
2518      P:071C 56F41C  [4 -     4582]            sub     a,b       #>3971,a
                 000F83
2519      P:071E 20004E  [2 -     4584]            and     x0,b
2520      P:071F 21AF00  [2 -     4586]            move              b1,b
2521      P:0720 55680D  [4 -     4590]            cmp     a,b       b1,x:(r0+n0)
2522      P:0721 0AF0AF  [6 -     4596]            jle     L134
                 000729
2523                                     ; **************************************************
2524                                     ;     I = DS ? 0xE : 0x1;
2525                                     ; **************************************************
2526      P:0723 57E000  [2 -     4598]            move              x:(r0),b
2527      P:0724 20000B  [2 -     4600]            tst     b
2528      P:0725 0AF0A2  [6 -     4606]            jne     L167
                 0007AA
2529      P:0727 0AF080  [6 -     4612]            jmp     L164
                 0007AE
2530                                     L134
2531                                     ; **************************************************
2532                                     ;   else if (DLN > 2047)
2533                                     ; **************************************************
2534      P:0729 380200  [2 -     4614]            move              #2,n0
2535      P:072A 56F400  [4 -     4618]            move              #>2047,a
                 0007FF
2536      P:072C 57E800  [4 -     4622]            move              x:(r0+n0),b
2537      P:072D 20000D  [2 -     4624]            cmp     a,b
2538      P:072E 0AF0AF  [6 -     4630]            jle     L138
                 000734
2539                                     ; **************************************************
2540                                     ;     I = 0xF;






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 53



2541                                     ; **************************************************
2542      P:0730 56F400  [4 -     4634]            move              #>15,a
                 00000F
2543      P:0732 0AF080  [6 -     4640]            jmp     L165
                 0007B0
2544                                     L138
2545                                     ; **************************************************
2546                                     ;   else if (DLN > 399)
2547                                     ; **************************************************
2548      P:0734 380200  [2 -     4642]            move              #2,n0
2549      P:0735 56F400  [4 -     4646]            move              #>399,a
                 00018F
2550      P:0737 57E800  [4 -     4650]            move              x:(r0+n0),b
2551      P:0738 20000D  [2 -     4652]            cmp     a,b
2552      P:0739 0AF0AF  [6 -     4658]            jle     L140
                 000747
2553                                     ; **************************************************
2554                                     ;     I = DS ? 0x8 : 0x7;
2555                                     ; **************************************************
2556      P:073B 57E000  [2 -     4660]            move              x:(r0),b
2557      P:073C 20000B  [2 -     4662]            tst     b
2558      P:073D 0AF0AA  [6 -     4668]            jeq     L141
                 000743
2559      P:073F 56F400  [4 -     4672]            move              #>8,a
                 000008
2560      P:0741 0AF080  [6 -     4678]            jmp     L165
                 0007B0
2561                                     L141
2562      P:0743 56F400  [4 -     4682]            move              #>7,a
                 000007
2563      P:0745 0AF080  [6 -     4688]            jmp     L165
                 0007B0
2564                                     L140
2565                                     ; **************************************************
2566                                     ;   else if (DLN > 348)
2567                                     ; **************************************************
2568      P:0747 380200  [2 -     4690]            move              #2,n0
2569      P:0748 56F400  [4 -     4694]            move              #>348,a
                 00015C
2570      P:074A 57E800  [4 -     4698]            move              x:(r0+n0),b
2571      P:074B 20000D  [2 -     4700]            cmp     a,b
2572      P:074C 0AF0AF  [6 -     4706]            jle     L144
                 00075A
2573                                     ; **************************************************
2574                                     ;     I = DS ? 0x9 : 0x6;
2575                                     ; **************************************************
2576      P:074E 57E000  [2 -     4708]            move              x:(r0),b
2577      P:074F 20000B  [2 -     4710]            tst     b
2578      P:0750 0AF0AA  [6 -     4716]            jeq     L145
                 000756
2579      P:0752 56F400  [4 -     4720]            move              #>9,a
                 000009
2580      P:0754 0AF080  [6 -     4726]            jmp     L165
                 0007B0
2581                                     L145
2582      P:0756 56F400  [4 -     4730]            move              #>6,a






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 54



                 000006
2583      P:0758 0AF080  [6 -     4736]            jmp     L165
                 0007B0
2584                                     L144
2585                                     ; **************************************************
2586                                     ;   else if (DLN > 299)
2587                                     ; **************************************************
2588      P:075A 380200  [2 -     4738]            move              #2,n0
2589      P:075B 56F400  [4 -     4742]            move              #>299,a
                 00012B
2590      P:075D 57E800  [4 -     4746]            move              x:(r0+n0),b
2591      P:075E 20000D  [2 -     4748]            cmp     a,b
2592      P:075F 0AF0AF  [6 -     4754]            jle     L148
                 00076D
2593                                     ; **************************************************
2594                                     ;     I = DS ? 0xA : 0x5;       
2595                                     ; **************************************************
2596      P:0761 57E000  [2 -     4756]            move              x:(r0),b
2597      P:0762 20000B  [2 -     4758]            tst     b
2598      P:0763 0AF0AA  [6 -     4764]            jeq     L149
                 000769
2599      P:0765 56F400  [4 -     4768]            move              #>10,a
                 00000A
2600      P:0767 0AF080  [6 -     4774]            jmp     L165
                 0007B0
2601                                     L149
2602      P:0769 56F400  [4 -     4778]            move              #>5,a
                 000005
2603      P:076B 0AF080  [6 -     4784]            jmp     L165
                 0007B0
2604                                     L148
2605                                     ; **************************************************
2606                                     ;   else if (DLN > 245)
2607                                     ; **************************************************
2608      P:076D 380200  [2 -     4786]            move              #2,n0
2609      P:076E 56F400  [4 -     4790]            move              #>245,a
                 0000F5
2610      P:0770 57E800  [4 -     4794]            move              x:(r0+n0),b
2611      P:0771 20000D  [2 -     4796]            cmp     a,b
2612      P:0772 0AF0AF  [6 -     4802]            jle     L152
                 000780
2613                                     ; **************************************************
2614                                     ;     I = DS ? 0xB : 0x4;
2615                                     ; **************************************************
2616      P:0774 57E000  [2 -     4804]            move              x:(r0),b
2617      P:0775 20000B  [2 -     4806]            tst     b
2618      P:0776 0AF0AA  [6 -     4812]            jeq     L153
                 00077C
2619      P:0778 56F400  [4 -     4816]            move              #>11,a
                 00000B
2620      P:077A 0AF080  [6 -     4822]            jmp     L165
                 0007B0
2621                                     L153
2622      P:077C 56F400  [4 -     4826]            move              #>4,a
                 000004
2623      P:077E 0AF080  [6 -     4832]            jmp     L165






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 55



                 0007B0
2624                                     L152
2625                                     ; **************************************************
2626                                     ;   else if (DLN > 177)
2627                                     ; **************************************************
2628      P:0780 380200  [2 -     4834]            move              #2,n0
2629      P:0781 56F400  [4 -     4838]            move              #>177,a
                 0000B1
2630      P:0783 57E800  [4 -     4842]            move              x:(r0+n0),b
2631      P:0784 20000D  [2 -     4844]            cmp     a,b
2632      P:0785 0AF0AF  [6 -     4850]            jle     L156
                 000793
2633                                     ; **************************************************
2634                                     ;     I = DS ? 0xC : 0x3;
2635                                     ; **************************************************
2636      P:0787 57E000  [2 -     4852]            move              x:(r0),b
2637      P:0788 20000B  [2 -     4854]            tst     b
2638      P:0789 0AF0AA  [6 -     4860]            jeq     L157
                 00078F
2639      P:078B 56F400  [4 -     4864]            move              #>12,a
                 00000C
2640      P:078D 0AF080  [6 -     4870]            jmp     L165
                 0007B0
2641                                     L157
2642      P:078F 56F400  [4 -     4874]            move              #>3,a
                 000003
2643      P:0791 0AF080  [6 -     4880]            jmp     L165
                 0007B0
2644                                     L156
2645                                     ; **************************************************
2646                                     ;   else if (DLN > 79)
2647                                     ; **************************************************
2648      P:0793 380200  [2 -     4882]            move              #2,n0
2649      P:0794 56F400  [4 -     4886]            move              #>79,a
                 00004F
2650      P:0796 57E800  [4 -     4890]            move              x:(r0+n0),b
2651      P:0797 20000D  [2 -     4892]            cmp     a,b
2652      P:0798 0AF0AF  [6 -     4898]            jle     L160
                 0007A6
2653                                     ; **************************************************
2654                                     ;     I = DS ? 0xD : 0x2;
2655                                     ; **************************************************
2656      P:079A 57E000  [2 -     4900]            move              x:(r0),b
2657      P:079B 20000B  [2 -     4902]            tst     b
2658      P:079C 0AF0AA  [6 -     4908]            jeq     L161
                 0007A2
2659      P:079E 56F400  [4 -     4912]            move              #>13,a
                 00000D
2660      P:07A0 0AF080  [6 -     4918]            jmp     L165
                 0007B0
2661                                     L161
2662      P:07A2 56F400  [4 -     4922]            move              #>2,a
                 000002
2663      P:07A4 0AF080  [6 -     4928]            jmp     L165
                 0007B0
2664                                     L160






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 56



2665                                     ; **************************************************
2666                                     ;   else
2667                                     ;     I = DS ? 0xE : 0x1;
2668                                     ; **************************************************
2669      P:07A6 57E000  [2 -     4930]            move              x:(r0),b
2670      P:07A7 20000B  [2 -     4932]            tst     b
2671      P:07A8 0AF0AA  [6 -     4938]            jeq     L164
                 0007AE
2672                                     L167
2673      P:07AA 56F400  [4 -     4942]            move              #>14,a
                 00000E
2674      P:07AC 0AF080  [6 -     4948]            jmp     L165
                 0007B0
2675                                     L164
2676      P:07AE 56F400  [4 -     4952]            move              #>1,a
                 000001
2677                                     L165
2678                                     ; **************************************************
2679                                     ;   
2680                                     ; }
2681                                     ; **************************************************
2682      P:07B0 205000  [2 -     4954]            move              (r0)-
2683      P:07B1 205000  [2 -     4956]            move              (r0)-
2684      P:07B2 205600  [2 -     4958]            move              (r6)-
2685      P:07B3 547000  [4 -     4962]            move              a1,x:FI
                 00006C
2686      P:07B5 61D600  [2 -     4964]            move              x:(r6)-,r1
2687      P:07B6 45D600  [2 -     4966]            move              x:(r6)-,x1
2688      P:07B7 44D600  [2 -     4968]            move              x:(r6)-,x0
2689      P:07B8 57D600  [2 -     4970]            move              x:(r6)-,b
2690      P:07B9 51E600  [2 -     4972]            move              x:(r6),b0
2691      P:07BA 221600  [2 -     4974]            move              r0,r6
2692      P:07BB 60E000  [2 -     4976]            move              x:(r0),r0
2693      P:07BC 00000C  [4 -     4980]            rts
2694   
2695                                               global  Ftone_detector
2696                                     Ftone_detector
2697                                     ; **************************************************
2698                                     ; **************************************************
2699                                     ; **************************************************
2700                                     ; 
2701                                     ; void tone_detector(int* DQ, int* T, int* YL, int* t_dr, int* LAST_TR)
2702                                     ; {
2703                                     ;   /*
2704                                     ;    * tone detector
2705                                     ;    *
2706                                     ;    * Input signals:  DQ, A_2, YL
2707                                     ;    * Output signals: T, TDP;
2708                                     ;    */
2709                                     ; 
2710                                     ;   register int tmp; 
2711                                     ;   register int t_d; 
2712                                     ; 
2713                                     ;   /* partial band signal detection */
2714                                     ;   TDP = ((A_2 > 32769) && (A_2 < 53761)) ? 1 : 0 ; 
2715                                     ; **************************************************






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 57



2716      P:07BD 70F400  [4 -     4984]            move              #65530,n0
                 00FFFA
2717      P:07BF 3E0300  [2 -     4986]            move              #3,n6
2718      P:07C0 56F400  [4 -     4990]            move              #>32769,a
                 008001
2719      P:07C2 605E00  [2 -     4992]            move              r0,x:(r6)+
2720      P:07C3 205E00  [2 -     4994]            move              (r6)+
2721      P:07C4 22D000  [2 -     4996]            move              r6,r0
2722      P:07C5 204E00  [2 -     4998]            move              (r6)+n6
2723      P:07C6 515E00  [2 -     5000]            move              b0,x:(r6)+
2724      P:07C7 555E00  [2 -     5002]            move              b1,x:(r6)+
2725      P:07C8 445E00  [2 -     5004]            move              x0,x:(r6)+
2726      P:07C9 455E00  [2 -     5006]            move              x1,x:(r6)+
2727      P:07CA 615E00  [2 -     5008]            move              r1,x:(r6)+
2728      P:07CB 625E00  [2 -     5010]            move              r2,x:(r6)+
2729      P:07CC 635E00  [2 -     5012]            move              r3,x:(r6)+
2730      P:07CD 62E800  [4 -     5016]            move              x:(r0+n0),r2
2731      P:07CE 70F400  [4 -     5020]            move              #65529,n0
                 00FFF9
2732      P:07D0 45F000  [4 -     5024]            move              x:FA_2,x1
                 00006F
2733      P:07D2 61E869  [4 -     5028]            tfr     x1,b      x:(r0+n0),r1
2734      P:07D3 20000D  [2 -     5030]            cmp     a,b
2735      P:07D4 0AF0AF  [6 -     5036]            jle     L172
                 0007DF
2736      P:07D6 56F400  [4 -     5040]            move              #>53760,a
                 00D200
2737      P:07D8 20000D  [2 -     5042]            cmp     a,b
2738      P:07D9 0AF0A7  [6 -     5048]            jgt     L172
                 0007DF
2739      P:07DB 44F400  [4 -     5052]            move              #>1,x0
                 000001
2740      P:07DD 0AF080  [6 -     5058]            jmp     L173
                 0007E0
2741                                     L172
2742      P:07DF 240000  [2 -     5060]            move              #0,x0
2743                                     L173
2744                                     ; **************************************************
2745                                     ;   
2746                                     ;   /* take last (t_dr) */
2747                                     ;   t_d = (*t_dr);
2748                                     ; **************************************************
2749                                     ; **************************************************
2750                                     ;   
2751                                     ;   /* calcutale new  (*t_dr)  */
2752                                     ;   /* TRIGB Function */
2753                                     ;   *t_dr = (*LAST_TR == 0) ? TDP : 0; 
2754                                     ; **************************************************
2755      P:07E0 205800  [2 -     5062]            move              (r0)+
2756      P:07E1 447000  [4 -     5066]            move              x0,x:FTDP
                 000067
2757      P:07E3 45E200  [2 -     5068]            move              x:(r2),x1
2758      P:07E4 455000  [2 -     5070]            move              x1,x:(r0)-
2759      P:07E5 56E100  [2 -     5072]            move              x:(r1),a
2760      P:07E6 200003  [2 -     5074]            tst     a
2761      P:07E7 0AF0A2  [6 -     5080]            jne     L174






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 58



                 0007EC
2762      P:07E9 200041  [2 -     5082]            tfr     x0,a
2763      P:07EA 0AF080  [6 -     5088]            jmp     L175
                 0007ED
2764                                     L174
2765      P:07EC 200013  [2 -     5090]            clr     a
2766                                     L175
2767                                     ; **************************************************
2768                                     ;   
2769                                     ;   *LAST_TR = *YL >> 15; /* (*LAST_TR)  is used here as a temporary variable */
2770                                     ; **************************************************
2771      P:07ED 70F400  [4 -     5094]            move              #65531,n0
                 00FFFB
2772      P:07EF 546200  [2 -     5096]            move              a1,x:(r2)
2773      P:07F0 63E800  [4 -     5100]            move              x:(r0+n0),r3
**** 2774 [opt_adpcm-v1.asm 2774]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2774      P:07F1 56E300  [2 -     5102]            move              x:(r3),a
2775      P:07F2 218E00  [2 -     5104]            move              a1,a
2776      P:07F3 060FA0  [4 -     5108]            rep     #15
2777      P:07F4 200022  [2 -     5110]            asr     a
2778                                     ; **************************************************
2779                                     ;   
2780                                     ;   tmp = ((*LAST_TR) > 8) ? 31 << 9 :
2781                                     ;         (32 + ((*LAST_TR << 5) & 31)) << *LAST_TR; 
2782                                     ; **************************************************
2783      P:07F5 45F400  [4 -     5114]            move              #>8,x1
                 000008
2784      P:07F7 218E00  [2 -     5116]            move              a1,a
2785      P:07F8 546165  [2 -     5118]            cmp     x1,a      a1,x:(r1)
2786      P:07F9 0AF0AF  [6 -     5124]            jle     L176
                 000800
2787      P:07FB 45F400  [4 -     5128]            move              #>15872,x1
                 003E00
2788      P:07FD 456000  [2 -     5130]            move              x1,x:(r0)
2789      P:07FE 0AF080  [6 -     5136]            jmp     L177
                 000813
2790                                     L176
2791      P:0800 56E100  [2 -     5138]            move              x:(r1),a
2792      P:0801 0605A0  [4 -     5142]            rep     #5
2793      P:0802 200032  [2 -     5144]            asl     a
2794      P:0803 57E100  [2 -     5146]            move              x:(r1),b
2795      P:0804 45F400  [4 -     5150]            move              #>32,x1
                 000020
2796      P:0806 44F400  [4 -     5154]            move              #>31,x0
                 00001F
2797      P:0808 218E00  [2 -     5156]            move              a1,a
2798      P:0809 200046  [2 -     5158]            and     x0,a
2799      P:080A 218E00  [2 -     5160]            move              a1,a
2800      P:080B 200060  [2 -     5162]            add     x1,a
2801      P:080C 20000B  [2 -     5164]            tst     b
2802      P:080D 0AF0AA  [6 -     5170]            jeq     L180
                 000812
2803      P:080F 06CF20  [4 -     5174]            rep     b
2804      P:0810 200032  [2 -     5176]            asl     a
2805      P:0811 218E00  [2 -     5178]            move              a1,a
2806                                     L180






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 59



2807      P:0812 546000  [2 -     5180]            move              a1,x:(r0)
2808                                     L177
2809                                     ; **************************************************
2810                                     ;   
2811                                     ;   *LAST_TR = *T = (((*DQ & 16383) > (tmp + (tmp >> 1)) >> 1) 
2812                                     ;               && (t_d == 1)) ? 1 : 0;
2813                                     ; **************************************************
2814      P:0813 70F400  [4 -     5184]            move              #65533,n0
                 00FFFD
2815      P:0815 57E000  [2 -     5186]            move              x:(r0),b
2816      P:0816 63E800  [4 -     5190]            move              x:(r0+n0),r3
2817      P:0817 21AF00  [2 -     5192]            move              b1,b
2818      P:0818 56E32A  [2 -     5194]            asr     b         x:(r3),a
2819      P:0819 21AF00  [2 -     5196]            move              b1,b
2820      P:081A 21A500  [2 -     5198]            move              b1,x1
2821      P:081B 57E000  [2 -     5200]            move              x:(r0),b
2822      P:081C 44F468  [4 -     5204]            add     x1,b      #>16383,x0
                 003FFF
2823      P:081E 21AF46  [2 -     5206]            and     x0,a      b1,b
2824      P:081F 218E2A  [2 -     5208]            asr     b         a1,a
2825      P:0820 21AF00  [2 -     5210]            move              b1,b
2826      P:0821 21A500  [2 -     5212]            move              b1,x1
2827      P:0822 200065  [2 -     5214]            cmp     x1,a
2828      P:0823 0AF0AF  [6 -     5220]            jle     L178
                 00082C
2829      P:0825 56F400  [4 -     5224]            move              #>1,a
                 000001
2830      P:0827 205800  [2 -     5226]            move              (r0)+
2831      P:0828 57D000  [2 -     5228]            move              x:(r0)-,b
2832      P:0829 20000D  [2 -     5230]            cmp     a,b
2833      P:082A 0AF0AA  [6 -     5236]            jeq     L179
                 00082D
2834                                     L178
2835      P:082C 200013  [2 -     5238]            clr     a
2836                                     L179
2837                                     ; **************************************************
2838                                     ; }
2839                                     ; **************************************************
2840      P:082D 70F400  [4 -     5242]            move              #65532,n0
                 00FFFC
2841      P:082F 205600  [2 -     5244]            move              (r6)-
2842      P:0830 63E800  [4 -     5248]            move              x:(r0+n0),r3
2843      P:0831 205000  [2 -     5250]            move              (r0)-
2844      P:0832 546300  [2 -     5252]            move              a1,x:(r3)
2845      P:0833 546100  [2 -     5254]            move              a1,x:(r1)
2846      P:0834 63D600  [2 -     5256]            move              x:(r6)-,r3
2847      P:0835 62D600  [2 -     5258]            move              x:(r6)-,r2
2848      P:0836 61D600  [2 -     5260]            move              x:(r6)-,r1
2849      P:0837 45D600  [2 -     5262]            move              x:(r6)-,x1
2850      P:0838 44D600  [2 -     5264]            move              x:(r6)-,x0
2851      P:0839 57D600  [2 -     5266]            move              x:(r6)-,b
2852      P:083A 51E600  [2 -     5268]            move              x:(r6),b0
2853      P:083B 205000  [2 -     5270]            move              (r0)-
2854      P:083C 221600  [2 -     5272]            move              r0,r6
2855      P:083D 60E000  [2 -     5274]            move              x:(r0),r0
2856      P:083E 00000C  [4 -     5278]            rts






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 60



2857   
2858      X:004C                                   org     x:
2859                                     F___F1
2860      X:004C                                   dc      0
2861      X:004D                                   dc      0
2862      X:004E                                   dc      0
2863      X:004F                                   dc      1
2864      X:0050                                   dc      1
2865      X:0051                                   dc      1
2866      X:0052                                   dc      3
2867      X:0053                                   dc      7
2868      P:083F                                   org     p:
2869                                               global  Fspeed_control
2870                                     Fspeed_control
2871                                     ; **************************************************
2872                                     ; **************************************************
2873                                     ; **************************************************
2874                                     ; 
2875                                     ; void speed_control(int* TR, int* Y, int* DMS, int* DML, int* AP)
2876                                     ; {
2877                                     ;   /*
2878                                     ;    * speed control
2879                                     ;    *
2880                                     ;    * Input signals:  T, TDP, I, Y
2881                                     ;    * Output signals: AL
2882                                     ;    */
2883                                     ; 
2884                                     ;   static int F[] = { 0, 0, 0, 1, 1, 1, 3, 7 };
2885                                     ;   int FI, DIF, DIFS, DIFSX, DIFM, DTHR, AX, APP;
2886                                     ;   
2887                                     ;   /* FUNCTF */ 
2888                                     ;   FI = F[(I >> 3 ? (15 - I) : I) & 7] ; 
2889                                     ; **************************************************
2890      P:083F 70F400  [4 -     5282]            move              #65531,n0
                 00FFFB
2891      P:0841 3E0600  [2 -     5284]            move              #6,n6
2892      P:0842 605E00  [2 -     5286]            move              r0,x:(r6)+
2893      P:0843 205E00  [2 -     5288]            move              (r6)+
2894      P:0844 22D000  [2 -     5290]            move              r6,r0
2895      P:0845 204E00  [2 -     5292]            move              (r6)+n6
2896      P:0846 515E00  [2 -     5294]            move              b0,x:(r6)+
2897      P:0847 555E00  [2 -     5296]            move              b1,x:(r6)+
2898      P:0848 445E00  [2 -     5298]            move              x0,x:(r6)+
2899      P:0849 455E00  [2 -     5300]            move              x1,x:(r6)+
2900      P:084A 465E00  [2 -     5302]            move              y0,x:(r6)+
2901      P:084B 615E00  [2 -     5304]            move              r1,x:(r6)+
2902      P:084C 625E00  [2 -     5306]            move              r2,x:(r6)+
2903      P:084D 635E00  [2 -     5308]            move              r3,x:(r6)+
2904      P:084E 645E00  [2 -     5310]            move              r4,x:(r6)+
2905      P:084F 655E00  [2 -     5312]            move              r5,x:(r6)+
2906      P:0850 62E800  [4 -     5316]            move              x:(r0+n0),r2
2907      P:0851 70F400  [4 -     5320]            move              #65530,n0
                 00FFFA
2908      P:0853 46F000  [4 -     5324]            move              x:FI,y0
                 00006C
2909      P:0855 63E851  [4 -     5328]            tfr     y0,a      x:(r0+n0),r3






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 61



2910      P:0856 70F400  [4 -     5332]            move              #65529,n0
                 00FFF9
2911      P:0858 218E00  [2 -     5334]            move              a1,a
2912      P:0859 64E800  [4 -     5338]            move              x:(r0+n0),r4
2913      P:085A 380500  [2 -     5340]            move              #5,n0
**** 2914 [opt_adpcm-v1.asm 2914]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2914      P:085B 466800  [4 -     5344]            move              y0,x:(r0+n0)
2915      P:085C 0603A0  [4 -     5348]            rep     #3
2916      P:085D 200022  [2 -     5350]            asr     a
2917      P:085E 218E00  [2 -     5352]            move              a1,a
2918      P:085F 200003  [2 -     5354]            tst     a
2919      P:0860 0AF0AA  [6 -     5360]            jeq     L182
                 000867
2920      P:0862 56F400  [4 -     5364]            move              #>15,a
                 00000F
2921      P:0864 200054  [2 -     5366]            sub     y0,a
2922      P:0865 0AF080  [6 -     5372]            jmp     L183
                 000869
2923                                     L182
2924      P:0867 56F000  [4 -     5376]            move              x:FI,a
                 00006C
2925                                     L183
2926                                     ; **************************************************
2927                                     ;     
2928                                     ;   /* FILTA */
2929                                     ;   DIF = ((FI << 9) + 8192 - *DMS) & 8191;
2930                                     ; **************************************************
2931      P:0869 61F400  [4 -     5380]            move              #F___F1,r1
                 00004C
2932      P:086B 44F400  [4 -     5384]            move              #>7,x0
                 000007
2933      P:086D 222F46  [2 -     5386]            and     x0,a      r1,b
2934      P:086E 218E00  [2 -     5388]            move              a1,a
2935      P:086F 200018  [2 -     5390]            add     a,b
2936      P:0870 21B100  [2 -     5392]            move              b1,r1
**** 2937 [opt_adpcm-v1.asm 2937]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2937      P:0871 46E100  [2 -     5394]            move              x:(r1),y0
2938      P:0872 466059  [2 -     5396]            tfr     y0,b      y0,x:(r0)
2939      P:0873 0609A0  [4 -     5400]            rep     #9
2940      P:0874 20003A  [2 -     5402]            asl     b
2941                                     ; **************************************************
2942                                     ;   DIFS = DIF >> 12;
2943                                     ; **************************************************
2944      P:0875 380500  [2 -     5404]            move              #5,n0
2945      P:0876 56E200  [2 -     5406]            move              x:(r2),a
2946      P:0877 44F400  [4 -     5410]            move              #>16769024,x0
                 FFE000
2947      P:0879 21AF40  [2 -     5412]            add     x0,a      b1,b
2948      P:087A 44F41C  [4 -     5416]            sub     a,b       #>8191,x0
                 001FFF
2949      P:087C 20004E  [2 -     5418]            and     x0,b
2950      P:087D 21AF00  [2 -     5420]            move              b1,b
2951      P:087E 556800  [4 -     5424]            move              b1,x:(r0+n0)
2952      P:087F 21AF00  [2 -     5426]            move              b1,b
2953      P:0880 060CA0  [4 -     5430]            rep     #12
2954      P:0881 20002A  [2 -     5432]            asr     b






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 62



2955                                     ; **************************************************
2956                                     ;   DIFSX = DIFS == 1 ? (DIF >> 5) + 3840 : DIF >> 5;
2957                                     ; **************************************************
2958      P:0882 56F400  [4 -     5436]            move              #>1,a
                 000001
2959      P:0884 21AF00  [2 -     5438]            move              b1,b
2960      P:0885 20000D  [2 -     5440]            cmp     a,b
2961      P:0886 0AF0A2  [6 -     5446]            jne     L184
                 000892
2962      P:0888 57E800  [4 -     5450]            move              x:(r0+n0),b
2963      P:0889 21AF00  [2 -     5452]            move              b1,b
2964      P:088A 0605A0  [4 -     5456]            rep     #5
2965      P:088B 20002A  [2 -     5458]            asr     b
2966      P:088C 56F400  [4 -     5462]            move              #>3840,a
                 000F00
2967      P:088E 21AF00  [2 -     5464]            move              b1,b
2968      P:088F 200018  [2 -     5466]            add     a,b
2969      P:0890 0AF080  [6 -     5472]            jmp     L198
                 000898
2970                                     L184
2971      P:0892 380500  [2 -     5474]            move              #5,n0
**** 2972 [opt_adpcm-v1.asm 2972]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
2972      P:0893 57E800  [4 -     5478]            move              x:(r0+n0),b
2973      P:0894 21AF00  [2 -     5480]            move              b1,b
2974      P:0895 0605A0  [4 -     5484]            rep     #5
2975      P:0896 20002A  [2 -     5486]            asr     b
2976      P:0897 21AF00  [2 -     5488]            move              b1,b
2977                                     L198
2978                                     ; **************************************************
2979                                     ;   *DMS = (DIFSX + *DMS) & 4095;
2980                                     ; **************************************************
2981                                     ; **************************************************
2982                                     ;   
2983                                     ;   /* FILTB */
2984                                     ;   DIF = ((FI << 11) + 32768 - *DML) & 32767;
2985                                     ; **************************************************
2986      P:0898 380500  [2 -     5490]            move              #5,n0
2987      P:0899 44F400  [4 -     5494]            move              #>4095,x0
                 000FFF
2988      P:089B 556800  [4 -     5498]            move              b1,x:(r0+n0)
2989      P:089C 56E200  [2 -     5500]            move              x:(r2),a
2990      P:089D 57E800  [4 -     5504]            move              x:(r0+n0),b
2991      P:089E 200018  [2 -     5506]            add     a,b
2992      P:089F 200001  [2 -     5508]            tfr     b,a
2993      P:08A0 200046  [2 -     5510]            and     x0,a
2994      P:08A1 218E00  [2 -     5512]            move              a1,a
2995      P:08A2 546200  [2 -     5514]            move              a1,x:(r2)
2996      P:08A3 57E000  [2 -     5516]            move              x:(r0),b
2997      P:08A4 060BA0  [4 -     5520]            rep     #11
2998      P:08A5 20003A  [2 -     5522]            asl     b
2999                                     ; **************************************************
3000                                     ;   DIFS = DIF >> 14;
3001                                     ; **************************************************
3002      P:08A6 56E300  [2 -     5524]            move              x:(r3),a
3003      P:08A7 44F400  [4 -     5528]            move              #>16744448,x0
                 FF8000






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 63



3004      P:08A9 21AF40  [2 -     5530]            add     x0,a      b1,b
3005      P:08AA 44F41C  [4 -     5534]            sub     a,b       #>32767,x0
                 007FFF
3006      P:08AC 20004E  [2 -     5536]            and     x0,b
3007      P:08AD 21AF00  [2 -     5538]            move              b1,b
3008      P:08AE 556800  [4 -     5542]            move              b1,x:(r0+n0)
3009      P:08AF 21AF00  [2 -     5544]            move              b1,b
3010      P:08B0 060EA0  [4 -     5548]            rep     #14
3011      P:08B1 20002A  [2 -     5550]            asr     b
3012                                     ; **************************************************
3013                                     ;   DIFSX = DIFS == 1 ? (DIF >> 7) + 16128 : DIF >> 7;
3014                                     ; **************************************************
3015      P:08B2 56F400  [4 -     5554]            move              #>1,a
                 000001
3016      P:08B4 21AF00  [2 -     5556]            move              b1,b
3017      P:08B5 20000D  [2 -     5558]            cmp     a,b
3018      P:08B6 0AF0A2  [6 -     5564]            jne     L186
                 0008C2
3019      P:08B8 57E800  [4 -     5568]            move              x:(r0+n0),b
3020      P:08B9 21AF00  [2 -     5570]            move              b1,b
3021      P:08BA 0607A0  [4 -     5574]            rep     #7
3022      P:08BB 20002A  [2 -     5576]            asr     b
3023      P:08BC 56F400  [4 -     5580]            move              #>16128,a
                 003F00
3024      P:08BE 21AF00  [2 -     5582]            move              b1,b
3025      P:08BF 200018  [2 -     5584]            add     a,b
3026      P:08C0 0AF080  [6 -     5590]            jmp     L199
                 0008C8
3027                                     L186
3028      P:08C2 380500  [2 -     5592]            move              #5,n0
**** 3029 [opt_adpcm-v1.asm 3029]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3029      P:08C3 57E800  [4 -     5596]            move              x:(r0+n0),b
3030      P:08C4 21AF00  [2 -     5598]            move              b1,b
3031      P:08C5 0607A0  [4 -     5602]            rep     #7
3032      P:08C6 20002A  [2 -     5604]            asr     b
3033      P:08C7 21AF00  [2 -     5606]            move              b1,b
3034                                     L199
3035                                     ; **************************************************
3036                                     ;   *DML = (DIFSX + *DML) & 16383;
3037                                     ; **************************************************
3038                                     ; **************************************************
3039                                     ;   
3040                                     ;   /* SUBTC */
3041                                     ;   DIF = ((*DMS << 2) + 32768 - *DML) & 32767;
3042                                     ; **************************************************
3043                                     ; **************************************************
3044                                     ;   DIFS = DIF >> 14;
3045                                     ; **************************************************
3046      P:08C8 380500  [2 -     5608]            move              #5,n0
3047      P:08C9 44F400  [4 -     5612]            move              #>16744448,x0
                 FF8000
3048      P:08CB 45F400  [4 -     5616]            move              #>16383,x1
                 003FFF
3049      P:08CD 556800  [4 -     5620]            move              b1,x:(r0+n0)
3050      P:08CE 56E300  [2 -     5622]            move              x:(r3),a
3051      P:08CF 57E800  [4 -     5626]            move              x:(r0+n0),b






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 64



3052      P:08D0 200018  [2 -     5628]            add     a,b
3053      P:08D1 200001  [2 -     5630]            tfr     b,a
3054      P:08D2 200066  [2 -     5632]            and     x1,a
3055      P:08D3 218E00  [2 -     5634]            move              a1,a
3056      P:08D4 546340  [2 -     5636]            add     x0,a      a1,x:(r3)
3057      P:08D5 46E200  [2 -     5638]            move              x:(r2),y0
3058      P:08D6 44F459  [4 -     5642]            tfr     y0,b      #>32767,x0
                 007FFF
3059      P:08D8 20003A  [2 -     5644]            asl     b
3060      P:08D9 20003A  [2 -     5646]            asl     b
3061      P:08DA 21AF00  [2 -     5648]            move              b1,b
3062      P:08DB 20001C  [2 -     5650]            sub     a,b
3063      P:08DC 20004E  [2 -     5652]            and     x0,b
3064      P:08DD 21AF00  [2 -     5654]            move              b1,b
3065      P:08DE 556800  [4 -     5658]            move              b1,x:(r0+n0)
3066      P:08DF 21AF00  [2 -     5660]            move              b1,b
3067      P:08E0 060EA0  [4 -     5664]            rep     #14
3068      P:08E1 20002A  [2 -     5666]            asr     b
3069                                     ; **************************************************
3070                                     ;   DIFM = DIFS == 1 ? (32768 - DIF) & 16383 : DIF;
3071                                     ; **************************************************
3072      P:08E2 56F400  [4 -     5670]            move              #>1,a
                 000001
3073      P:08E4 21AF00  [2 -     5672]            move              b1,b
3074      P:08E5 20000D  [2 -     5674]            cmp     a,b
3075      P:08E6 0AF0A2  [6 -     5680]            jne     L188
                 0008F3
3076      P:08E8 46E800  [4 -     5684]            move              x:(r0+n0),y0
3077      P:08E9 380200  [2 -     5686]            move              #2,n0
3078      P:08EA 56F400  [4 -     5690]            move              #>32768,a
                 008000
3079      P:08EC 200054  [2 -     5692]            sub     y0,a
3080      P:08ED 200009  [2 -     5694]            tfr     a,b
3081      P:08EE 20006E  [2 -     5696]            and     x1,b
3082      P:08EF 21AF00  [2 -     5698]            move              b1,b
3083      P:08F0 556800  [4 -     5702]            move              b1,x:(r0+n0)
3084      P:08F1 0AF080  [6 -     5708]            jmp     L189
                 0008F7
3085                                     L188
3086      P:08F3 380500  [2 -     5710]            move              #5,n0
**** 3087 [opt_adpcm-v1.asm 3087]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3087      P:08F4 46E800  [4 -     5714]            move              x:(r0+n0),y0
3088      P:08F5 380200  [2 -     5716]            move              #2,n0
**** 3089 [opt_adpcm-v1.asm 3089]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3089      P:08F6 466800  [4 -     5720]            move              y0,x:(r0+n0)
3090                                     L189
3091                                     ; **************************************************
3092                                     ;   DTHR = *DML >> 3;
3093                                     ; **************************************************
3094      P:08F7 56E300  [2 -     5722]            move              x:(r3),a
3095      P:08F8 218E00  [2 -     5724]            move              a1,a
3096      P:08F9 0603A0  [4 -     5728]            rep     #3
3097      P:08FA 200022  [2 -     5730]            asr     a
3098                                     ; **************************************************
3099                                     ;   AX = (*Y >= 1536 && DIFM < DTHR && TDP == 0) ? 0 : 1;
3100                                     ; **************************************************






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 65



3101      P:08FB 380300  [2 -     5732]            move              #3,n0
3102      P:08FC 46F400  [4 -     5736]            move              #>1535,y0
                 0005FF
3103      P:08FE 218E00  [2 -     5738]            move              a1,a
3104      P:08FF 546800  [4 -     5742]            move              a1,x:(r0+n0)
3105      P:0900 70F400  [4 -     5746]            move              #65532,n0
                 00FFFC
**** 3106 [opt_adpcm-v1.asm 3106]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3106      P:0902 65E800  [4 -     5750]            move              x:(r0+n0),r5
**** 3107 [opt_adpcm-v1.asm 3107]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3107      P:0903 56E500  [2 -     5752]            move              x:(r5),a
3108      P:0904 200055  [2 -     5754]            cmp     y0,a
3109      P:0905 0AF0AF  [6 -     5760]            jle     L190
                 000916
3110      P:0907 380200  [2 -     5762]            move              #2,n0
**** 3111 [opt_adpcm-v1.asm 3111]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3111      P:0908 57E800  [4 -     5766]            move              x:(r0+n0),b
3112      P:0909 380300  [2 -     5768]            move              #3,n0
**** 3113 [opt_adpcm-v1.asm 3113]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3113      P:090A 46E800  [4 -     5772]            move              x:(r0+n0),y0
3114      P:090B 20005D  [2 -     5774]            cmp     y0,b
3115      P:090C 0AF0A1  [6 -     5780]            jge     L190
                 000916
3116      P:090E 56F000  [4 -     5784]            move              x:FTDP,a
                 000067
3117      P:0910 200003  [2 -     5786]            tst     a
3118      P:0911 0AF0A2  [6 -     5792]            jne     L190
                 000916
3119      P:0913 200013  [2 -     5794]            clr     a
3120      P:0914 0AF080  [6 -     5800]            jmp     L191
                 000918
3121                                     L190
3122      P:0916 56F400  [4 -     5804]            move              #>1,a
                 000001
3123                                     L191
3124                                     ; **************************************************
3125                                     ;   
3126                                     ;   /* FILTC */
3127                                     ;   DIF = ((AX << 9) + 2048 - *AP) & 2047;
3128                                     ; **************************************************
3129      P:0918 0609A0  [4 -     5808]            rep     #9
3130      P:0919 200032  [2 -     5810]            asl     a
3131                                     ; **************************************************
3132                                     ;   DIFS = DIF >> 10;
3133                                     ; **************************************************
3134      P:091A 380500  [2 -     5812]            move              #5,n0
3135      P:091B 44F400  [4 -     5816]            move              #>16775168,x0
                 FFF800
3136      P:091D 218E00  [2 -     5818]            move              a1,a
3137      P:091E 56E409  [2 -     5820]            tfr     a,b       x:(r4),a
3138      P:091F 44F440  [4 -     5824]            add     x0,a      #>2047,x0
                 0007FF
3139      P:0921 20001C  [2 -     5826]            sub     a,b
3140      P:0922 20004E  [2 -     5828]            and     x0,b
3141      P:0923 21AF00  [2 -     5830]            move              b1,b
3142      P:0924 556800  [4 -     5834]            move              b1,x:(r0+n0)






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 66



3143      P:0925 21AF00  [2 -     5836]            move              b1,b
3144      P:0926 060AA0  [4 -     5840]            rep     #10
3145      P:0927 20002A  [2 -     5842]            asr     b
3146                                     ; **************************************************
3147                                     ;   DIFSX = DIFS == 1 ? (DIF >> 4) + 896 : DIF >> 4;
3148                                     ; **************************************************
3149      P:0928 56F400  [4 -     5846]            move              #>1,a
                 000001
3150      P:092A 21AF00  [2 -     5848]            move              b1,b
3151      P:092B 20000D  [2 -     5850]            cmp     a,b
3152      P:092C 0AF0A2  [6 -     5856]            jne     L192
                 000938
3153      P:092E 57E800  [4 -     5860]            move              x:(r0+n0),b
3154      P:092F 21AF00  [2 -     5862]            move              b1,b
3155      P:0930 0604A0  [4 -     5866]            rep     #4
3156      P:0931 20002A  [2 -     5868]            asr     b
3157      P:0932 56F400  [4 -     5872]            move              #>896,a
                 000380
3158      P:0934 21AF00  [2 -     5874]            move              b1,b
3159      P:0935 200018  [2 -     5876]            add     a,b
3160      P:0936 0AF080  [6 -     5882]            jmp     L200
                 00093E
3161                                     L192
3162      P:0938 380500  [2 -     5884]            move              #5,n0
**** 3163 [opt_adpcm-v1.asm 3163]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3163      P:0939 57E800  [4 -     5888]            move              x:(r0+n0),b
3164      P:093A 21AF00  [2 -     5890]            move              b1,b
3165      P:093B 0604A0  [4 -     5894]            rep     #4
3166      P:093C 20002A  [2 -     5896]            asr     b
3167      P:093D 21AF00  [2 -     5898]            move              b1,b
3168                                     L200
3169                                     ; **************************************************
3170                                     ;   APP = (DIFSX + *AP) & 1023;
3171                                     ; **************************************************
3172                                     ; **************************************************
3173                                     ;   
3174                                     ;   /* TRIGA */
3175                                     ;   *AP = *TR++ == 1 ? 256 : APP;
3176                                     ; **************************************************
3177      P:093E 380500  [2 -     5900]            move              #5,n0
3178      P:093F 46F400  [4 -     5904]            move              #>1,y0
                 000001
3179      P:0941 44F400  [4 -     5908]            move              #>1023,x0
                 0003FF
3180      P:0943 556800  [4 -     5912]            move              b1,x:(r0+n0)
3181      P:0944 57E800  [4 -     5916]            move              x:(r0+n0),b
3182      P:0945 380400  [2 -     5918]            move              #4,n0
3183      P:0946 56E400  [2 -     5920]            move              x:(r4),a
3184      P:0947 200018  [2 -     5922]            add     a,b
3185      P:0948 20004E  [2 -     5924]            and     x0,b
3186      P:0949 21AF00  [2 -     5926]            move              b1,b
3187      P:094A 556800  [4 -     5930]            move              b1,x:(r0+n0)
3188      P:094B 70F400  [4 -     5934]            move              #65533,n0
                 00FFFD
**** 3189 [opt_adpcm-v1.asm 3189]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3189      P:094D 65E800  [4 -     5938]            move              x:(r0+n0),r5






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 67



**** 3190 [opt_adpcm-v1.asm 3190]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3190      P:094E 56E500  [2 -     5940]            move              x:(r5),a
3191      P:094F 200055  [2 -     5942]            cmp     y0,a
3192      P:0950 0AF0A2  [6 -     5948]            jne     L194
                 000956
3193      P:0952 46F400  [4 -     5952]            move              #>256,y0
                 000100
3194      P:0954 0AF080  [6 -     5958]            jmp     L201
                 000958
3195                                     L194
3196      P:0956 380400  [2 -     5960]            move              #4,n0
**** 3197 [opt_adpcm-v1.asm 3197]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3197      P:0957 46E800  [4 -     5964]            move              x:(r0+n0),y0
3198                                     L201
3199                                     ; **************************************************
3200                                     ;   
3201                                     ;   /* LIMA */
3202                                     ;   AL = *AP >= 256 ? 64 : *AP >> 2;
3203                                     ; **************************************************
3204      P:0958 380500  [2 -     5966]            move              #5,n0
3205      P:0959 56F400  [4 -     5970]            move              #>255,a
                 0000FF
3206      P:095B 466800  [4 -     5974]            move              y0,x:(r0+n0)
3207      P:095C 46E800  [4 -     5978]            move              x:(r0+n0),y0
3208      P:095D 466459  [2 -     5980]            tfr     y0,b      y0,x:(r4)
3209      P:095E 20000D  [2 -     5982]            cmp     a,b
3210      P:095F 0AF0AF  [6 -     5988]            jle     L196
                 000965
3211      P:0961 56F400  [4 -     5992]            move              #>64,a
                 000040
3212      P:0963 0AF080  [6 -     5998]            jmp     L197
                 00096A
3213                                     L196
3214      P:0965 56E400  [2 -     6000]            move              x:(r4),a
3215      P:0966 218E00  [2 -     6002]            move              a1,a
3216      P:0967 200022  [2 -     6004]            asr     a
3217      P:0968 200022  [2 -     6006]            asr     a
3218      P:0969 218E00  [2 -     6008]            move              a1,a
3219                                     L197
3220                                     ; **************************************************
3221                                     ; }
3222                                     ; **************************************************
3223      P:096A 205000  [2 -     6010]            move              (r0)-
3224      P:096B 205000  [2 -     6012]            move              (r0)-
3225      P:096C 205600  [2 -     6014]            move              (r6)-
3226      P:096D 547000  [4 -     6018]            move              a1,x:FAL
                 00006E
3227      P:096F 65D600  [2 -     6020]            move              x:(r6)-,r5
3228      P:0970 64D600  [2 -     6022]            move              x:(r6)-,r4
3229      P:0971 63D600  [2 -     6024]            move              x:(r6)-,r3
3230      P:0972 62D600  [2 -     6026]            move              x:(r6)-,r2
3231      P:0973 61D600  [2 -     6028]            move              x:(r6)-,r1
3232      P:0974 46D600  [2 -     6030]            move              x:(r6)-,y0
3233      P:0975 45D600  [2 -     6032]            move              x:(r6)-,x1
3234      P:0976 44D600  [2 -     6034]            move              x:(r6)-,x0
3235      P:0977 57D600  [2 -     6036]            move              x:(r6)-,b






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 68



3236      P:0978 51E600  [2 -     6038]            move              x:(r6),b0
3237      P:0979 221600  [2 -     6040]            move              r0,r6
3238      P:097A 60E000  [2 -     6042]            move              x:(r0),r0
3239      P:097B 00000C  [4 -     6046]            rts
3240   
3241      X:0054                                   org     x:
3242                                     F___W2
3243      X:0054                                   dc      4084
3244      X:0055                                   dc      18
3245      X:0056                                   dc      41
3246      X:0057                                   dc      64
3247      X:0058                                   dc      112
3248      X:0059                                   dc      198
3249      X:005A                                   dc      255
3250      X:005B                                   dc      1122
3251      P:097C                                   org     p:
3252                                               global  Fscale_factor
3253                                     Fscale_factor
3254                                     ; **************************************************
3255                                     ; **************************************************
3256                                     ; **************************************************
3257                                     ; 
3258                                     ; 
3259                                     ; void scale_factor(int* Y, int* YL, int* Y_L, int* LAST_Y)
3260                                     ; {
3261                                     ;   /*
3262                                     ;    * scale factor adaptation
3263                                     ;    *
3264                                     ;    * Input signals:  AL, I
3265                                     ;    * Output signals: YL, Y
3266                                     ;    */
3267                                     ; 
3268                                     ;   static int W[] = 
3269                                     ;   {
3270                                     ;     4084, 18, 41, 64, 112, 198, 255, 1122
3271                                     ;   } ; 
3272                                     ;   register int TMP, YUP, YLP;
3273                                     ;  
3274                                     ;   /* FUNCTW */
3275                                     ;   TMP = W[(I >> 3) ? (15 - I) & 7 : I & 7];
3276                                     ; **************************************************
3277      P:097C 70F400  [4 -     6050]            move              #65531,n0
                 00FFFB
3278      P:097E 3E0300  [2 -     6052]            move              #3,n6
3279      P:097F 605E00  [2 -     6054]            move              r0,x:(r6)+
3280      P:0980 205E00  [2 -     6056]            move              (r6)+
3281      P:0981 22D000  [2 -     6058]            move              r6,r0
3282      P:0982 204E00  [2 -     6060]            move              (r6)+n6
3283      P:0983 515E00  [2 -     6062]            move              b0,x:(r6)+
3284      P:0984 555E00  [2 -     6064]            move              b1,x:(r6)+
3285      P:0985 445E00  [2 -     6066]            move              x0,x:(r6)+
3286      P:0986 455E00  [2 -     6068]            move              x1,x:(r6)+
3287      P:0987 615E00  [2 -     6070]            move              r1,x:(r6)+
3288      P:0988 625E00  [2 -     6072]            move              r2,x:(r6)+
3289      P:0989 635E00  [2 -     6074]            move              r3,x:(r6)+
3290      P:098A 645E00  [2 -     6076]            move              r4,x:(r6)+






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 69



3291      P:098B 63E800  [4 -     6080]            move              x:(r0+n0),r3
3292      P:098C 70F400  [4 -     6084]            move              #65530,n0
                 00FFFA
3293      P:098E 45F000  [4 -     6088]            move              x:FI,x1
                 00006C
3294      P:0990 62E861  [4 -     6092]            tfr     x1,a      x:(r0+n0),r2
3295      P:0991 380200  [2 -     6094]            move              #2,n0
3296      P:0992 218E00  [2 -     6096]            move              a1,a
3297      P:0993 456800  [4 -     6100]            move              x1,x:(r0+n0)
3298      P:0994 0603A0  [4 -     6104]            rep     #3
3299      P:0995 200022  [2 -     6106]            asr     a
3300      P:0996 218E00  [2 -     6108]            move              a1,a
3301      P:0997 200003  [2 -     6110]            tst     a
3302      P:0998 0AF0AA  [6 -     6116]            jeq     L203
                 00099F
3303      P:099A 56F400  [4 -     6120]            move              #>15,a
                 00000F
3304      P:099C 200064  [2 -     6122]            sub     x1,a
3305      P:099D 0AF080  [6 -     6128]            jmp     L215
                 0009A1
3306                                     L203
3307      P:099F 56F000  [4 -     6132]            move              x:FI,a
                 00006C
3308                                     L215
3309                                     ; **************************************************
3310                                     ;   
3311                                     ;   /* FILTD */
3312                                     ;   TMP = ((TMP << 5) + 131072 - *LAST_Y) & 131071;
3313                                     ; **************************************************
3314      P:09A1 61F400  [4 -     6136]            move              #F___W2,r1
                 000054
3315      P:09A3 44F400  [4 -     6140]            move              #>7,x0
                 000007
3316      P:09A5 222F46  [2 -     6142]            and     x0,a      r1,b
3317      P:09A6 218E00  [2 -     6144]            move              a1,a
3318      P:09A7 200018  [2 -     6146]            add     a,b
3319      P:09A8 21B100  [2 -     6148]            move              b1,r1
**** 3320 [opt_adpcm-v1.asm 3320]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3320      P:09A9 45E100  [2 -     6150]            move              x:(r1),x1
3321      P:09AA 200069  [2 -     6152]            tfr     x1,b
3322      P:09AB 0605A0  [4 -     6156]            rep     #5
3323      P:09AC 20003A  [2 -     6158]            asl     b
3324                                     ; **************************************************
3325                                     ;   YUP = (TMP >> 16) ? (TMP >> 5) + 4096 : (TMP >> 5);
3326                                     ; **************************************************
3327      P:09AD 380200  [2 -     6160]            move              #2,n0
3328      P:09AE 56E200  [2 -     6162]            move              x:(r2),a
3329      P:09AF 44F400  [4 -     6166]            move              #>16646144,x0
                 FE0000
3330      P:09B1 21AF40  [2 -     6168]            add     x0,a      b1,b
3331      P:09B2 44F41C  [4 -     6172]            sub     a,b       #>131071,x0
                 01FFFF
3332      P:09B4 20004E  [2 -     6174]            and     x0,b
3333      P:09B5 21AF00  [2 -     6176]            move              b1,b
3334      P:09B6 556801  [4 -     6180]            tfr     b,a       b1,x:(r0+n0)
3335      P:09B7 218E00  [2 -     6182]            move              a1,a






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 70



3336      P:09B8 0610A0  [4 -     6186]            rep     #16
3337      P:09B9 200022  [2 -     6188]            asr     a
3338      P:09BA 218E00  [2 -     6190]            move              a1,a
3339      P:09BB 200003  [2 -     6192]            tst     a
3340      P:09BC 0AF0AA  [6 -     6198]            jeq     L205
                 0009C7
3341      P:09BE 21AF00  [2 -     6200]            move              b1,b
3342      P:09BF 0605A0  [4 -     6204]            rep     #5
3343      P:09C0 20002A  [2 -     6206]            asr     b
3344      P:09C1 56F400  [4 -     6210]            move              #>4096,a
                 001000
3345      P:09C3 21AF00  [2 -     6212]            move              b1,b
3346      P:09C4 200018  [2 -     6214]            add     a,b
3347      P:09C5 0AF080  [6 -     6220]            jmp     L216
                 0009CD
3348                                     L205
3349      P:09C7 380200  [2 -     6222]            move              #2,n0
**** 3350 [opt_adpcm-v1.asm 3350]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3350      P:09C8 57E800  [4 -     6226]            move              x:(r0+n0),b
3351      P:09C9 21AF00  [2 -     6228]            move              b1,b
3352      P:09CA 0605A0  [4 -     6232]            rep     #5
3353      P:09CB 20002A  [2 -     6234]            asr     b
3354      P:09CC 21AF00  [2 -     6236]            move              b1,b
3355                                     L216
3356                                     ; **************************************************
3357                                     ;   YUP = (YUP + *LAST_Y) & 8191;
3358                                     ; **************************************************
3359                                     ; **************************************************
3360                                     ;   
3361                                     ;   /* LIMB */
3362                                     ;   if ((((YUP + 11264) & 16383) >> 13) == 0)
3363                                     ; **************************************************
3364      P:09CD 44F400  [4 -     6240]            move              #>8191,x0
                 001FFF
3365      P:09CF 556000  [2 -     6242]            move              b1,x:(r0)
3366      P:09D0 56E200  [2 -     6244]            move              x:(r2),a
3367      P:09D1 57E000  [2 -     6246]            move              x:(r0),b
3368      P:09D2 56F418  [4 -     6250]            add     a,b       #>11264,a
                 002C00
3369      P:09D4 44F44E  [4 -     6254]            and     x0,b      #>16383,x0
                 003FFF
3370      P:09D6 21AF00  [2 -     6256]            move              b1,b
3371      P:09D7 556018  [2 -     6258]            add     a,b       b1,x:(r0)
3372      P:09D8 200001  [2 -     6260]            tfr     b,a
3373      P:09D9 200046  [2 -     6262]            and     x0,a
3374      P:09DA 218E00  [2 -     6264]            move              a1,a
3375      P:09DB 218E00  [2 -     6266]            move              a1,a
3376      P:09DC 060DA0  [4 -     6270]            rep     #13
3377      P:09DD 200022  [2 -     6272]            asr     a
3378      P:09DE 218E00  [2 -     6274]            move              a1,a
3379      P:09DF 200003  [2 -     6276]            tst     a
3380      P:09E0 0AF0A2  [6 -     6282]            jne     L207
                 0009E5
3381                                     ; **************************************************
3382                                     ;     YUP = 5120;
3383                                     ; **************************************************






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 71



3384      P:09E2 45F400  [4 -     6286]            move              #>5120,x1
                 001400
3385      P:09E4 456000  [2 -     6288]            move              x1,x:(r0)
3386                                     L207
3387                                     ; **************************************************
3388                                     ;   if ((((YUP + 15840) & 16383) >> 13))
3389                                     ; **************************************************
3390      P:09E5 44F400  [4 -     6292]            move              #>16383,x0
                 003FFF
3391      P:09E7 57E000  [2 -     6294]            move              x:(r0),b
3392      P:09E8 56F400  [4 -     6298]            move              #>15840,a
                 003DE0
3393      P:09EA 200018  [2 -     6300]            add     a,b
3394      P:09EB 200001  [2 -     6302]            tfr     b,a
3395      P:09EC 200046  [2 -     6304]            and     x0,a
3396      P:09ED 218E00  [2 -     6306]            move              a1,a
3397      P:09EE 218E00  [2 -     6308]            move              a1,a
3398      P:09EF 060DA0  [4 -     6312]            rep     #13
3399      P:09F0 200022  [2 -     6314]            asr     a
3400      P:09F1 218E00  [2 -     6316]            move              a1,a
3401      P:09F2 200003  [2 -     6318]            tst     a
3402      P:09F3 0AF0AA  [6 -     6324]            jeq     L208
                 0009F8
3403                                     ; **************************************************
3404                                     ;     YUP = 544;
3405                                     ; **************************************************
3406      P:09F5 45F400  [4 -     6328]            move              #>544,x1
                 000220
3407      P:09F7 456000  [2 -     6330]            move              x1,x:(r0)
3408                                     L208
3409                                     ; **************************************************
3410                                     ;   
3411                                     ;   /* FILTE */
3412                                     ;   TMP = (YUP + ((1048576 - *Y_L) >> 6)) & 16383;
3413                                     ; **************************************************
3414      P:09F8 45E300  [2 -     6332]            move              x:(r3),x1
3415      P:09F9 56F400  [4 -     6336]            move              #>1048576,a
                 100000
3416      P:09FB 200064  [2 -     6338]            sub     x1,a
3417      P:09FC 218E00  [2 -     6340]            move              a1,a
3418      P:09FD 0606A0  [4 -     6344]            rep     #6
3419      P:09FE 200022  [2 -     6346]            asr     a
3420                                     ; **************************************************
3421                                     ;   TMP = (TMP >> 13) ? TMP + 507904 : TMP;
3422                                     ; **************************************************
3423      P:09FF 380200  [2 -     6348]            move              #2,n0
3424      P:0A00 57E000  [2 -     6350]            move              x:(r0),b
3425      P:0A01 44F400  [4 -     6354]            move              #>16383,x0
                 003FFF
3426      P:0A03 218E00  [2 -     6356]            move              a1,a
3427      P:0A04 200018  [2 -     6358]            add     a,b
3428      P:0A05 20004E  [2 -     6360]            and     x0,b
3429      P:0A06 21AF00  [2 -     6362]            move              b1,b
3430      P:0A07 556801  [4 -     6366]            tfr     b,a       b1,x:(r0+n0)
3431      P:0A08 218E00  [2 -     6368]            move              a1,a
3432      P:0A09 060DA0  [4 -     6372]            rep     #13






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 72



3433      P:0A0A 200022  [2 -     6374]            asr     a
3434      P:0A0B 218E00  [2 -     6376]            move              a1,a
3435      P:0A0C 200003  [2 -     6378]            tst     a
3436      P:0A0D 0AF0AA  [6 -     6384]            jeq     L210
                 000A13
3437      P:0A0F 56F400  [4 -     6388]            move              #>507904,a
                 07C000
3438      P:0A11 200018  [2 -     6390]            add     a,b
3439      P:0A12 556800  [4 -     6394]            move              b1,x:(r0+n0)
3440                                     L210
3441                                     ; **************************************************
3442                                     ;   YLP = (TMP + *Y_L) & 524287;
3443                                     ; **************************************************
3444                                     ; **************************************************
3445                                     ;   
3446                                     ;   /* MIX */
3447                                     ;   TMP = (YUP + 16384 - (*Y_L >> 6)) & 16383;
3448                                     ; **************************************************
3449      P:0A13 380200  [2 -     6396]            move              #2,n0
3450      P:0A14 56E300  [2 -     6398]            move              x:(r3),a
3451      P:0A15 57E800  [4 -     6402]            move              x:(r0+n0),b
3452      P:0A16 44F418  [4 -     6406]            add     a,b       #>524287,x0
                 07FFFF
3453      P:0A18 218E4E  [2 -     6408]            and     x0,b      a1,a
3454      P:0A19 21AF00  [2 -     6410]            move              b1,b
3455      P:0A1A 205800  [2 -     6412]            move              (r0)+
3456      P:0A1B 555000  [2 -     6414]            move              b1,x:(r0)-
3457      P:0A1C 0606A0  [4 -     6418]            rep     #6
3458      P:0A1D 200022  [2 -     6420]            asr     a
3459                                     ; **************************************************
3460                                     ;   *LAST_Y = TMP >> 13;
3461                                     ; **************************************************
3462      P:0A1E 57E000  [2 -     6422]            move              x:(r0),b
3463      P:0A1F 44F400  [4 -     6426]            move              #>16383,x0
                 003FFF
3464      P:0A21 45F400  [4 -     6430]            move              #>16760832,x1
                 FFC000
3465      P:0A23 218E00  [2 -     6432]            move              a1,a
3466      P:0A24 200060  [2 -     6434]            add     x1,a
3467      P:0A25 20001C  [2 -     6436]            sub     a,b
3468      P:0A26 20004E  [2 -     6438]            and     x0,b
3469      P:0A27 21AF00  [2 -     6440]            move              b1,b
3470      P:0A28 556801  [4 -     6444]            tfr     b,a       b1,x:(r0+n0)
3471      P:0A29 218E00  [2 -     6446]            move              a1,a
3472      P:0A2A 060DA0  [4 -     6450]            rep     #13
3473      P:0A2B 200022  [2 -     6452]            asr     a
3474                                     ; **************************************************
3475                                     ;   TMP = *LAST_Y ? (16384 - TMP) & 8191 : TMP; 
3476                                     ; **************************************************
3477      P:0A2C 218E00  [2 -     6454]            move              a1,a
3478      P:0A2D 546203  [2 -     6456]            tst     a         a1,x:(r2)
3479      P:0A2E 0AF0AA  [6 -     6462]            jeq     L212
                 000A3A
3480      P:0A30 45E800  [4 -     6466]            move              x:(r0+n0),x1
3481      P:0A31 44F400  [4 -     6470]            move              #>8191,x0
                 001FFF






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 73



3482      P:0A33 56F400  [4 -     6474]            move              #>16384,a
                 004000
3483      P:0A35 200064  [2 -     6476]            sub     x1,a
3484      P:0A36 546809  [4 -     6480]            tfr     a,b       a1,x:(r0+n0)
3485      P:0A37 20004E  [2 -     6482]            and     x0,b
3486      P:0A38 21AF00  [2 -     6484]            move              b1,b
3487      P:0A39 556800  [4 -     6488]            move              b1,x:(r0+n0)
3488                                     L212
3489                                     ; **************************************************
3490                                     ;   TMP = (TMP * AL) >> 6;
3491                                     ; **************************************************
3492      P:0A3A 380200  [2 -     6490]            move              #2,n0
3493      P:0A3B 44F000  [4 -     6494]            move              x:FAL,x0
                 00006E
3494      P:0A3D 45E800  [4 -     6498]            move              x:(r0+n0),x1
3495      P:0A3E 2000A8  [2 -     6500]            mpy     +x0,x1,b
3496      P:0A3F 20002A  [2 -     6502]            asr     b
3497      P:0A40 212F00  [2 -     6504]            move              b0,b
3498      P:0A41 21AF00  [2 -     6506]            move              b1,b
3499      P:0A42 0606A0  [4 -     6510]            rep     #6
3500      P:0A43 20002A  [2 -     6512]            asr     b
3501                                     ; **************************************************
3502                                     ;   TMP = *LAST_Y ? (16384 - TMP) & 16383 : TMP;
3503                                     ; **************************************************
3504      P:0A44 21AF00  [2 -     6514]            move              b1,b
3505      P:0A45 556800  [4 -     6518]            move              b1,x:(r0+n0)
3506      P:0A46 56E200  [2 -     6520]            move              x:(r2),a
3507      P:0A47 200003  [2 -     6522]            tst     a
3508      P:0A48 0AF0AA  [6 -     6528]            jeq     L214
                 000A54
3509      P:0A4A 45E800  [4 -     6532]            move              x:(r0+n0),x1
3510      P:0A4B 44F400  [4 -     6536]            move              #>16383,x0
                 003FFF
3511      P:0A4D 56F400  [4 -     6540]            move              #>16384,a
                 004000
3512      P:0A4F 200064  [2 -     6542]            sub     x1,a
3513      P:0A50 546809  [4 -     6546]            tfr     a,b       a1,x:(r0+n0)
3514      P:0A51 20004E  [2 -     6548]            and     x0,b
3515      P:0A52 21AF00  [2 -     6550]            move              b1,b
3516      P:0A53 556800  [4 -     6554]            move              b1,x:(r0+n0)
3517                                     L214
3518                                     ; **************************************************
3519                                     ;   
3520                                     ;   *LAST_Y = *Y = ((*Y_L >> 6) + TMP) & 8191; 
3521                                     ; **************************************************
3522      P:0A54 56E300  [2 -     6556]            move              x:(r3),a
3523      P:0A55 218E00  [2 -     6558]            move              a1,a
3524      P:0A56 0606A0  [4 -     6562]            rep     #6
3525      P:0A57 200022  [2 -     6564]            asr     a
3526                                     ; **************************************************
3527                                     ;   *YL = *Y_L; 
3528                                     ; **************************************************
3529                                     ; **************************************************
3530                                     ;   *Y_L = YLP;
3531                                     ; **************************************************
3532                                     ; **************************************************






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 74



3533                                     ;      
3534                                     ; }
3535                                     ; **************************************************
3536      P:0A58 380200  [2 -     6566]            move              #2,n0
3537      P:0A59 44F400  [4 -     6570]            move              #>8191,x0
                 001FFF
3538      P:0A5B 45E800  [4 -     6574]            move              x:(r0+n0),x1
3539      P:0A5C 70F400  [4 -     6578]            move              #65533,n0
                 00FFFD
3540      P:0A5E 218E00  [2 -     6580]            move              a1,a
3541      P:0A5F 64E860  [4 -     6584]            add     x1,a      x:(r0+n0),r4
3542      P:0A60 70F446  [4 -     6588]            and     x0,a      #65532,n0
                 00FFFC
3543      P:0A62 218E00  [2 -     6590]            move              a1,a
3544      P:0A63 546400  [2 -     6592]            move              a1,x:(r4)
3545      P:0A64 546200  [2 -     6594]            move              a1,x:(r2)
3546      P:0A65 64E800  [4 -     6598]            move              x:(r0+n0),r4
3547      P:0A66 56E300  [2 -     6600]            move              x:(r3),a
3548      P:0A67 546400  [2 -     6602]            move              a1,x:(r4)
3549      P:0A68 205800  [2 -     6604]            move              (r0)+
3550      P:0A69 45D000  [2 -     6606]            move              x:(r0)-,x1
3551      P:0A6A 456300  [2 -     6608]            move              x1,x:(r3)
3552      P:0A6B 205000  [2 -     6610]            move              (r0)-
3553      P:0A6C 205000  [2 -     6612]            move              (r0)-
3554      P:0A6D 205600  [2 -     6614]            move              (r6)-
3555      P:0A6E 64D600  [2 -     6616]            move              x:(r6)-,r4
3556      P:0A6F 63D600  [2 -     6618]            move              x:(r6)-,r3
3557      P:0A70 62D600  [2 -     6620]            move              x:(r6)-,r2
3558      P:0A71 61D600  [2 -     6622]            move              x:(r6)-,r1
3559      P:0A72 45D600  [2 -     6624]            move              x:(r6)-,x1
3560      P:0A73 44D600  [2 -     6626]            move              x:(r6)-,x0
3561      P:0A74 57D600  [2 -     6628]            move              x:(r6)-,b
3562      P:0A75 51E600  [2 -     6630]            move              x:(r6),b0
3563      P:0A76 221600  [2 -     6632]            move              r0,r6
3564      P:0A77 60E000  [2 -     6634]            move              x:(r0),r0
3565      P:0A78 00000C  [4 -     6638]            rts
3566   
3567                                               global  Fadd
3568                                     Fadd
3569                                     ; **************************************************
3570                                     ; **************************************************
3571                                     ; **************************************************
3572                                     ; 
3573                                     ; void add(int* DQ)
3574                                     ; {
3575                                     ;   /*
3576                                     ;    * add
3577                                     ;    *
3578                                     ;    * Input signals:  DQ, SE
3579                                     ;    * Output signals: SP
3580                                     ;    */
3581                                     ; 
3582                                     ;   int dq, se;
3583                                     ; 
3584                                     ;   /* 15 SM auf 16 TC */
3585                                     ;   dq = (*DQ & (1 << 14)) ? *DQ == (1 << 14) ? 0: 






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 75



3586                                     ;        (((*DQ ^ 0x3FFF) + 0x1) & 0x3FFF) + 0xC000 : *DQ ; 
3587                                     ; **************************************************
3588      P:0A79 70F400  [4 -     6642]            move              #65533,n0
                 00FFFD
3589      P:0A7B 605E00  [2 -     6644]            move              r0,x:(r6)+
3590      P:0A7C 205E00  [2 -     6646]            move              (r6)+
3591      P:0A7D 22D000  [2 -     6648]            move              r6,r0
3592      P:0A7E 205E00  [2 -     6650]            move              (r6)+
3593      P:0A7F 515E00  [2 -     6652]            move              b0,x:(r6)+
3594      P:0A80 555E00  [2 -     6654]            move              b1,x:(r6)+
3595      P:0A81 445E00  [2 -     6656]            move              x0,x:(r6)+
3596      P:0A82 44F400  [4 -     6660]            move              #>16384,x0
                 004000
3597      P:0A84 455E00  [2 -     6662]            move              x1,x:(r6)+
3598      P:0A85 615E00  [2 -     6664]            move              r1,x:(r6)+
3599      P:0A86 61E800  [4 -     6668]            move              x:(r0+n0),r1
**** 3600 [opt_adpcm-v1.asm 3600]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3600      P:0A87 57E100  [2 -     6670]            move              x:(r1),b
3601      P:0A88 200001  [2 -     6672]            tfr     b,a
3602      P:0A89 200046  [2 -     6674]            and     x0,a
3603      P:0A8A 218E00  [2 -     6676]            move              a1,a
3604      P:0A8B 200003  [2 -     6678]            tst     a
3605      P:0A8C 0AF0AA  [6 -     6684]            jeq     L218
                 000AA2
3606      P:0A8E 20004D  [2 -     6686]            cmp     x0,b
3607      P:0A8F 0AF0A2  [6 -     6692]            jne     L220
                 000A94
3608      P:0A91 20001B  [2 -     6694]            clr     b
3609      P:0A92 0AF080  [6 -     6700]            jmp     L219
                 000AA3
3610                                     L220
3611      P:0A94 44F400  [4 -     6704]            move              #>16383,x0
                 003FFF
3612      P:0A96 56E100  [2 -     6706]            move              x:(r1),a
3613      P:0A97 56F409  [4 -     6710]            tfr     a,b       #>1,a
                 000001
3614      P:0A99 20004B  [2 -     6712]            eor     x0,b
3615      P:0A9A 21AF00  [2 -     6714]            move              b1,b
3616      P:0A9B 56F418  [4 -     6718]            add     a,b       #>49152,a
                 00C000
3617      P:0A9D 20004E  [2 -     6720]            and     x0,b
3618      P:0A9E 21AF00  [2 -     6722]            move              b1,b
3619      P:0A9F 200018  [2 -     6724]            add     a,b
3620      P:0AA0 0AF080  [6 -     6730]            jmp     L219
                 000AA3
3621                                     L218
3622      P:0AA2 57E100  [2 -     6732]            move              x:(r1),b
3623                                     L219
3624                                     ; **************************************************
3625                                     ; 
3626                                     ;   /* 15 TC auf 16 TC */
3627                                     ;   se = S_E & (1 << 14) ? 0x8000 | S_E : S_E ; 
3628                                     ; **************************************************
3629      P:0AA3 45F000  [4 -     6736]            move              x:FS_E,x1
                 00006A
3630      P:0AA5 44F461  [4 -     6740]            tfr     x1,a      #>16384,x0






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 76



                 004000
3631      P:0AA7 456046  [2 -     6742]            and     x0,a      x1,x:(r0)
3632      P:0AA8 218E00  [2 -     6744]            move              a1,a
3633      P:0AA9 200003  [2 -     6746]            tst     a
3634      P:0AAA 0AF0AA  [6 -     6752]            jeq     L222
                 000AB3
3635      P:0AAC 56E000  [2 -     6754]            move              x:(r0),a
3636      P:0AAD 44F400  [4 -     6758]            move              #>32768,x0
                 008000
3637      P:0AAF 200042  [2 -     6760]            or      x0,a
3638      P:0AB0 218E00  [2 -     6762]            move              a1,a
3639      P:0AB1 0AF080  [6 -     6768]            jmp     L223
                 000AB5
3640                                     L222
3641      P:0AB3 56F000  [4 -     6772]            move              x:FS_E,a
                 00006A
3642                                     L223
3643                                     ; **************************************************
3644                                     ;   
3645                                     ;   /* perform add operation at 16 TC */
3646                                     ;   SP  = (dq + se) & 0xFFFF;
3647                                     ; **************************************************
3648                                     ; **************************************************
3649                                     ; }
3650                                     ; **************************************************
3651      P:0AB5 44F418  [4 -     6776]            add     a,b       #>65535,x0
                 00FFFF
3652      P:0AB7 205601  [2 -     6778]            tfr     b,a       (r6)-
3653      P:0AB8 200046  [2 -     6780]            and     x0,a
3654      P:0AB9 218E00  [2 -     6782]            move              a1,a
3655      P:0ABA 547000  [4 -     6786]            move              a1,x:FSP
                 000068
3656      P:0ABC 61D600  [2 -     6788]            move              x:(r6)-,r1
3657      P:0ABD 45D600  [2 -     6790]            move              x:(r6)-,x1
3658      P:0ABE 44D600  [2 -     6792]            move              x:(r6)-,x0
3659      P:0ABF 57D600  [2 -     6794]            move              x:(r6)-,b
3660      P:0AC0 51E600  [2 -     6796]            move              x:(r6),b0
3661      P:0AC1 205600  [2 -     6798]            move              (r6)-
3662      P:0AC2 205600  [2 -     6800]            move              (r6)-
3663      P:0AC3 205600  [2 -     6802]            move              (r6)-
3664      P:0AC4 60E600  [2 -     6804]            move              x:(r6),r0
3665      P:0AC5 00000C  [4 -     6808]            rts
3666   
3667                                               global  Finit_disk_play
3668                                     Finit_disk_play
3669                                     ; **************************************************
3670                                     ; **************************************************
3671                                     ; **************************************************
3672                                     ; #ifdef __DSP56K__
3673                                     ; 
3674                                     ; void init_disk_play()
3675                                     ; {
3676                                     ; }
3677                                     ; **************************************************
3678      P:0AC6 00000C  [4 -     6812]            rts
3679   






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 77



3680                                               global  FData_in
3681      X:005C                                   org     x:
3682                                     FData_in
3683      X:005C                                   dc      122
3684      X:005D                                   dc      121
3685      X:005E                                   dc      123
3686      X:005F                                   dc      119
3687      X:0060                                   dc      116
3688      X:0061                                   dc      115
3689      X:0062                                   dc      118
3690      X:0063                                   dc      116
3691      X:0064                                   dc      114
3692      X:0065                                   dc      115
3693                                     F___i3
3694      X:0066                                   dc      0
3695      P:0AC7                                   org     p:
3696                                               global  Fdisk_play
3697                                     Fdisk_play
3698                                     ; **************************************************
3699                                     ; **************************************************
3700                                     ; **************************************************
3701                                     ; 
3702                                     ; #ifdef __SIMULATION__
3703                                     ; #include "data_in.c"
3704                                     ; #endif
3705                                     ; 
3706                                     ; void disk_play()
3707                                     ; {
3708                                     ; #ifdef __SIMULATION__
3709                                     ; 
3710                                     ;   static int i = 0;
3711                                     ; 
3712                                     ;   if (i >= sizeof(Data_in) / sizeof(int))
3713                                     ; **************************************************
3714      P:0AC7 605E00  [2 -     6814]            move              r0,x:(r6)+
3715      P:0AC8 22D000  [2 -     6816]            move              r6,r0
3716      P:0AC9 205E00  [2 -     6818]            move              (r6)+
3717      P:0ACA 515E00  [2 -     6820]            move              b0,x:(r6)+
3718      P:0ACB 555E00  [2 -     6822]            move              b1,x:(r6)+
3719      P:0ACC 57F400  [4 -     6826]            move              #>9,b
                 000009
3720      P:0ACE 445E00  [2 -     6828]            move              x0,x:(r6)+
3721      P:0ACF 455E00  [2 -     6830]            move              x1,x:(r6)+
3722      P:0AD0 615E00  [2 -     6832]            move              r1,x:(r6)+
3723      P:0AD1 56F000  [4 -     6836]            move              x:F___i3,a
                 000066
3724      P:0AD3 200005  [2 -     6838]            cmp     b,a
3725      P:0AD4 0AF0AF  [6 -     6844]            jle     L226
                 000ADA
3726                                     ; **************************************************
3727                                     ;     ExitFlag = TRUE;
3728                                     ; **************************************************
3729      P:0AD6 56F400  [4 -     6848]            move              #>1,a
                 000001
3730      P:0AD8 547000  [4 -     6852]            move              a1,x:FExitFlag
                 000070






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 78



3731                                     L226
3732                                     ; **************************************************
3733                                     ; 
3734                                     ;   SL = Data_in[i++] & 0x3FFF;
3735                                     ; **************************************************
3736                                     ; **************************************************
3737                                     ; 
3738                                     ; #else
3739                                     ; 
3740                                     ;   ExitFlag = TRUE;
3741                                     ;   SL = 0;
3742                                     ; 
3743                                     ; #endif
3744                                     ; }
3745                                     ; **************************************************
3746      P:0ADA 61F400  [4 -     6856]            move              #FData_in,r1
                 00005C
3747      P:0ADC 56F000  [4 -     6860]            move              x:F___i3,a
                 000066
3748      P:0ADE 44F409  [4 -     6864]            tfr     a,b       #>16383,x0
                 003FFF
3749      P:0AE0 45F400  [4 -     6868]            move              #>1,x1
                 000001
3750      P:0AE2 205068  [2 -     6870]            add     x1,b      (r0)-
3751      P:0AE3 21A500  [2 -     6872]            move              b1,x1
3752      P:0AE4 222F00  [2 -     6874]            move              r1,b
3753      P:0AE5 457018  [4 -     6878]            add     a,b       x1,x:F___i3
                 000066
3754      P:0AE7 21B100  [2 -     6880]            move              b1,r1
3755      P:0AE8 205600  [2 -     6882]            move              (r6)-
3756      P:0AE9 56E100  [2 -     6884]            move              x:(r1),a
3757      P:0AEA 200046  [2 -     6886]            and     x0,a
3758      P:0AEB 218E00  [2 -     6888]            move              a1,a
3759      P:0AEC 547000  [4 -     6892]            move              a1,x:FSL
                 000069
3760      P:0AEE 61D600  [2 -     6894]            move              x:(r6)-,r1
3761      P:0AEF 45D600  [2 -     6896]            move              x:(r6)-,x1
3762      P:0AF0 44D600  [2 -     6898]            move              x:(r6)-,x0
3763      P:0AF1 57D600  [2 -     6900]            move              x:(r6)-,b
3764      P:0AF2 51E600  [2 -     6902]            move              x:(r6),b0
3765      P:0AF3 221600  [2 -     6904]            move              r0,r6
3766      P:0AF4 60E000  [2 -     6906]            move              x:(r0),r0
3767      P:0AF5 00000C  [4 -     6910]            rts
3768   
3769                                               global  Fpost_disk_play
3770                                     Fpost_disk_play
3771                                     ; **************************************************
3772                                     ; **************************************************
3773                                     ; **************************************************
3774                                     ; 
3775                                     ; void post_disk_play()
3776                                     ; {
3777                                     ; }
3778                                     ; **************************************************
3779      P:0AF6 00000C  [4 -     6914]            rts
3780   






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 79



3781                                               global  Finit_disk_record
3782                                     Finit_disk_record
3783                                     ; **************************************************
3784                                     ; **************************************************
3785                                     ; **************************************************
3786                                     ; 
3787                                     ; void init_disk_record()
3788                                     ; {
3789                                     ; }
3790                                     ; **************************************************
3791      P:0AF7 00000C  [4 -     6918]            rts
3792   
3793                                               global  Fdisk_record
3794                                     Fdisk_record
3795                                     ; **************************************************
3796                                     ; **************************************************
3797                                     ; **************************************************
3798                                     ; 
3799                                     ; void disk_record()
3800                                     ; {
3801                                     ; }
3802                                     ; **************************************************
3803      P:0AF8 00000C  [4 -     6922]            rts
3804   
3805                                               global  Fpost_disk_record
3806                                     Fpost_disk_record
3807                                     ; **************************************************
3808                                     ; **************************************************
3809                                     ; **************************************************
3810                                     ; 
3811                                     ; void post_disk_record()
3812                                     ; {
3813                                     ; }
3814                                     ; **************************************************
3815      P:0AF9 00000C  [4 -     6926]            rts
3816   
3817                                               global  Fmain
3818                                     Fmain
3819      P:0AFA 055E3C  [2 -     6928]            move              ssh,x:(r6)+
3820                                     ; **************************************************
3821                                     ; **************************************************
3822                                     ; **************************************************
3823                                     ; 
3824                                     ; #else
3825                                     ; 
3826                                     ; void init_disk_play()
3827                                     ; {
3828                                     ;   istrm = fopen("data.in", "rb");
3829                                     ; }
3830                                     ; 
3831                                     ; void disk_play()
3832                                     ; {
3833                                     ;   int d;
3834                                     ; 
3835                                     ;   if (istrm != NULL && !feof(istrm))
3836                                     ;   {






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 80



3837                                     ;     fread((char*) &d, sizeof(int), 1, istrm);
3838                                     ;     SL = (d & 0x3FFF0000) >> 16;
3839                                     ;   }
3840                                     ;   if (feof(istrm))
3841                                     ;     ExitFlag = TRUE;
3842                                     ; }
3843                                     ; 
3844                                     ; void post_disk_play()
3845                                     ; {
3846                                     ;   if (istrm != NULL)
3847                                     ;     fclose(istrm);
3848                                     ; }
3849                                     ; 
3850                                     ; void init_disk_record()
3851                                     ; {
3852                                     ;   ostrm = fopen("data.out", "wb");
3853                                     ; }
3854                                     ; 
3855                                     ; void disk_record()
3856                                     ; {
3857                                     ;   int d;
3858                                     ; 
3859                                     ;   if (ostrm != NULL)
3860                                     ;   {
3861                                     ;     d = (SD & 0x0000FFFF) << 16;
3862                                     ;     fwrite((char*) &d, 4, 1, ostrm);
3863                                     ;   }
3864                                     ; }
3865                                     ; 
3866                                     ; void post_disk_record()
3867                                     ; {
3868                                     ;   if (ostrm != NULL)
3869                                     ;     fclose(ostrm);
3870                                     ; }
3871                                     ; 
3872                                     ; #endif
3873                                     ; 
3874                                     ; main()
3875                                     ; {
3876                                     ; #ifdef __DOWNLOAD__
3877                                     ;   run56k_start();
3878                                     ; #endif
3879                                     ; 
3880                                     ;   init_disk_play();
3881                                     ; **************************************************
3882      P:0AFB 445E00  [2 -     6930]            move              x0,x:(r6)+
3883      P:0AFC 615E00  [2 -     6932]            move              r1,x:(r6)+
3884      P:0AFD 625E00  [2 -     6934]            move              r2,x:(r6)+
3885      P:0AFE 635E00  [2 -     6936]            move              r3,x:(r6)+
3886      P:0AFF 645E00  [2 -     6938]            move              r4,x:(r6)+
3887      P:0B00 655E00  [2 -     6940]            move              r5,x:(r6)+
3888      P:0B01 675E00  [2 -     6942]            move              r7,x:(r6)+
3889      P:0B02 0BF080  [6 -     6948]            jsr     Finit_disk_play
                 000AC6
3890                                     ; **************************************************
3891                                     ;   init_disk_record();






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 81



3892                                     ; **************************************************
3893      P:0B04 0BF080  [6 -     6954]            jsr     Finit_disk_record
                 000AF7
3894                                     ; **************************************************
3895                                     ; 
3896                                     ;   ExitFlag = FALSE;
3897                                     ; **************************************************
3898                                     ; **************************************************
3899                                     ;   while (!ExitFlag)
3900                                     ; **************************************************
3901      P:0B06 64F413  [4 -     6958]            clr     a         #FD_Y,r4
                 000020
3902      P:0B08 62F400  [4 -     6962]            move              #FD_DQ,r2
                 00001E
3903      P:0B0A 65F400  [4 -     6966]            move              #FD_T,r5
                 00001F
3904      P:0B0C 63F400  [4 -     6970]            move              #FE_Y,r3
                 000002
3905      P:0B0E 67F400  [4 -     6974]            move              #FE_DQ,r7
                 000000
3906      P:0B10 547000  [4 -     6978]            move              a1,x:FExitFlag
                 000070
3907                                     L235
3908                                     ; **************************************************
3909                                     ;   {
3910                                     ;     disk_play();
3911                                     ; **************************************************
3912      P:0B12 0BF080  [6 -     6984]            jsr     Fdisk_play
                 000AC7
3913                                     ; **************************************************
3914                                     ;     if (ExitFlag)
3915                                     ; **************************************************
3916      P:0B14 56F000  [4 -     6988]            move              x:FExitFlag,a
                 000070
3917      P:0B16 200003  [2 -     6990]            tst     a
3918      P:0B17 0AF0A2  [6 -     6996]            jne     L233
                 000BF2
3919                                     ; **************************************************
3920                                     ;       break;
3921                                     ; **************************************************
3922                                     ; **************************************************
3923                                     ; 
3924                                     ;     /*
3925                                     ;      * ENCODER
3926                                     ;      */
3927                                     ;     adpt_predict(&E_DQ, &E_T, &E_DQ2, &E_DQ3, &E_DQ4, &E_DQ5, &E_DQ6, &E_DQ7,
3928                                     ;               &E_PK1, &E_PK2, &E_SR2, &E_A1, &E_A2, E_B,
3929                                     ;               &E_SE, &E_SEZ);
3930                                     ; **************************************************
3931      P:0B19 61F400  [4 -     7000]            move              #FE_SEZ,r1
                 000016
3932      P:0B1B 44F400  [4 -     7004]            move              #>FE_T,x0
                 000001
3933      P:0B1D 615E00  [2 -     7006]            move              r1,x:(r6)+
3934      P:0B1E 61F400  [4 -     7010]            move              #FE_SE,r1
                 000015






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 82



3935      P:0B20 615E00  [2 -     7012]            move              r1,x:(r6)+
3936      P:0B21 61F400  [4 -     7016]            move              #FE_B,r1
                 00000F
3937      P:0B23 615E00  [2 -     7018]            move              r1,x:(r6)+
3938      P:0B24 61F400  [4 -     7022]            move              #FE_A2,r1
                 00000E
3939      P:0B26 615E00  [2 -     7024]            move              r1,x:(r6)+
3940      P:0B27 61F400  [4 -     7028]            move              #FE_A1,r1
                 00000D
3941      P:0B29 615E00  [2 -     7030]            move              r1,x:(r6)+
3942      P:0B2A 61F400  [4 -     7034]            move              #FE_SR2,r1
                 00000C
3943      P:0B2C 615E00  [2 -     7036]            move              r1,x:(r6)+
3944      P:0B2D 61F400  [4 -     7040]            move              #FE_PK2,r1
                 00000B
3945      P:0B2F 615E00  [2 -     7042]            move              r1,x:(r6)+
3946      P:0B30 61F400  [4 -     7046]            move              #FE_PK1,r1
                 00000A
3947      P:0B32 615E00  [2 -     7048]            move              r1,x:(r6)+
3948      P:0B33 61F400  [4 -     7052]            move              #FE_DQ7,r1
                 000009
3949      P:0B35 615E00  [2 -     7054]            move              r1,x:(r6)+
3950      P:0B36 61F400  [4 -     7058]            move              #FE_DQ6,r1
                 000008
3951      P:0B38 615E00  [2 -     7060]            move              r1,x:(r6)+
3952      P:0B39 61F400  [4 -     7064]            move              #FE_DQ5,r1
                 000007
3953      P:0B3B 615E00  [2 -     7066]            move              r1,x:(r6)+
3954      P:0B3C 61F400  [4 -     7070]            move              #FE_DQ4,r1
                 000006
3955      P:0B3E 615E00  [2 -     7072]            move              r1,x:(r6)+
3956      P:0B3F 61F400  [4 -     7076]            move              #FE_DQ3,r1
                 000005
3957      P:0B41 615E00  [2 -     7078]            move              r1,x:(r6)+
3958      P:0B42 61F400  [4 -     7082]            move              #FE_DQ2,r1
                 000004
3959      P:0B44 615E00  [2 -     7084]            move              r1,x:(r6)+
3960      P:0B45 445E00  [2 -     7086]            move              x0,x:(r6)+
3961      P:0B46 675E00  [2 -     7088]            move              r7,x:(r6)+
3962      P:0B47 0BF080  [6 -     7094]            jsr     Fadpt_predict
                 00016A
3963                                     ; **************************************************
3964                                     ;     diff_signal();
3965                                     ; **************************************************
3966      P:0B49 3E1000  [2 -     7096]            move              #16,n6
**** 3967 [opt_adpcm-v1.asm 3967]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
3967      P:0B4A 204600  [2 -     7098]            move              (r6)-n6
3968      P:0B4B 0BF080  [6 -     7104]            jsr     Fdiff_signal
                 000126
3969                                     ; **************************************************
3970                                     ;     adpt_quant(&E_Y);
3971                                     ; **************************************************
3972      P:0B4D 635E00  [2 -     7106]            move              r3,x:(r6)+
3973      P:0B4E 0BF080  [6 -     7112]            jsr     Fadpt_quant
                 0006B5
3974                                     ; **************************************************






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 83



3975                                     ;     iadpt_quant(&E_DQ, &E_Y);
3976                                     ; **************************************************
3977      P:0B50 205600  [2 -     7114]            move              (r6)-
3978      P:0B51 635E00  [2 -     7116]            move              r3,x:(r6)+
3979      P:0B52 675E00  [2 -     7118]            move              r7,x:(r6)+
3980      P:0B53 0BF080  [6 -     7124]            jsr     Fiadpt_quant
                 00064C
3981                                     ; **************************************************
3982                                     ;     tone_detector(&E_DQ, &E_T, &E_YL, &E_t_dr, &E_LAST_TR);
3983                                     ; **************************************************
3984      P:0B55 61F400  [4 -     7128]            move              #FE_LAST_TR,r1
                 000018
3985      P:0B57 44F400  [4 -     7132]            move              #>FE_YL,x0
                 000003
3986      P:0B59 205600  [2 -     7134]            move              (r6)-
3987      P:0B5A 205600  [2 -     7136]            move              (r6)-
3988      P:0B5B 615E00  [2 -     7138]            move              r1,x:(r6)+
3989      P:0B5C 61F400  [4 -     7142]            move              #FE_t_dr,r1
                 000017
3990      P:0B5E 615E00  [2 -     7144]            move              r1,x:(r6)+
3991      P:0B5F 445E00  [2 -     7146]            move              x0,x:(r6)+
3992      P:0B60 44F400  [4 -     7150]            move              #>FE_T,x0
                 000001
3993      P:0B62 445E00  [2 -     7152]            move              x0,x:(r6)+
3994      P:0B63 675E00  [2 -     7154]            move              r7,x:(r6)+
3995      P:0B64 0BF080  [6 -     7160]            jsr     Ftone_detector
                 0007BD
3996                                     ; **************************************************
3997                                     ;     speed_control(&E_T, &E_Y, &E_DMS, &E_DML, &E_AP);
3998                                     ; **************************************************
3999      P:0B66 3E0500  [2 -     7162]            move              #5,n6
4000      P:0B67 61F400  [4 -     7166]            move              #FE_AP,r1
                 00001B
4001      P:0B69 204600  [2 -     7168]            move              (r6)-n6
4002      P:0B6A 615E00  [2 -     7170]            move              r1,x:(r6)+
4003      P:0B6B 61F400  [4 -     7174]            move              #FE_DML,r1
                 00001A
4004      P:0B6D 615E00  [2 -     7176]            move              r1,x:(r6)+
4005      P:0B6E 61F400  [4 -     7180]            move              #FE_DMS,r1
                 000019
4006      P:0B70 615E00  [2 -     7182]            move              r1,x:(r6)+
4007      P:0B71 635E00  [2 -     7184]            move              r3,x:(r6)+
4008      P:0B72 445E00  [2 -     7186]            move              x0,x:(r6)+
4009      P:0B73 0BF080  [6 -     7192]            jsr     Fspeed_control
                 00083F
4010                                     ; **************************************************
4011                                     ;     scale_factor(&E_Y, &E_YL, &E_Y_L, &E_LAST_Y);
4012                                     ; **************************************************
4013      P:0B75 3E0500  [2 -     7194]            move              #5,n6
4014      P:0B76 61F400  [4 -     7198]            move              #FE_LAST_Y,r1
                 00001D
4015      P:0B78 44F400  [4 -     7202]            move              #>FE_YL,x0
                 000003
4016      P:0B7A 204600  [2 -     7204]            move              (r6)-n6
4017      P:0B7B 615E00  [2 -     7206]            move              r1,x:(r6)+
4018      P:0B7C 61F400  [4 -     7210]            move              #FE_Y_L,r1






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 84



                 00001C
4019      P:0B7E 615E00  [2 -     7212]            move              r1,x:(r6)+
4020      P:0B7F 445E00  [2 -     7214]            move              x0,x:(r6)+
4021      P:0B80 635E00  [2 -     7216]            move              r3,x:(r6)+
4022      P:0B81 0BF080  [6 -     7222]            jsr     Fscale_factor
                 00097C
4023                                     ; **************************************************
4024                                     ; 
4025                                     ;     /*
4026                                     ;      * DECODER
4027                                     ;      */
4028                                     ;     adpt_predict(&D_DQ, &D_T, &D_DQ2, &D_DQ3, &D_DQ4, &D_DQ5, &D_DQ6, &D_DQ7,
4029                                     ;               &D_PK1, &D_PK2, &D_SR2, &D_A1, &D_A2, D_B,
4030                                     ;               &D_SE, &D_SEZ);
4031                                     ; **************************************************
4032      P:0B83 3E0400  [2 -     7224]            move              #4,n6
4033      P:0B84 61F400  [4 -     7228]            move              #FD_SEZ,r1
                 000034
4034      P:0B86 204600  [2 -     7230]            move              (r6)-n6
4035      P:0B87 615E00  [2 -     7232]            move              r1,x:(r6)+
4036      P:0B88 61F400  [4 -     7236]            move              #FD_SE,r1
                 000033
4037      P:0B8A 615E00  [2 -     7238]            move              r1,x:(r6)+
4038      P:0B8B 61F400  [4 -     7242]            move              #FD_B,r1
                 00002D
4039      P:0B8D 615E00  [2 -     7244]            move              r1,x:(r6)+
4040      P:0B8E 61F400  [4 -     7248]            move              #FD_A2,r1
                 00002C
4041      P:0B90 615E00  [2 -     7250]            move              r1,x:(r6)+
4042      P:0B91 61F400  [4 -     7254]            move              #FD_A1,r1
                 00002B
4043      P:0B93 615E00  [2 -     7256]            move              r1,x:(r6)+
4044      P:0B94 61F400  [4 -     7260]            move              #FD_SR2,r1
                 00002A
4045      P:0B96 615E00  [2 -     7262]            move              r1,x:(r6)+
4046      P:0B97 61F400  [4 -     7266]            move              #FD_PK2,r1
                 000029
4047      P:0B99 615E00  [2 -     7268]            move              r1,x:(r6)+
4048      P:0B9A 61F400  [4 -     7272]            move              #FD_PK1,r1
                 000028
4049      P:0B9C 615E00  [2 -     7274]            move              r1,x:(r6)+
4050      P:0B9D 61F400  [4 -     7278]            move              #FD_DQ7,r1
                 000027
4051      P:0B9F 615E00  [2 -     7280]            move              r1,x:(r6)+
4052      P:0BA0 61F400  [4 -     7284]            move              #FD_DQ6,r1
                 000026
4053      P:0BA2 615E00  [2 -     7286]            move              r1,x:(r6)+
4054      P:0BA3 61F400  [4 -     7290]            move              #FD_DQ5,r1
                 000025
4055      P:0BA5 615E00  [2 -     7292]            move              r1,x:(r6)+
4056      P:0BA6 61F400  [4 -     7296]            move              #FD_DQ4,r1
                 000024
4057      P:0BA8 615E00  [2 -     7298]            move              r1,x:(r6)+
4058      P:0BA9 61F400  [4 -     7302]            move              #FD_DQ3,r1
                 000023
4059      P:0BAB 615E00  [2 -     7304]            move              r1,x:(r6)+






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 85



4060      P:0BAC 61F400  [4 -     7308]            move              #FD_DQ2,r1
                 000022
4061      P:0BAE 615E00  [2 -     7310]            move              r1,x:(r6)+
4062      P:0BAF 655E00  [2 -     7312]            move              r5,x:(r6)+
4063      P:0BB0 625E00  [2 -     7314]            move              r2,x:(r6)+
4064      P:0BB1 0BF080  [6 -     7320]            jsr     Fadpt_predict
                 00016A
4065                                     ; **************************************************
4066                                     ;     iadpt_quant(&D_DQ, &D_Y);
4067                                     ; **************************************************
4068      P:0BB3 3E1000  [2 -     7322]            move              #16,n6
**** 4069 [opt_adpcm-v1.asm 4069]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
4069      P:0BB4 204600  [2 -     7324]            move              (r6)-n6
4070      P:0BB5 645E00  [2 -     7326]            move              r4,x:(r6)+
4071      P:0BB6 625E00  [2 -     7328]            move              r2,x:(r6)+
4072      P:0BB7 0BF080  [6 -     7334]            jsr     Fiadpt_quant
                 00064C
4073                                     ; **************************************************
4074                                     ;     add(&D_DQ);
4075                                     ; **************************************************
4076      P:0BB9 205600  [2 -     7336]            move              (r6)-
4077      P:0BBA 205600  [2 -     7338]            move              (r6)-
4078      P:0BBB 625E00  [2 -     7340]            move              r2,x:(r6)+
4079      P:0BBC 0BF080  [6 -     7346]            jsr     Fadd
                 000A79
4080                                     ; **************************************************
4081                                     ;     coding_adj();
4082                                     ; **************************************************
4083      P:0BBE 205600  [2 -     7348]            move              (r6)-
4084      P:0BBF 0BF080  [6 -     7354]            jsr     Fcoding_adj
                 000647
4085                                     ; **************************************************
4086                                     ;     tone_detector(&D_DQ, &D_T, &D_YL, &D_t_dr, &D_LAST_TR);
4087                                     ; **************************************************
4088      P:0BC1 61F400  [4 -     7358]            move              #FD_LAST_TR,r1
                 000036
4089      P:0BC3 44F400  [4 -     7362]            move              #>FD_YL,x0
                 000021
4090      P:0BC5 615E00  [2 -     7364]            move              r1,x:(r6)+
4091      P:0BC6 61F400  [4 -     7368]            move              #FD_t_dr,r1
                 000035
4092      P:0BC8 615E00  [2 -     7370]            move              r1,x:(r6)+
4093      P:0BC9 445E00  [2 -     7372]            move              x0,x:(r6)+
4094      P:0BCA 655E00  [2 -     7374]            move              r5,x:(r6)+
4095      P:0BCB 625E00  [2 -     7376]            move              r2,x:(r6)+
4096      P:0BCC 0BF080  [6 -     7382]            jsr     Ftone_detector
                 0007BD
4097                                     ; **************************************************
4098                                     ;     speed_control(&D_T, &D_Y, &D_DMS, &D_DML, &D_AP);
4099                                     ; **************************************************
4100      P:0BCE 3E0500  [2 -     7384]            move              #5,n6
4101      P:0BCF 61F400  [4 -     7388]            move              #FD_AP,r1
                 000039
4102      P:0BD1 204600  [2 -     7390]            move              (r6)-n6
4103      P:0BD2 615E00  [2 -     7392]            move              r1,x:(r6)+
4104      P:0BD3 61F400  [4 -     7396]            move              #FD_DML,r1






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 86



                 000038
4105      P:0BD5 615E00  [2 -     7398]            move              r1,x:(r6)+
4106      P:0BD6 61F400  [4 -     7402]            move              #FD_DMS,r1
                 000037
4107      P:0BD8 615E00  [2 -     7404]            move              r1,x:(r6)+
4108      P:0BD9 645E00  [2 -     7406]            move              r4,x:(r6)+
4109      P:0BDA 655E00  [2 -     7408]            move              r5,x:(r6)+
4110      P:0BDB 0BF080  [6 -     7414]            jsr     Fspeed_control
                 00083F
4111                                     ; **************************************************
4112                                     ;     scale_factor(&D_Y, &D_YL, &D_Y_L, &D_LAST_Y);
4113                                     ; **************************************************
4114      P:0BDD 3E0500  [2 -     7416]            move              #5,n6
4115      P:0BDE 61F400  [4 -     7420]            move              #FD_LAST_Y,r1
                 00003B
4116      P:0BE0 204600  [2 -     7422]            move              (r6)-n6
4117      P:0BE1 615E00  [2 -     7424]            move              r1,x:(r6)+
4118      P:0BE2 61F400  [4 -     7428]            move              #FD_Y_L,r1
                 00003A
4119      P:0BE4 615E00  [2 -     7430]            move              r1,x:(r6)+
4120      P:0BE5 445E00  [2 -     7432]            move              x0,x:(r6)+
4121      P:0BE6 645E00  [2 -     7434]            move              r4,x:(r6)+
4122      P:0BE7 0BF080  [6 -     7440]            jsr     Fscale_factor
                 00097C
4123                                     ; **************************************************
4124                                     ; 
4125                                     ;     disk_record();
4126                                     ; **************************************************
4127      P:0BE9 3E0400  [2 -     7442]            move              #4,n6
**** 4128 [opt_adpcm-v1.asm 4128]: ERROR --- Contents of assigned register in previous instruction not available (X data move field)
4128      P:0BEA 204600  [2 -     7444]            move              (r6)-n6
4129      P:0BEB 0BF080  [6 -     7450]            jsr     Fdisk_record
                 000AF8
4130      P:0BED 56F000  [4 -     7454]            move              x:FExitFlag,a
                 000070
4131      P:0BEF 200003  [2 -     7456]            tst     a
4132      P:0BF0 0AF0AA  [6 -     7462]            jeq     L235
                 000B12
4133                                     L233
4134                                     ; **************************************************
4135                                     ;   }
4136                                     ; 
4137                                     ;   post_disk_play();
4138                                     ; **************************************************
4139      P:0BF2 0BF080  [6 -     7468]            jsr     Fpost_disk_play
                 000AF6
4140                                     ; **************************************************
4141                                     ;   post_disk_record();
4142                                     ; **************************************************
4143      P:0BF4 0BF080  [6 -     7474]            jsr     Fpost_disk_record
                 000AF9
4144                                     ; **************************************************
4145                                     ; 
4146                                     ; #ifdef __DOWNLOAD__
4147                                     ;   run56k_end();
4148                                     ; #endif






Motorola DSP56000 Macro Cross Assembler  Version 3.04  93-11-15  14:54:54  opt_adpcm-v1.asm  Page 87



4149                                     ; 
4150                                     ;   return (0);
4151                                     ; **************************************************
4152                                     ; **************************************************
4153                                     ; } 
4154                                     ; **************************************************
4155      P:0BF6 205613  [2 -     7476]            clr     a         (r6)-
4156      P:0BF7 67D603  [2 -     7478]            tst     a         x:(r6)-,r7
4157      P:0BF8 65D600  [2 -     7480]            move              x:(r6)-,r5
4158      P:0BF9 64D600  [2 -     7482]            move              x:(r6)-,r4
4159      P:0BFA 63D600  [2 -     7484]            move              x:(r6)-,r3
4160      P:0BFB 62D600  [2 -     7486]            move              x:(r6)-,r2
4161      P:0BFC 61D600  [2 -     7488]            move              x:(r6)-,r1
4162      P:0BFD 44E600  [2 -     7490]            move              x:(r6),x0
4163      P:0BFE 205600  [2 -     7492]            move              (r6)-
4164      P:0BFF 05E63C  [2 -     7494]            move              x:(r6),ssh
**** 4165 [opt_adpcm-v1.asm 4165]: ERROR --- Instruction cannot appear immediately after control register access (Opcode field)
4165      P:0C00 00000C  [4 -     7498]            rts
4166   
4167      X:0067                                   org     x:
4168                                               global  FTDP
4169      X:0067 000000                  FTDP      bsc     1
4170                                               global  FSP
4171      X:0068 000000                  FSP       bsc     1
4172                                               global  FSL
4173      X:0069 000000                  FSL       bsc     1
4174                                               global  FS_E
4175      X:006A 000000                  FS_E      bsc     1
4176                                               global  FSD
4177      X:006B 000000                  FSD       bsc     1
4178                                               global  FI
4179      X:006C 000000                  FI        bsc     1
4180                                               global  FD
4181      X:006D 000000                  FD        bsc     1
4182                                               global  FAL
4183      X:006E 000000                  FAL       bsc     1
4184                                               global  FA_2
4185      X:006F 000000                  FA_2      bsc     1
4186                                               global  FExitFlag
4187      X:0070 000000                  FExitFlag bsc     1
4188                                               global  Fostrm
4189      X:0071 000000                  Fostrm    bsc     1
4190                                               global  Fistrm
4191      X:0072 000000                  Fistrm    bsc     1
4192   
4193                                               endsec
4194   
4195                                     ; 
4196   
128  Errors
0    Warnings








