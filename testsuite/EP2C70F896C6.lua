FUs.ClkEnSelLatency = 1.535 / PERIOD --1.535
FUs.MaxLutSize = 4
FUs.LutLatency = 0.150 / PERIOD
-- Latency table for EP2C35F672C6
FUs.AddSub = { Latencies = { 2.113 / PERIOD, 2.700 / PERIOD, 4.052 / PERIOD, 6.608 / PERIOD },
               Costs = {128, 576, 1088, 2112, 4160}, StartInterval=1,
			         ChainingThreshold = ADDSUB_ChainingThreshold}
FUs.Shift  = { Latencies = { 3.073 / PERIOD, 3.311 / PERIOD, 4.792 / PERIOD, 5.829 / PERIOD },
               Costs = {64, 1792, 4544, 11072, 26752}, StartInterval=1,
			         ChainingThreshold = SHIFT_ChainingThreshold}
FUs.Mult   = { Latencies = { 2.181 / PERIOD, 2.504 / PERIOD, 6.503 / PERIOD, 9.221 / PERIOD },
               Costs = {64, 7424, 14784, 46016, 158016}, StartInterval=1,
			         ChainingThreshold = MULT_ChainingThreshold}
FUs.ICmp   = { Latencies = { 1.909 / PERIOD, 2.752 / PERIOD, 4.669 / PERIOD, 7.342 / PERIOD },
               Costs = {64, 512, 1024, 2048, 4096}, StartInterval=1,
			         ChainingThreshold = ICMP_ChainingThreshold}
FUs.Sel    = { Latencies = { 0.835 / PERIOD, 1.026 / PERIOD, 1.209 / PERIOD, 2.769 / PERIOD },
               Costs = {64, 512, 1024, 2048, 4096}, StartInterval=1,
			         ChainingThreshold = SEL_ChainingThreshold}
FUs.Reduction    = { Latencies = { 1.587 / PERIOD, 1.749 / PERIOD, 2.318 / PERIOD, 2.655 / PERIOD },
               Costs = {0, 192, 320, 704, 1344}, StartInterval=1,
			         ChainingThreshold = REDUCTION_ChainingThreshold}
FUs.Mux    = { MaxAllowedMuxSize = 32,
               Latencies = {{ 1.296 / PERIOD, 1.315 / PERIOD, 1.613 / PERIOD, 1.543 / PERIOD },
							{ 1.353 / PERIOD, 1.978 / PERIOD, 1.908 / PERIOD, 1.965 / PERIOD },
							{ 1.943 / PERIOD, 2.156 / PERIOD, 2.386 / PERIOD, 2.466 / PERIOD },
							{ 1.893 / PERIOD, 2.105 / PERIOD, 2.303 / PERIOD, 2.400 / PERIOD },
							{ 1.960 / PERIOD, 2.243 / PERIOD, 2.343 / PERIOD, 2.460 / PERIOD },
							{ 2.006 / PERIOD, 2.087 / PERIOD, 2.225 / PERIOD, 2.280 / PERIOD },
							{ 2.330 / PERIOD, 2.345 / PERIOD, 2.629 / PERIOD, 2.649 / PERIOD },
							{ 2.063 / PERIOD, 2.361 / PERIOD, 2.431 / PERIOD, 2.745 / PERIOD },
							{ 2.302 / PERIOD, 2.553 / PERIOD, 2.498 / PERIOD, 2.684 / PERIOD },
							{ 2.397 / PERIOD, 2.539 / PERIOD, 2.684 / PERIOD, 2.921 / PERIOD },
							{ 2.516 / PERIOD, 2.464 / PERIOD, 2.652 / PERIOD, 2.824 / PERIOD },
							{ 2.607 / PERIOD, 2.630 / PERIOD, 2.979 / PERIOD, 2.809 / PERIOD },
							{ 2.879 / PERIOD, 2.873 / PERIOD, 2.936 / PERIOD, 3.196 / PERIOD },
							{ 2.550 / PERIOD, 3.045 / PERIOD, 3.130 / PERIOD, 3.097 / PERIOD },
							{ 2.716 / PERIOD, 3.046 / PERIOD, 3.350 / PERIOD, 3.610 / PERIOD },
							{ 2.927 / PERIOD, 3.315 / PERIOD, 3.323 / PERIOD, 3.491 / PERIOD },
							{ 3.246 / PERIOD, 2.890 / PERIOD, 3.405 / PERIOD, 3.613 / PERIOD },
							{ 3.171 / PERIOD, 3.284 / PERIOD, 3.426 / PERIOD, 3.504 / PERIOD },
							{ 3.137 / PERIOD, 3.440 / PERIOD, 3.682 / PERIOD, 3.872 / PERIOD },
							{ 3.078 / PERIOD, 3.315 / PERIOD, 3.568 / PERIOD, 3.993 / PERIOD },
							{ 3.423 / PERIOD, 3.693 / PERIOD, 4.060 / PERIOD, 4.182 / PERIOD },
							{ 4.334 / PERIOD, 3.637 / PERIOD, 3.909 / PERIOD, 4.316 / PERIOD },
							{ 3.555 / PERIOD, 3.777 / PERIOD, 4.015 / PERIOD, 4.506 / PERIOD },
							{ 3.756 / PERIOD, 4.147 / PERIOD, 4.833 / PERIOD, 4.657 / PERIOD },
							{ 4.263 / PERIOD, 4.008 / PERIOD, 4.319 / PERIOD, 4.471 / PERIOD },
							{ 4.143 / PERIOD, 3.965 / PERIOD, 4.514 / PERIOD, 4.911 / PERIOD },
							{ 3.961 / PERIOD, 4.200 / PERIOD, 4.287 / PERIOD, 4.887 / PERIOD },
							{ 4.367 / PERIOD, 4.406 / PERIOD, 4.502 / PERIOD, 4.647 / PERIOD },
							{ 4.149 / PERIOD, 4.423 / PERIOD, 4.452 / PERIOD, 4.945 / PERIOD },
							{ 4.707 / PERIOD, 4.596 / PERIOD, 4.744 / PERIOD, 5.269 / PERIOD },
							{ 4.912 / PERIOD, 4.823 / PERIOD, 5.124 / PERIOD, 5.379 / PERIOD }},
               Costs = {{64 , 1280 , 1536 , 2048 , 4096},
						{128 , 1088 , 2112 , 4160 , 8256},
						{256 , 1024 , 3200 , 4096 , 11136},
						{320 , 2304 , 4224 , 8320 , 16832},
						{384 , 3072 , 6848 , 13376 , 26176},
						{448 , 2944 , 5376 , 10752 , 20992},
						{640 , 3968 , 7552 , 14720 , 31104},
						{576 , 4992 , 10048 , 16960 , 35008},
						{704 , 4736 , 8896 , 17216 , 33408},
						{960 , 5504 , 9984 , 19264 , 40768},
						{1088 , 6784 , 12672 , 23808 , 46464},
						{1152 , 7808 , 11328 , 21376 , 44928},
						{1344 , 9600 , 13632 , 23552 , 49792},
						{1408 , 8704 , 16320 , 32192 , 61952},
						{1728 , 8960 , 15936 , 29760 , 50880},
						{1600 , 9792 , 15488 , 28288 , 54592},
						{1536 , 9600 , 19072 , 36416 , 80768},
						{1920 , 10240 , 20544 , 37248 , 67904},
						{1856 , 11904 , 20416 , 36608 , 77120},
						{2048 , 13632 , 27584 , 51712 , 105792},
						{1984 , 11776 , 22848 , 47680 , 75584},
						{2496 , 12416 , 24192 , 45952 , 72320},
						{2112 , 15232 , 27648 , 54848 , 119360},
						{2240 , 13568 , 25280 , 52992 , 107328},
						{2432 , 14080 , 27264 , 53888 , 103616},
						{2304 , 15936 , 31680 , 59968 , 117952},
						{2688 , 17536 , 28928 , 60544 , 121920},
						{2944 , 16448 , 33536 , 61504 , 115584},
						{2880 , 17472 , 34496 , 66560 , 137408},
						{3456 , 19392 , 36416 , 65280 , 142720},
						{2944 , 17408 , 35072 , 70592 , 129024}}, StartInterval=1,
			         ChainingThreshold = MUX_ChainingThreshold}
