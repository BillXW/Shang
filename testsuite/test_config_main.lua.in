local FMAX = @FMAX@
PERIOD = 1000.0 / FMAX
FUs.MaxAllowedMuxSize = @MaxAllowedMuxSize@
FUs.RegCost = 64
FUs.LUTCost = 64

ADDSUB_ChainingThreshold = @ADDSUB_ChainingThreshold@
SHIFT_ChainingThreshold = @SHIFT_ChainingThreshold@
MULT_ChainingThreshold = @MULT_ChainingThreshold@
ICMP_ChainingThreshold = @ICMP_ChainingThreshold@

-- load platform information script
dofile('@VTS_SOURCE_ROOT@/' .. 'EP2C35F672C6.lua')

FUs.MemoryBus = { Latency= 0.5, StartInterval=1, AddressWidth=@POINTER_SIZE_IN_BITS@, DataWidth=64 }
FUs.BRam = {  Latency=1, StartInterval=1, DataWidth = 64, Template=[=[
// Block Ram $(num)
reg   [$(datawidth - 1):0]   bram$(num)out_r;
assign bram$(num)out = bram$(num)out_r;
reg   [$(datawidth - 1):0]  mem$(num)[0:$(2^addrwidth-1)];

#if filename ~= [[]] then
initial
    $readmemh("$(filepath)$(filename)", mem$(num));
#end

always @ (posedge $(clk)) begin
  if (bram$(num)en) begin
    if (bram$(num)we)
      mem$(num)[bram$(num)addr] <= bram$(num)in;

    bram$(num)out_r <= mem$(num)[bram$(num)addr];
  end
end
]=]}

InputFile = [[@MAIN_ORIG_BC@]]
RTLOutput = [[@MAIN_RTL_SRC@]]
SoftwareIROutput = [[@MAIN_SW_LL@]]
IFFileName = [[@MAIN_IF_SRC@]]
RTLModuleName = [[@MAIN_RTL_ENTITY@]]
CounterFile = [[@CycleCounter@]]
CycleCounterTB = [[@CycleCounterTB@]]
BenchmarkCycles = [[@BenchmarkCyclesTmp@]]

INTFFILE = [[@MAIN_INT_TOP@]]
BRAMFILE = [[@MAIN_INT_BRAM@]]
BRAMINIT = [[@MAIN_INT_BRAMINIT@]]
MODELDOFILE = [[@MAIN_MODELDO_FILE@]]
TBFILE = [[@MAIN_TB_FILE@]]

-- Define some function
dofile('@VTS_SOURCE_ROOT@/' .. 'FuncDefine.lua')

Functions.main = { ModName = RTLModuleName, Scheduling = SynSettings.@ScheduleType@, Pipeline = SynSettings.@PipelineType@ }

-- Load ip module and simulation interface script.
dofile('@VTS_SOURCE_ROOT@/' .. 'AddModules.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'SCIfCodegen.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'BramMIFGen.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'InterfaceGen.lua')

-- Code for globalvariable symbols.
dofile('@VTS_SOURCE_ROOT@/' .. 'BramGlobVar.lua')

if "@SYNTHESIS_DUT@" == "ON" then

Misc.DatapathScript = [=[
local SlackFile = assert(io.open ([[@MAIN_SDC_SRC@]], "a+"))
local preprocess = require "luapp" . preprocess
local _, message = preprocess {input=RunOnDatapath, output=SlackFile}
if message ~= nil then print(message) end
SlackFile:close()
]=]

Misc.TimingConstraintsHeaderScript = [=[
local SlackFile = assert(io.open ([[@MAIN_SDC_SRC@]], "w"))
local preprocess = require "luapp" . preprocess
local _, message = preprocess {input=SDCHeader, output=SlackFile}
if message ~= nil then print(message) end
SlackFile:close()
]=]

SynAttr.ParallelCaseAttr = '/* parallel_case */'
SynAttr.FullCaseAttr = '/* full_case */'
end
