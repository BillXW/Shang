InputFile = [[@MAIN_ORIG_BC@]]
RTLOutput = [[@MAIN_RTL_SRC@]]
MainSDCOutput = [[@MAIN_SDC_SRC@]]
SoftwareIROutput = [[@MAIN_SW_LL@]]
IFFileName = [[@MAIN_IF_SRC@]]
RTLModuleName = [[@MAIN_RTL_ENTITY@]]
CounterFile = [[@CycleCounter@]]
BenchmarkCycles = [[@BenchmarkCyclesTmp@]]

local FMAX = @FMAX@
PERIOD = 1000.0 / FMAX
FUs.MaxAllowedMuxSize = @MaxAllowedMuxSize@

ADDSUB_ChainingThreshold = @ADDSUB_ChainingThreshold@
SHIFT_ChainingThreshold = @SHIFT_ChainingThreshold@
MULT_ChainingThreshold = @MULT_ChainingThreshold@
ICMP_ChainingThreshold = @ICMP_ChainingThreshold@

-- load platform information script
dofile('@VTS_SOURCE_ROOT@/' .. 'EP2C35F672C6.lua')

FUs.MemoryBus = { Latency= 0.5, StartInterval=1, AddressWidth=@POINTER_SIZE_IN_BITS@, DataWidth=64 }
FUs.BRam = {  Latency=1, StartInterval=1, DataWidth = 64, Template=[=[
// Block Ram $(num)
reg   [$(datawidth - 1):0]   bram$(num)out_r;
assign bram$(num)out = bram$(num)out_r;
reg   [$(datawidth - 1):0]  mem$(num)[0:$(2^addrwidth-1)];

#if filename ~= [[]] then
initial
    $(_put('$'))readmemh("$([[@TEST_BINARY_ROOT@]] .. '/' .. filename)", mem$(num));
#end

always @ (posedge $(clk)) begin
  if (bram$(num)en) begin
    if (bram$(num)we)
      mem$(num)[bram$(num)addr] <= bram$(num)in;

    bram$(num)out_r <= mem$(num)[bram$(num)addr];
  end
end
]=]}


-- Define some function
dofile('@VTS_SOURCE_ROOT@/' .. 'FuncDefine.lua')

Functions.@SYN_FUNC@ = { ModName = RTLModuleName, Scheduling = SynSettings.@ScheduleType@, Pipeline = SynSettings.@PipelineType@ }

-- Load ip module and simulation interface script.
dofile('@VTS_SOURCE_ROOT@/' .. 'AddModules.lua')
dofile('@VTS_SOURCE_ROOT@/' .. 'SCIfCodegen.lua')  

--Code for globalvariable symbols.
RTLGlobalTemplate = [=[
/* verilator lint_off DECLFILENAME */
/* verilator lint_off WIDTH */
/* verilator lint_off UNUSED */

`ifdef quartus_synthesis
// FIXME: Parse the address from the object file.
#local addr = 0

#for k,v in pairs(GlobalVariables) do
`define gv$(k) $(addr)
#addr = addr + 8
#end

`else
#for k,v in pairs(GlobalVariables) do
#if v.AddressSpace == 0 then
import "DPI-C" function chandle vlt_$(escapeNumber(k))();
`define gv$(k) vlt_$(escapeNumber(k))()
#end
#end
`endif
]=]

Misc.RTLGlobalScript = [=[
--Generate initialize file for block rams.
for k,v in pairs(GlobalVariables) do
  if v.AddressSpace ~= 0 then
    if v.Initializer ~= nil then
      InitFile = io.open ([[@TEST_BINARY_ROOT@]] .. '/' .. k .. '_init.txt', 'w')
      for i,n in ipairs(v.Initializer) do
        InitFile:write(string.sub(n, 3)..'\n')
      end
      io.close(InitFile)
    end
  end --end addresssapce == 0
end

local preprocess = require "luapp" . preprocess
RTLGlobalCode, message = preprocess {input=RTLGlobalTemplate}
if message ~= nil then print(message) end
]=]

if "@SYNTHESIS_DUT@" == "ON" then
  dofile('@VTS_SOURCE_ROOT@/' .. 'AlteraCommon.lua')
end
