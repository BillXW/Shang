//===------ VRegisterInfo.h - VTM Register Information -----------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file contains the VTM implementation of the TargetRegisterInfo
// class.
//
//===----------------------------------------------------------------------===//

#ifndef VINREGISTERINFO_H
#define VINREGISTERINFO_H

#include "llvm/Target/TargetRegisterInfo.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"

#include "VGenRegisterInfo.h.inc"

#include <map>
#include <set>

namespace llvm {
class TargetInstrInfo;
class Type;
class TargetData;
class TargetLowering;
class MachineRegisterInfo;

class VRegisterInfo : public TargetRegisterInfo {
  static const unsigned MaxPhyRegs = 4096;

  const TargetInstrInfo &TII;
  const TargetData &TD;
  const TargetLowering &TLI;
public:
  struct PhyRegInfo {
    union {
      struct {
        unsigned RegClassId : 4;
        unsigned AliasSetId : 14;
        unsigned UB         : 7;
        unsigned LB         : 7;
      } SData;
      unsigned IData;
    } UData;

    PhyRegInfo(unsigned ClassId, unsigned AliasSet, unsigned U, unsigned L) {
      UData.SData.RegClassId = ClassId;
      assert(UData.SData.RegClassId == ClassId && "ClassId overflow!");
      UData.SData.AliasSetId = AliasSet;
      assert(UData.SData.AliasSetId == AliasSet && "AliasSet overflow!");
      UData.SData.UB = U;
      assert(UData.SData.UB == U && "U overflow!");
      UData.SData.LB = L;
      assert(UData.SData.LB == L && "L overflow!");
    }

    /*implicit*/ PhyRegInfo(unsigned D) { UData.IData = D; }
    operator unsigned() const {return UData.IData; }

    unsigned getRegClass() const { return UData.SData.RegClassId; }
    unsigned getUB() const { return UData.SData.UB; }
    unsigned getLB() const { return UData.SData.LB; }
    unsigned getBitWidth() const { return getUB() - getLB(); }
    unsigned getAliasSetId() const { return UData.SData.AliasSetId; }
    unsigned getParentRegister() const { return UData.SData.AliasSetId; }
    bool isTopLevelReg(unsigned RegNum) const {
      return RegNum == getParentRegister();
    }
  };
private:
  typedef std::vector<unsigned> PhyRegVec;
  typedef std::set<unsigned> PhyRegSet;
  typedef std::map<unsigned, PhyRegSet> PhyRegAlaisMap;
  PhyRegVec PhyRegs;
  PhyRegAlaisMap PhyRegAliasInfo;

public:
  VRegisterInfo(const TargetInstrInfo &tii, const TargetData &td,
                const TargetLowering &tli);

  // Functions that should be generated by table gen.
  virtual int getDwarfRegNumFull(unsigned RegNum, unsigned Flavour) const;
  virtual bool needsStackRealignment(const MachineFunction &) const;
  unsigned getSubReg(unsigned RegNo, unsigned Index) const;
  unsigned getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const {
    return 0;
  }
  unsigned composeSubRegIndices(unsigned IdxA, unsigned IdxB) const {
    return IdxB;
  }

  /// Code Generation virtual methods...
  const unsigned *getCalleeSavedRegs(const MachineFunction *MF = 0) const;

  BitVector getReservedRegs(const MachineFunction &MF) const;

  const TargetRegisterClass *getPointerRegClass(unsigned Kind = 0) const;

  void eliminateFrameIndex(MachineBasicBlock::iterator II,
                           int SPAdj, RegScavenger *RS = NULL) const;

  void emitPrologue(MachineFunction &MF) const;
  void emitEpilogue(MachineFunction &MF, MachineBasicBlock &MBB) const;

  unsigned getFrameRegister(const MachineFunction &MF) const;
  unsigned getRARegister() const;

  // Exception handling queries.
  unsigned getEHExceptionRegister() const;
  unsigned getEHHandlerRegister() const;

  int getDwarfRegNum(unsigned RegNum, bool isEH) const;

  static bool IsWire(unsigned RegNo, const MachineRegisterInfo *MRI);

  // Physics register allocate information.
  void resetPhyRegAllocation();

  unsigned allocatePhyReg(unsigned RegClassID, unsigned Width);
  unsigned getSubRegOf(unsigned Parent, unsigned UB, unsigned LB);
  unsigned allocateFN(unsigned FNClassID, unsigned Width = 0);

  PhyRegInfo getPhyRegInfo(unsigned RegNum) const;

  unsigned num_phyreg() const { return PhyRegs.size(); }
};

} // end namespace llvm

#endif
