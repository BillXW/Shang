//===------ VRegisterInfo.h - VTM Register Information -----------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file contains the VTM implementation of the TargetRegisterInfo
// class.
//
//===----------------------------------------------------------------------===//

#ifndef VINREGISTERINFO_H
#define VINREGISTERINFO_H

#include "llvm/Target/TargetRegisterInfo.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"

#include "llvm/ADT/SmallVector.h"
#include "VGenRegisterInfo.h.inc"

namespace llvm {

class TargetInstrInfo;
class Type;
class TargetData;
class TargetLowering;
class MachineRegisterInfo;

struct VRegisterInfo : public TargetRegisterInfo {
  static const unsigned MaxPhyRegs = 4096;

  const TargetInstrInfo &TII;
  const TargetData &TD;
  const TargetLowering &TLI;

  VRegisterInfo(const TargetInstrInfo &tii, const TargetData &td,
                const TargetLowering &tli);
  
  // Functions that should be generated by table gen.
  virtual int getDwarfRegNumFull(unsigned RegNum, unsigned Flavour) const;
  virtual bool needsStackRealignment(const MachineFunction &) const;
  unsigned getSubReg(unsigned RegNo, unsigned Index) const { return 0; }
  unsigned getSubRegIndex(unsigned RegNo, unsigned SubRegNo) const {
    return 0;
  }
  unsigned composeSubRegIndices(unsigned IdxA, unsigned IdxB) const {
    return IdxB;
  }

  /// Code Generation virtual methods...
  const unsigned *getCalleeSavedRegs(const MachineFunction *MF = 0) const;

  BitVector getReservedRegs(const MachineFunction &MF) const;

  const TargetRegisterClass *getPointerRegClass(unsigned Kind = 0) const;
  
  void eliminateFrameIndex(MachineBasicBlock::iterator II,
                           int SPAdj, RegScavenger *RS = NULL) const;

  void emitPrologue(MachineFunction &MF) const;
  void emitEpilogue(MachineFunction &MF, MachineBasicBlock &MBB) const;

  unsigned getFrameRegister(const MachineFunction &MF) const;
  unsigned getRARegister() const;

  // Exception handling queries.
  unsigned getEHExceptionRegister() const;
  unsigned getEHHandlerRegister() const;

  int getDwarfRegNum(unsigned RegNum, bool isEH) const;

  static bool IsWire(unsigned RegNo, MachineRegisterInfo *MRI);
};

} // end namespace llvm

#endif
